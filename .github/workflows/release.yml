name: ðŸ”¨ Release scikit-decide

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2016, macos-10.15, ubuntu-latest]
        python-version: ["3.7", "3.8", "3.9"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    env:
      BOOST_DIR: 3rdparty/boost
      BOOST_VERSION: "1.76.0"
      SKDECIDE_SKIP_DEPS: 1

    steps:
      - name: Checkout scikit-decide source code
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Restore Boost cache
        uses: actions/cache@v2.1.4
        id: cache-boost
        with:
          path: ${{env.BOOST_DIR}}
          key: BOOST_${{env.BOOST_VERSION}}

      - name: Install Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          mkdir -p $BOOST_DIR
          curl --silent --location --output - \
            https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VERSION/source/boost_${BOOST_VERSION//./_}.tar.bz2 |\
            tar jxf - -C $BOOST_DIR --strip-components=1 boost_${BOOST_VERSION//./_}/boost
        shell: bash

      - name: Restore build dependencies
        id: cache-build-dependencies
        uses: actions/cache@v2
        with:
          path: |
            skdecide/hub/bin
            skdecide/hub/share
            skdecide/hub/*.msc
          key: ${{ runner.os }}-cache-deps-${{ hashFiles('cpp/deps/chuffed', 'cpp/deps/gecode', 'cpp/deps/libminizinc') }}

      - name: Update SKDECIDE_SKIP_DEPS
        if: steps.cache-build-dependencies.outputs.cache-hit != 'true'
        run: echo "SKDECIDE_SKIP_DEPS=0" >> $GITHUB_ENV

      - name: Install omp on MacOS
        if: matrix.os == 'macos-10.15'
        run: brew install libomp

      - name: Build macOS/Windows wheel
        if: matrix.os != 'ubuntu-latest'
        run: |
          export "BOOST_ROOT=$PWD/$BOOST_DIR"
          python -m pip install --upgrade pip
          pip install build poetry-dynamic-versioning
          python -m build --sdist --wheel

      - name: Restore docker dev image for Linux
        id: cache-dev-deps
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/docker
          key: dev-deps-${{ runner.os }}-${{ hashFiles('scripts/build-skdecide_dev.sh', 'scripts/build-pip-install.sh', 'scripts/Dockerfile_x86_64_dev') }}

      - name: Build x86 Linux wheels
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Load skdecide_dev image from cache, or build it if not found
          if test -f /tmp/docker/skdecide_dev.tar; then
            docker image load -i /tmp/docker/skdecide_dev.tar
          else
            docker build -f scripts/Dockerfile_x86_64_dev -t skdecide_dev .
            mkdir -p /tmp/docker
            docker image save -o /tmp/docker/skdecide_dev.tar skdecide_dev
          fi
          docker build -f scripts/Dockerfile_x86_64 -t skdecide_x86_64 --build-arg PYTHON_VERSION=${{matrix.python-version}} --build-arg SKDECIDE_SKIP_DEPS=${SKDECIDE_SKIP_DEPS} --build-arg BOOST_DIR=${BOOST_DIR} .
          # Fetch wheels from Docker
          docker run --rm -v $PWD:/mytmp skdecide_x86_64 cp -r /io/dist /mytmp

      - name: Update build cache from wheels
        if: steps.cache-build-dependencies.outputs.cache-hit != 'true'
        run: 7z x dist/*.whl -y

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

  test-unix:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.7", "3.8", "3.9"]
        compiler: [gnu]
      fail-fast: true
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest tqdm

      - name: Download artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels

      - name: Test with pytest
        run: |
          pip install --pre --find-links ./wheels/ "scikit-decide[all]"
          pytest -v -s tests/autocast
          pytest -v -s tests/solvers/cpp
          pytest -v -s tests/solvers/python
          pytest -v -s tests/scheduling

  test-macos:
    needs: build
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ["3.7", "3.8", "3.9"]
        compiler: [gnu]
      fail-fast: true
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install libomp package
        run: brew install libomp

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest tqdm

      - name: Download artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels

      - name: Test with pytest
        run: |
          env
          pip install --pre --find-links ./wheels/ "scikit-decide[all]"
          pytest -v -s tests/autocast
          pytest -v -s tests/solvers/cpp
          pytest -v -s tests/solvers/python
          pytest -v -s tests/scheduling

  test-windows:
    needs: build
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ["3.7", "3.8", "3.9"]
        compiler: [gnu]
      fail-fast: true
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest tqdm

      - name: Download artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels

      - name: Test with pytest
        run: |
          pip install --pre --find-links ./wheels/ "scikit-decide[all]"
          pytest -v -s tests/autocast
          pytest -v -s tests/solvers/cpp
          pytest -v -s tests/solvers/python
          pytest -v -s tests/scheduling

  upload:
    needs: [test-unix, test-macos, test-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels

      - name: Get the version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Upload artifacts ðŸ“¦ to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: wheels/*.whl
          tag: ${{ steps.get_version.outputs.VERSION }}
          overwrite: true
          file_glob: true

  deploy:
    needs: [upload]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels

      - name: Publish distribution ðŸ“¦ to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_PASSWORD }}
        if: github.repository == 'airbus/scikit-decide' && env.PYPI_TOKEN != ''
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_PASSWORD }}
          packages_dir: wheels/

      - name: Publish distribution ðŸ“¦ to Test PyPI
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_PASSWORD }}
        if: env.TEST_PYPI_TOKEN != ''
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          packages_dir: wheels/
          repository_url: https://test.pypi.org/legacy/

  build-docs:
    needs: [deploy]
    runs-on: ubuntu-latest
    env:
      DOCS_VERSION_PATH: /

    steps:
      - name: Get scikit-decide release version and update online docs path
        run: |
          TAG_NAME=${GITHUB_REF/refs\/tags\//}  # stripping "refs/tags/"
          SKDECIDE_VERSION=${TAG_NAME/v/}  #Â stripping "v"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "SKDECIDE_VERSION=${SKDECIDE_VERSION}" >> $GITHUB_ENV
          echo "DOCS_VERSION_PATH=/version/$SKDECIDE_VERSION/" >> $GITHUB_ENV

      - name: Checkout all branches
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0  # fetch all branches

      - name: Create binder environment for the release
        run: |
          git checkout binder
          # Specify scikit-decide dependency for the release binder env
          sed -i -e "s/scikit-decide\[all\]==.*/scikit-decide[all]==${SKDECIDE_VERSION}/" environment.yml
          git config user.name "Actions"
          git config user.email "actions@github.com"
          git commit environment.yml -m "Specify scikit-decide used by binder for release ${SKDECIDE_VERSION}"
          # get sha1 to be used by binder for the environment
          BINDER_RELEASE_ENV_SHA1=$(git rev-parse --verify HEAD)
          echo "BINDER_RELEASE_ENV_SHA1=${BINDER_RELEASE_ENV_SHA1}" >> $GITHUB_ENV
          # revert for the master binder env
          git revert HEAD -n
          git commit -m "Revert to binder environment for master branch"
          #Â push binder branch so that reference to release binder env exists on remote
          git push origin binder
          # switch back to original branch
          git checkout $TAG_NAME

      - name: Set env variables for github+binder links in doc
        run: |
          echo "AUTODOC_BINDER_ENV_GH_REPO_NAME=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "AUTODOC_BINDER_ENV_GH_BRANCH=${BINDER_RELEASE_ENV_SHA1}" >> $GITHUB_ENV
          echo "AUTODOC_NOTEBOOKS_REPO_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "AUTODOC_NOTEBOOKS_BRANCH=${TAG_NAME}" >> $GITHUB_ENV

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Download artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels

      - name: Install scikit-decide
        run: |
          pip install --pre --find-links ./wheels "scikit-decide[all]"

      - name: generate documentation
        run: yarn global add vuepress && yarn install && yarn docs:build && touch docs/.vuepress/dist/.nojekyll

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: docs/.vuepress/dist # The folder the action should deploy.
          target-folder: ${{ env.DOCS_VERSION_PATH }} # The folder the action should deploy to.
          commit-message: publish documentation
          clean: false # Releasing a new version is about creating a new directory, so we don't want to clean up the root.

  delete-nightly-release:
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - name: Delete nightly release
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.gh_access_token }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            const nightlyRelease = releases.data.find(r => r.tag_name === 'nightly'))

            if (nightlyRelease) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: nightlyRelease.id,
              })
              console.log(`${nightlyRelease.tag_name} release has been deleted`)

            } else {
              console.log('No nightly release found')
            }
