(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{628:function(e,a,t){"use strict";t.r(a);var r=t(38),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"hub-solver-maxent-irl-maxent-irl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hub-solver-maxent-irl-maxent-irl"}},[e._v("#")]),e._v(" hub.solver.maxent_irl.maxent_irl")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Domain specification")]),e._v(" "),t("skdecide-summary")],1),e._v(" "),t("h2",{attrs:{id:"maxentirl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maxentirl"}},[e._v("#")]),e._v(" MaxentIRL")]),e._v(" "),t("p",[e._v("Maximum Entropy Inverse Reinforcement Learning solver.")]),e._v(" "),t("h3",{attrs:{id:"constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[e._v("#")]),e._v(" Constructor "),t("Badge",{attrs:{text:"MaxentIRL",type:"tip"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"MaxentIRL",sig:{params:[{name:"domain_factory",annotation:"Callable[[], Domain]"},{name:"n_states",default:"400"},{name:"n_actions",default:"3"},{name:"one_feature",default:"20"},{name:"gamma",default:"0.99"},{name:"q_learning_rate",default:"0.03"},{name:"theta_learning_rate",default:"0.05"},{name:"n_epochs",default:"20000"},{name:"expert_trajectories",default:"maxent_expert_demo.npy"},{name:"callback",default:"<lambda function>",annotation:"Callable[[MaxentIRL], bool]"}],return:"None"}}}),e._v(" "),t("h4",{attrs:{id:"parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("domain_factory")])]),e._v(" "),t("li",[t("strong",[e._v("n_states")])]),e._v(" "),t("li",[t("strong",[e._v("n_actions")])]),e._v(" "),t("li",[t("strong",[e._v("one_feature")])]),e._v(" "),t("li",[t("strong",[e._v("gamma")])]),e._v(" "),t("li",[t("strong",[e._v("q_learning_rate")])]),e._v(" "),t("li",[t("strong",[e._v("theta_learning_rate")])]),e._v(" "),t("li",[t("strong",[e._v("n_epochs")])]),e._v(" "),t("li",[t("strong",[e._v("expert_trajectories")])]),e._v(" "),t("li",[t("strong",[e._v("callback")]),e._v(": function called at each solver epoch. If returning true, the solve process stops.")])]),e._v(" "),t("h3",{attrs:{id:"autocast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autocast"}},[e._v("#")]),e._v(" autocast "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"autocast",sig:{params:[{name:"self"},{name:"domain_cls",default:"None",annotation:"Optional[Type[Domain]]"}],return:"None"}}}),e._v(" "),t("p",[e._v("Autocast itself to the level corresponding to the given domain class.")]),e._v(" "),t("h4",{attrs:{id:"parameters-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("domain_cls")]),e._v(": the domain class to which level the solver needs to autocast itself.\nBy default, use the original domain factory passed to its constructor.")])]),e._v(" "),t("h3",{attrs:{id:"check-domain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check-domain"}},[e._v("#")]),e._v(" check_domain "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"check_domain",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),e._v(" "),t("p",[e._v("Check whether a domain is compliant with this solver type.")]),e._v(" "),t("p",[e._v("By default, "),t("code",[e._v("Solver.check_domain()")]),e._v(" provides some boilerplate code and internally\ncalls "),t("code",[e._v("Solver._check_domain_additional()")]),e._v(' (which returns True by default but can be overridden  to define\nspecific checks in addition to the "domain requirements"). The boilerplate code automatically checks whether all\ndomain requirements are met.')]),e._v(" "),t("h4",{attrs:{id:"parameters-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("domain")]),e._v(": The domain to check.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("True if the domain is compliant with the solver type (False otherwise).")]),e._v(" "),t("h3",{attrs:{id:"complete-with-default-hyperparameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#complete-with-default-hyperparameters"}},[e._v("#")]),e._v(" complete_with_default_hyperparameters "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"complete_with_default_hyperparameters",sig:{params:[{name:"kwargs",annotation:"Dict[str, Any]"},{name:"names",default:"None",annotation:"Optional[List[str]]"}]}}}),e._v(" "),t("p",[e._v("Add missing hyperparameters to kwargs by using default values")]),e._v(" "),t("p",[e._v("Args:\nkwargs: keyword arguments to complete (e.g. for "),t("code",[e._v("__init__")]),e._v(", "),t("code",[e._v("init_model")]),e._v(", or "),t("code",[e._v("solve")]),e._v(")\nnames: names of the hyperparameters to add if missing.\nBy default, all available hyperparameters.")]),e._v(" "),t("p",[e._v("Returns:\na new dictionary, completion of kwargs")]),e._v(" "),t("h3",{attrs:{id:"copy-and-update-hyperparameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy-and-update-hyperparameters"}},[e._v("#")]),e._v(" copy_and_update_hyperparameters "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"copy_and_update_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"**kwargs_by_name",annotation:"Dict[str, Any]"}],return:"List[Hyperparameter]"}}}),e._v(" "),t("p",[e._v("Copy hyperparameters definition of this class and update them with specified kwargs.")]),e._v(" "),t("p",[e._v("This is useful to define hyperparameters for a child class\nfor which only choices of the hyperparameter change for instance.")]),e._v(" "),t("p",[e._v("Args:\nnames: names of hyperparameters to copy. Default to all.\n**kwargs_by_name: for each hyperparameter specified by its name,\nthe attributes to update. If a given hyperparameter name is not specified,\nthe hyperparameter is copied without further update.")]),e._v(" "),t("p",[e._v("Returns:")]),e._v(" "),t("h3",{attrs:{id:"get-default-hyperparameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-default-hyperparameters"}},[e._v("#")]),e._v(" get_default_hyperparameters "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"get_default_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"}],return:"Dict[str, Any]"}}}),e._v(" "),t("p",[e._v("Get hyperparameters default values.")]),e._v(" "),t("p",[e._v("Args:\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.")]),e._v(" "),t("p",[e._v("Returns:\na mapping between hyperparameter's name_in_kwargs and its default value (None if not specified)")]),e._v(" "),t("h3",{attrs:{id:"get-domain-requirements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-requirements"}},[e._v("#")]),e._v(" get_domain_requirements "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"get_domain_requirements",sig:{params:[],return:"List[type]"}}}),e._v(" "),t("p",[e._v("Get domain requirements for this solver class to be applicable.")]),e._v(" "),t("p",[e._v("Domain requirements are classes from the "),t("code",[e._v("skdecide.builders.domain")]),e._v(" package that the domain needs to inherit from.")]),e._v(" "),t("h4",{attrs:{id:"returns-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-2"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("A list of classes to inherit from.")]),e._v(" "),t("h3",{attrs:{id:"get-hyperparameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameter"}},[e._v("#")]),e._v(" get_hyperparameter "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"get_hyperparameter",sig:{params:[{name:"name",annotation:"str"}],return:"Hyperparameter"}}}),e._v(" "),t("p",[e._v("Get hyperparameter from given name.")]),e._v(" "),t("h3",{attrs:{id:"get-hyperparameters-by-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-by-name"}},[e._v("#")]),e._v(" get_hyperparameters_by_name "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"get_hyperparameters_by_name",sig:{params:[],return:"Dict[str, Hyperparameter]"}}}),e._v(" "),t("p",[e._v("Mapping from name to corresponding hyperparameter.")]),e._v(" "),t("h3",{attrs:{id:"get-hyperparameters-names"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-names"}},[e._v("#")]),e._v(" get_hyperparameters_names "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"get_hyperparameters_names",sig:{params:[],return:"List[str]"}}}),e._v(" "),t("p",[e._v("List of hyperparameters names.")]),e._v(" "),t("h3",{attrs:{id:"index-to-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#index-to-state"}},[e._v("#")]),e._v(" index_to_state "),t("Badge",{attrs:{text:"MaxentIRL",type:"tip"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"index_to_state",sig:{params:[{name:"self"},{name:"observation_space"},{name:"state"}]}}}),e._v(" "),t("p",[e._v("Convert pos and vel about mounting car environment to the integer value")]),e._v(" "),t("h3",{attrs:{id:"is-policy-defined-for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for"}},[e._v("#")]),e._v(" is_policy_defined_for "),t("Badge",{attrs:{text:"Policies",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),e._v(" "),t("p",[e._v("Check whether the solver's current policy is defined for the given observation.")]),e._v(" "),t("h4",{attrs:{id:"parameters-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("observation")]),e._v(": The observation to consider.")])]),e._v(" "),t("h4",{attrs:{id:"returns-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-3"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("True if the policy is defined for the given observation memory (False otherwise).")]),e._v(" "),t("h3",{attrs:{id:"reset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[e._v("#")]),e._v(" reset "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"None"}}}),e._v(" "),t("p",[e._v("Reset whatever is needed on this solver before running a new episode.")]),e._v(" "),t("p",[e._v("This function does nothing by default but can be overridden if needed (e.g. to reset the hidden state of a LSTM\npolicy network, which carries information about past observations seen in the previous episode).")]),e._v(" "),t("h3",{attrs:{id:"sample-action"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-action"}},[e._v("#")]),e._v(" sample_action "),t("Badge",{attrs:{text:"Policies",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),e._v(" "),t("p",[e._v("Sample an action for the given observation (from the solver's current policy).")]),e._v(" "),t("h4",{attrs:{id:"parameters-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("observation")]),e._v(": The observation for which an action must be sampled.")])]),e._v(" "),t("h4",{attrs:{id:"returns-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-4"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("The sampled action.")]),e._v(" "),t("h3",{attrs:{id:"solve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solve"}},[e._v("#")]),e._v(" solve "),t("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"}],return:"None"}}}),e._v(" "),t("p",[e._v("Run the solving process.")]),e._v(" "),t("p",[e._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),t("code",[e._v("policy")]),e._v(" and "),t("code",[e._v("assessibility")]),e._v(".")])]),e._v(" "),t("h3",{attrs:{id:"suggest-hyperparameter-with-optuna"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameter-with-optuna"}},[e._v("#")]),e._v(" suggest_hyperparameter_with_optuna "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"suggest_hyperparameter_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"name",annotation:"str"},{name:"prefix",default:"",annotation:"str"},{name:"**kwargs"}],return:"Any"}}}),e._v(" "),t("p",[e._v("Suggest hyperparameter value during an Optuna trial.")]),e._v(" "),t("p",[e._v("This can be used during Optuna hyperparameters tuning.")]),e._v(" "),t("p",[e._v("Args:\ntrial: optuna trial during hyperparameters tuning\nname: name of the hyperparameter to choose\nprefix: prefix to add to optuna corresponding parameter name\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)\n**kwargs: options for optuna hyperparameter suggestions")]),e._v(" "),t("p",[e._v("Returns:")]),e._v(" "),t("p",[e._v("kwargs can be used to pass relevant arguments to")]),e._v(" "),t("ul",[t("li",[e._v("trial.suggest_float()")]),e._v(" "),t("li",[e._v("trial.suggest_int()")]),e._v(" "),t("li",[e._v("trial.suggest_categorical()")])]),e._v(" "),t("p",[e._v("For instance it can")]),e._v(" "),t("ul",[t("li",[e._v("add a low/high value if not existing for the hyperparameter\nor override it to narrow the search. (for float or int hyperparameters)")]),e._v(" "),t("li",[e._v("add a step or log argument (for float or int hyperparameters,\nsee optuna.trial.Trial.suggest_float())")]),e._v(" "),t("li",[e._v("override choices for categorical or enum parameters to narrow the search")])]),e._v(" "),t("h3",{attrs:{id:"suggest-hyperparameters-with-optuna"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameters-with-optuna"}},[e._v("#")]),e._v(" suggest_hyperparameters_with_optuna "),t("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"suggest_hyperparameters_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"kwargs_by_name",default:"None",annotation:"Optional[Dict[str, Dict[str, Any]]]"},{name:"fixed_hyperparameters",default:"None",annotation:"Optional[Dict[str, Any]]"},{name:"prefix",default:"",annotation:"str"}],return:"Dict[str, Any]"}}}),e._v(" "),t("p",[e._v("Suggest hyperparameters values during an Optuna trial.")]),e._v(" "),t("p",[e._v("Args:\ntrial: optuna trial during hyperparameters tuning\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.\nIf "),t("code",[e._v("fixed_hyperparameters")]),e._v(" is provided, the corresponding names are removed from "),t("code",[e._v("names")]),e._v(".\nkwargs_by_name: options for optuna hyperparameter suggestions, by hyperparameter name\nfixed_hyperparameters: values of fixed hyperparameters, useful for suggesting subbrick hyperparameters,\nif the subbrick class is not suggested by this method, but already fixed.\nWill be added to the suggested hyperparameters.\nprefix: prefix to add to optuna corresponding parameters\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)")]),e._v(" "),t("p",[e._v("Returns:\nmapping between the hyperparameter name and its suggested value.\nIf the hyperparameter has an attribute "),t("code",[e._v("name_in_kwargs")]),e._v(", this is used as the key in the mapping\ninstead of the actual hyperparameter name.\nthe mapping is updated with "),t("code",[e._v("fixed_hyperparameters")]),e._v(".")]),e._v(" "),t("p",[e._v("kwargs_by_name[some_name] will be passed as **kwargs to suggest_hyperparameter_with_optuna(name=some_name)")]),e._v(" "),t("h3",{attrs:{id:"check-domain-additional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-additional"}},[e._v("#")]),e._v(" _check_domain_additional "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_check_domain_additional",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),e._v(" "),t("p",[e._v('Check whether the given domain is compliant with the specific requirements of this solver type (i.e. the\nones in addition to "domain requirements").')]),e._v(" "),t("p",[e._v("This is a helper function called by default from "),t("code",[e._v("Solver.check_domain()")]),e._v(". It focuses on specific checks, as\nopposed to taking also into account the domain requirements for the latter.")]),e._v(" "),t("h4",{attrs:{id:"parameters-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-6"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("domain")]),e._v(": The domain to check.")])]),e._v(" "),t("h4",{attrs:{id:"returns-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-5"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("True if the domain is compliant with the specific requirements of this solver type (False otherwise).")]),e._v(" "),t("h3",{attrs:{id:"cleanup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cleanup"}},[e._v("#")]),e._v(" _cleanup "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_cleanup",sig:{params:[{name:"self"}]}}}),e._v(" "),t("p",[e._v("Runs cleanup code here, or code to be executed at the exit of a\n'with' context statement.")]),e._v(" "),t("h3",{attrs:{id:"initialize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initialize"}},[e._v("#")]),e._v(" _initialize "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_initialize",sig:{params:[{name:"self"}]}}}),e._v(" "),t("p",[e._v("Runs long-lasting initialization code here.")]),e._v(" "),t("h3",{attrs:{id:"is-policy-defined-for-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-2"}},[e._v("#")]),e._v(" _is_policy_defined_for "),t("Badge",{attrs:{text:"Policies",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),e._v(" "),t("p",[e._v("Check whether the solver's current policy is defined for the given observation.")]),e._v(" "),t("h4",{attrs:{id:"parameters-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-7"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("observation")]),e._v(": The observation to consider.")])]),e._v(" "),t("h4",{attrs:{id:"returns-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-6"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("True if the policy is defined for the given observation memory (False otherwise).")]),e._v(" "),t("h3",{attrs:{id:"reset-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reset-2"}},[e._v("#")]),e._v(" _reset "),t("Badge",{attrs:{text:"Solver",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"None"}}}),e._v(" "),t("p",[e._v("Reset whatever is needed on this solver before running a new episode.")]),e._v(" "),t("p",[e._v("This function does nothing by default but can be overridden if needed (e.g. to reset the hidden state of a LSTM\npolicy network, which carries information about past observations seen in the previous episode).")]),e._v(" "),t("h3",{attrs:{id:"sample-action-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-2"}},[e._v("#")]),e._v(" _sample_action "),t("Badge",{attrs:{text:"Policies",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),e._v(" "),t("p",[e._v("Sample an action for the given observation (from the solver's current policy).")]),e._v(" "),t("h4",{attrs:{id:"parameters-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-8"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("observation")]),e._v(": The observation for which an action must be sampled.")])]),e._v(" "),t("h4",{attrs:{id:"returns-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-7"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("p",[e._v("The sampled action.")]),e._v(" "),t("h3",{attrs:{id:"solve-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#solve-2"}},[e._v("#")]),e._v(" _solve "),t("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),e._v(" "),t("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"}],return:"None"}}}),e._v(" "),t("p",[e._v("Run the solving process.")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),t("code",[e._v("policy")]),e._v(" and "),t("code",[e._v("assessibility")]),e._v(".")])])],1)}),[],!1,null,null,null);a.default=s.exports}}]);