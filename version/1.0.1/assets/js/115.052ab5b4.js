(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{633:function(t,e,a){"use strict";a.r(e);var r=a(38),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hub-solver-mcts-mcts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hub-solver-mcts-mcts"}},[t._v("#")]),t._v(" hub.solver.mcts.mcts")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),a("skdecide-summary")],1),t._v(" "),a("h2",{attrs:{id:"mcts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mcts"}},[t._v("#")]),t._v(" MCTS")]),t._v(" "),a("p",[t._v('This is the skdecide implementation of MCTS and UCT from\n"A Survey of Monte Carlo Tree Search Methods" by Browne et al\n(IEEE Transactions on Computational Intelligence  and AI in games,\n2012). We additionally implement a heuristic value estimate as in\n"Monte-Carlo tree search and rapid action value estimation in\ncomputer Go" by Gelly and Silver (Artificial Intelligence, 2011)\nexcept that the heuristic estimate is called on states but not\non state-action pairs to be more in line with heuristic search\nalgorithms in the literature and other implementations of\nheuristic search algorithms in skdecide.')]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"MCTS",sig:{params:[{name:"domain_factory",annotation:"Callable[[], T_domain]"},{name:"time_budget",default:"3600000",annotation:"int"},{name:"rollout_budget",default:"100000",annotation:"int"},{name:"max_depth",default:"1000",annotation:"int"},{name:"residual_moving_average_window",default:"100",annotation:"int"},{name:"epsilon",default:"0.0",annotation:"float"},{name:"discount",default:"1.0",annotation:"float"},{name:"ucb_constant",default:"0.7071067811865475",annotation:"float"},{name:"online_node_garbage",default:"False",annotation:"bool"},{name:"custom_policy",default:"None",annotation:"Optional[Callable[[T_domain, D.T_agent[D.T_observation]], D.T_agent[D.T_concurrency[D.T_event]]]]"},{name:"heuristic",default:"None",annotation:"Optional[Callable[[T_domain, D.T_agent[D.T_observation]], Tuple[D.T_agent[Value[D.T_value]], int]]]"},{name:"state_expansion_rate",default:"0.1",annotation:"float"},{name:"action_expansion_rate",default:"0.1",annotation:"float"},{name:"transition_mode",default:"TransitionMode.DISTRIBUTION",annotation:"TransitionMode"},{name:"tree_policy",default:"TreePolicy.DEFAULT",annotation:"TreePolicy"},{name:"expander",default:"Expander.FULL",annotation:"Expander"},{name:"action_selector_optimization",default:"ActionSelector.UCB1",annotation:"ActionSelector"},{name:"action_selector_execution",default:"ActionSelector.BEST_Q_VALUE",annotation:"ActionSelector"},{name:"rollout_policy",default:"RolloutPolicy.RANDOM",annotation:"RolloutPolicy"},{name:"back_propagator",default:"BackPropagator.GRAPH",annotation:"BackPropagator"},{name:"continuous_planning",default:"True",annotation:"bool"},{name:"parallel",default:"False",annotation:"bool"},{name:"shared_memory_proxy",default:"None"},{name:"callback",default:"<lambda function>",annotation:"Callable[[MCTS, Optional[int]], bool]"},{name:"verbose",default:"False",annotation:"bool"}],return:"None"}}}),t._v(" "),a("p",[t._v("Construct a MCTS solver instance")]),t._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_factory")]),t._v(" (Callable[[], T_domain]): The lambda function to create a domain instance.")]),t._v(" "),a("li",[a("strong",[t._v("time_budget")]),t._v(" (int, optional): Maximum solving time in milliseconds. Defaults to 3600000.")]),t._v(" "),a("li",[a("strong",[t._v("rollout_budget")]),t._v(" (int, optional): Maximum number of rollouts. Defaults to 100000.")]),t._v(" "),a("li",[a("strong",[t._v("max_depth")]),t._v(" (int, optional): Maximum depth of each MCTS rollout. Defaults to 1000.")]),t._v(" "),a("li",[a("strong",[t._v("residual_moving_average_window")]),t._v(" (int, optional): Number of latest computed residual values\nto memorize in order to compute the average Bellman error (residual) at the root state\nof the search. Defaults to 100.")]),t._v(" "),a("li",[a("strong",[t._v("epsilon")]),t._v(" (float, optional): Maximum Bellman error (residual) allowed to decide that a state\nis solved, or to decide when no labels are used that the value function of the root state\nof the search has converged (in the latter case: the root state's Bellman error is averaged\nover the residual_moving_average_window). Defaults to 0.0.")]),t._v(" "),a("li",[a("strong",[t._v("discount")]),t._v(" (float, optional): Value function's discount factor. Defaults to 1.0.")]),t._v(" "),a("li",[a("strong",[t._v("ucb_constant")]),t._v(" (float, optional): UCB constant as used in the UCT algorithm when the action selector\n(for optimization or execution) is "),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(". Defaults to 1.0/sqrt(2.0).\nonline_node_garbage (bool, optional): Boolean indicating whether the search graph which is\nno more reachable from the root solving state should be deleted (True) or not (False). Defaults to False.\ncustom_policy (Callable[ [T_domain, D.T_agent[D.T_observation]], D.T_agent[D.T_concurrency[D.T_event]], ], optional):\nCustom policy function to use in the rollout policy from non-expanded state nodes when the rollout policy is\n"),a("code",[t._v("MCTS.RolloutPolicy.CUSTOM")]),t._v(". Defaults to None (no custom policy in use).\nheuristic (Callable[ [T_domain, D.T_agent[D.T_observation]], Tuple[D.T_agent[Value[D.T_value]], int], ], optional):\nOptional Heuristic function to initialize non-expanded state nodes (returns a pair of value estimate and\nfake number of visit counts). Defaults to None (no heuristic in use).\nstate_expansion_rate (float, optional): Value "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.081ex",height:"1.025ex",viewBox:"0 -442 920 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(451, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v(" used when the expander is "),a("code",[t._v("MCTS.Expander.PARTIAL")]),t._v("\nsuch that the probability of discovering new applicable actions in a given state node with already "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.554ex",height:"1.025ex",viewBox:"0 -442 1129 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(600, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(" discovered\napplicable actions is equal to "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"6.135ex",height:"1.779ex",viewBox:"0 -775.2 2711.6 786.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"65",d:"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(466, 363) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("path",{attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(778, 0)"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1229, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1698, 0)"}},[a("path",{attrs:{"data-c":"22C5",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1976, 0)"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2576, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])])])]),t._v(". Defaults to 0.1.\naction_expansion_rate (float, optional):  Value "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.217ex",height:"1.025ex",viewBox:"0 -442 980 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(451, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(" used when the expander is "),a("code",[t._v("MCTS.Expander.PARTIAL")]),t._v("\nsuch that the probability of discovering new state outcomes in a given action node with already "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.419ex",height:"1.025ex",viewBox:"0 -442 1069 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(600, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v(" discovered\nstate outcomes is equal to "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"6.135ex",height:"1.779ex",viewBox:"0 -775.2 2711.6 786.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"65",d:"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(466, 363) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("path",{attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(778, 0)"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1229, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1758, 0)"}},[a("path",{attrs:{"data-c":"22C5",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2036, 0)"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2636, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])])])]),t._v(". Defaults to 0.1.\ntransition_mode (MCTS.TransitionMode, optional): Transition mode enum (one of "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(",\n"),a("code",[t._v("MCTS.TransitionMode.SAMPLE")]),t._v(" or "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(" to progress the\ntrajectories with, respectively, the 'step' or 'sample' or 'get_next_state_distribution' method of the domain\ndepending on the domain's dynamics capabilities). Defaults to "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(".\ntree_policy (MCTS.TreePolicy, optional): Tree policy enum (currently only\n"),a("code",[t._v("MCTS.TreePolicy.DEFAULT")]),t._v(" which rollouts a random trajectory from the current root\nsolving state until reaching a non-expanded state node of the tree). Defaults to "),a("code",[t._v("MCTS.TreePolicy.DEFAULT")]),t._v(".\nexpander (MCTS.Expander, optional): Expander enum used when a state needs to be\nexpanded (one of "),a("code",[t._v("MCTS.Expander.FULL")]),t._v(" if applicable actions and next states should be\nall enumerated for each transition function, or "),a("code",[t._v("MCTS.Expander.PARTIAL")]),t._v(" if they should\nbe sampled with a probability which exponentially decreases as the number of already discovered\napplicable actions and next states increases). Defaults to "),a("code",[t._v("MCTS.Expander.FULL")]),t._v(".\naction_selector_optimization (MCTS.ActionSelector, optional): Action selector class used to\nselect actions in the tree policy's trajectory simulations (one of\n"),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(" to select the action based on the UCB criterion, or\n"),a("code",[t._v("MCTS.ActionSelector.BEST_Q_VALUE")]),t._v(" to select the action with maximum Q-Value in the\ncurrent state node). Defaults to "),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(".\naction_selector_execution (MCTS.ActionSelector, optional): Action selector class used to\nselect actions at execution time when the 'get_best_action' method of the\nsolver is invoked in a given execution state (one of\n"),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(" to select the action based on the UCB criterion, or\n"),a("code",[t._v("MCTS.ActionSelector.BEST_Q_VALUE")]),t._v(" to select the action with maximum Q-Value in the\ncurrent state node). Defaults to "),a("code",[t._v("MCTS.ActionSelector.BEST_Q_VALUE")]),t._v(".\nrollout_policy (MCTS.RolloutPolicy, optional): Rollout policy enum (one of\n"),a("code",[t._v("MCTS.RolloutPolicy.RANDOM")]),t._v(" to simulate trajectories starting in a non-expanded state\nnode of the tree by sampling random applicable actions in each visited state, or\n"),a("code",[t._v("MCTS.RolloutPolicy.CUSTOM")]),t._v(" to simulate them by applying actions from the given policy\n'custom_policy' given to this constructor, or "),a("code",[t._v("MCTS.RolloutPolicy.VOID")]),t._v(" to deactivate\nthe simulation of trajectories from non-expanded state nodes, in which latter case it is advised to\nprovide the 'heuristic' function in this constructor to initialize non-expanded state nodes' values).\nDefaults to "),a("code",[t._v("MCTS.RolloutPolicy.RANDOM")]),t._v(".\nback_propagator (MCTS.BackPropagator, optional): Back propagator enum (currently only\n"),a("code",[t._v("MCTS.BackPropagator.GRAPH")]),t._v(" which back-propagates empirical Q-values from non-expanded\nstate nodes up to the root node of the tree along the tree policy's sampled\ntrajectories). Defaults to "),a("code",[t._v("MCTS.BackPropagator.GRAPH")]),t._v(".\ncontinuous_planning (bool, optional): Boolean whether the solver should optimize again the policy\nfrom the current solving state (True) or not (False) even if the policy is already defined\nin this state. Defaults to True.\nparallel (bool, optional): Parallelize MCTS rollouts on different processes using duplicated domains (True)\nor not (False). Defaults to False.\nshared_memory_proxy ("),a("em",[t._v("type")]),t._v(", optional): The optional shared memory proxy. Defaults to None.\ncallback (Callable[[MCTS, Optional[int]], optional): Function called at the end of each RIW rollout,\ntaking as arguments the solver and the thread/process ID (i.e. parallel domain ID, which is equal to None\nin case of sequential execution, i.e. when 'parallel' is set to False in this constructor) from\nwhich the callback is called, and returning True if the solver must be stopped. The callback lambda\nfunction cannot take the (potentially parallelized) domain as argument because we could not otherwise\nserialize (i.e. pickle) the solver to pass it to the corresponding parallel domain process in case of parallel\nexecution. Nevertheless, the "),a("code",[t._v("ParallelSolver.get_domain")]),t._v(" method callable on the solver instance\ncan be used to retrieve either the user domain in sequential execution, or the parallel domains proxy\n"),a("code",[t._v("ParallelDomain")]),t._v(" in parallel execution from which domain methods can be called by using the\ncallback's process ID argument. Defaults to (lambda slv, i=None: False).\nverbose (bool, optional): Boolean indicating whether verbose messages should be logged (True)\nor not (False). Defaults to False.")],1)]),t._v(" "),a("h3",{attrs:{id:"autocast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocast"}},[t._v("#")]),t._v(" autocast "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"autocast",sig:{params:[{name:"self"},{name:"domain_cls",default:"None",annotation:"Optional[Type[Domain]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Autocast itself to the level corresponding to the given domain class.")]),t._v(" "),a("h4",{attrs:{id:"parameters-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_cls")]),t._v(": the domain class to which level the solver needs to autocast itself.\nBy default, use the original domain factory passed to its constructor.")])]),t._v(" "),a("h3",{attrs:{id:"call-domain-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-domain-method"}},[t._v("#")]),t._v(" call_domain_method "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"call_domain_method",sig:{params:[{name:"self"},{name:"name"},{name:"*args"}]}}}),t._v(" "),a("p",[t._v("Calls a parallel domain's method.\nThis is the only way to get a domain method for a parallel domain.")]),t._v(" "),a("h3",{attrs:{id:"check-domain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain"}},[t._v("#")]),t._v(" check_domain "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_domain",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether a domain is compliant with this solver type.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Solver.check_domain()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Solver._check_domain_additional()")]),t._v(' (which returns True by default but can be overridden  to define\nspecific checks in addition to the "domain requirements"). The boilerplate code automatically checks whether all\ndomain requirements are met.')]),t._v(" "),a("h4",{attrs:{id:"parameters-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"close"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close"}},[t._v("#")]),t._v(" close "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"close",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Joins the parallel domains' processes.\nNot calling this method (or not using the 'with' context statement)\nresults in the solver forever waiting for the domain processes to exit.")]),t._v(" "),a("h3",{attrs:{id:"complete-with-default-hyperparameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complete-with-default-hyperparameters"}},[t._v("#")]),t._v(" complete_with_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"complete_with_default_hyperparameters",sig:{params:[{name:"kwargs",annotation:"Dict[str, Any]"},{name:"names",default:"None",annotation:"Optional[List[str]]"}]}}}),t._v(" "),a("p",[t._v("Add missing hyperparameters to kwargs by using default values")]),t._v(" "),a("p",[t._v("Args:\nkwargs: keyword arguments to complete (e.g. for "),a("code",[t._v("__init__")]),t._v(", "),a("code",[t._v("init_model")]),t._v(", or "),a("code",[t._v("solve")]),t._v(")\nnames: names of the hyperparameters to add if missing.\nBy default, all available hyperparameters.")]),t._v(" "),a("p",[t._v("Returns:\na new dictionary, completion of kwargs")]),t._v(" "),a("h3",{attrs:{id:"copy-and-update-hyperparameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-and-update-hyperparameters"}},[t._v("#")]),t._v(" copy_and_update_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"copy_and_update_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"**kwargs_by_name",annotation:"Dict[str, Any]"}],return:"List[Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Copy hyperparameters definition of this class and update them with specified kwargs.")]),t._v(" "),a("p",[t._v("This is useful to define hyperparameters for a child class\nfor which only choices of the hyperparameter change for instance.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of hyperparameters to copy. Default to all.\n**kwargs_by_name: for each hyperparameter specified by its name,\nthe attributes to update. If a given hyperparameter name is not specified,\nthe hyperparameter is copied without further update.")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("h3",{attrs:{id:"get-action-prefix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-prefix"}},[t._v("#")]),t._v(" get_action_prefix "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_prefix",sig:{params:[{name:"self"}],return:"List[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the list of actions returned by the solver so far after each\ncall to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method (mostly internal use in order\nto rebuild the sequence of visited states until reaching the current\nsolving state, when using "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(" for which we can\nonly progress the transition function with steps that hide the current\nstate of the domain)")]),t._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("List[D.T_agent[D.T_observation]]: List of actions executed by the solver\nso far after each call to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method")]),t._v(" "),a("h3",{attrs:{id:"get-default-hyperparameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-default-hyperparameters"}},[t._v("#")]),t._v(" get_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_default_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Get hyperparameters default values.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.")]),t._v(" "),a("p",[t._v("Returns:\na mapping between hyperparameter's name_in_kwargs and its default value (None if not specified)")]),t._v(" "),a("h3",{attrs:{id:"get-domain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain"}},[t._v("#")]),t._v(" get_domain "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Returns the domain, optionally creating a parallel domain if not already created.")]),t._v(" "),a("h3",{attrs:{id:"get-domain-requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-requirements"}},[t._v("#")]),t._v(" get_domain_requirements "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain_requirements",sig:{params:[],return:"List[type]"}}}),t._v(" "),a("p",[t._v("Get domain requirements for this solver class to be applicable.")]),t._v(" "),a("p",[t._v("Domain requirements are classes from the "),a("code",[t._v("skdecide.builders.domain")]),t._v(" package that the domain needs to inherit from.")]),t._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A list of classes to inherit from.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameter"}},[t._v("#")]),t._v(" get_hyperparameter "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameter",sig:{params:[{name:"name",annotation:"str"}],return:"Hyperparameter"}}}),t._v(" "),a("p",[t._v("Get hyperparameter from given name.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-by-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-by-name"}},[t._v("#")]),t._v(" get_hyperparameters_by_name "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_by_name",sig:{params:[],return:"Dict[str, Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Mapping from name to corresponding hyperparameter.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-names"}},[t._v("#")]),t._v(" get_hyperparameters_names "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_names",sig:{params:[],return:"List[str]"}}}),t._v(" "),a("p",[t._v("List of hyperparameters names.")]),t._v(" "),a("h3",{attrs:{id:"get-nb-explored-states"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-explored-states"}},[t._v("#")]),t._v(" get_nb_explored_states "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_explored_states",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of states present in the search graph (which can be\nlower than the number of actually explored states if node garbage was\nset to True in the MCTS instance's constructor)")]),t._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Number of states present in the search graph")]),t._v(" "),a("h3",{attrs:{id:"get-nb-rollouts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-rollouts"}},[t._v("#")]),t._v(" get_nb_rollouts "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_rollouts",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of rollouts since the beginning of the search from\nthe root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("int: Number of MCTS rollouts\n")])])]),a("h3",{attrs:{id:"get-next-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action"}},[t._v("#")]),t._v(" get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the next deterministic action (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which next action is requested.")])]),t._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The next deterministic action.")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution"}},[t._v("#")]),t._v(" get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-policy"}},[t._v("#")]),t._v(" get_policy "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_policy",sig:{params:[{name:"self"}],return:"Dict[D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float]]"}}}),t._v(" "),a("p",[t._v("Get the (partial) solution policy defined for the states for which\nthe best value according to the execution action selector has been updated\nat least once (which is optimal if the algorithm has converged and labels are used)")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Only defined over the states reachable from the last root solving state\nwhen node garbage was set to True in the MCTS instance's constructor")])]),t._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("Dict[ D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float], ]:\nMapping from states to pairs of action and best value according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-residual-moving-average"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-residual-moving-average"}},[t._v("#")]),t._v(" get_residual_moving_average "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_residual_moving_average",sig:{params:[{name:"self"}],return:"float"}}}),t._v(" "),a("p",[t._v("Get the average Bellman error (residual) at the root state of the search,\nor an infinite value if the number of computed residuals is lower than\nthe epsilon moving average window set in the MCTS instance's constructor")]),t._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("float: Bellman error at the root state of the search averaged over\nthe epsilon moving average window")]),t._v(" "),a("h3",{attrs:{id:"get-solving-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-solving-time"}},[t._v("#")]),t._v(" get_solving_time "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_solving_time",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the solving time in milliseconds since the beginning of the\nsearch from the root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Solving time in milliseconds")]),t._v(" "),a("h3",{attrs:{id:"get-utility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility"}},[t._v("#")]),t._v(" get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the estimated on-policy utility of the given observation.")]),t._v(" "),a("p",[t._v("In mathematical terms, for a fully observable domain, this function estimates:\n")]),a("p",[a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG",display:"true"}},[a("svg",{staticStyle:{"vertical-align":"-1.605ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"23.742ex",height:"3.301ex",viewBox:"0 -750 10493.9 1459.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"56",d:"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(856.2, 413) scale(0.707)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1309.3, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1698.3, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2167.3, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2834, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"munder",transform:"translate(3612, 0)"}},[a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(325.9, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"45",d:"M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"}})])]),a("g",{attrs:{"data-mml-node":"mrow",transform:"translate(0, -600) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(517, 0)"}},[a("path",{attrs:{"data-c":"223C",d:"M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1295, 0)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4930.8, 0)"}},[a("path",{attrs:{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(5208.8, 0)"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5967.8, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(6356.8, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6873.8, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7262.8, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(7540.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8691.1, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(9746.9, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(10215.9, 0)"}},[a("path",{attrs:{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z"}})])])])])])],1),t._v("\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.29ex",height:"1ex",viewBox:"0 -431 570 442"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])])])]),t._v(" is the current policy, any "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"20.791ex",height:"2.262ex",viewBox:"0 -750 9189.4 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(794.8, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1850.6, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(2239.6, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3112.1, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(3556.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4489.3, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(4934, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5806.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(6251.2, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7183.8, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7628.4, 0)"}},[a("path",{attrs:{"data-c":"22EF",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8800.4, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" represents a trajectory sampled from\nthe policy, "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"4.647ex",height:"2.262ex",viewBox:"0 -750 2054 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(759, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1148, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1665, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" is the return (cumulative reward) and "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.375ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.974ex",height:"1.375ex",viewBox:"0 -442 872.6 607.6"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msub"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])])])])])]),t._v(" the initial state for the trajectories."),a("p"),t._v(" "),a("h4",{attrs:{id:"parameters-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-6"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-11"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The estimated on-policy utility of the given observation.")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for"}},[t._v("#")]),t._v(" is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-7"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-12"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Reset whatever is needed on this solver before running a new episode.")]),t._v(" "),a("p",[t._v("This function does nothing by default but can be overridden if needed (e.g. to reset the hidden state of a LSTM\npolicy network, which carries information about past observations seen in the previous episode).")]),t._v(" "),a("h3",{attrs:{id:"sample-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action"}},[t._v("#")]),t._v(" sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-8"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-13"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve"}},[t._v("#")]),t._v(" solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-9"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from"}},[t._v("#")]),t._v(" solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process from a given state.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve_from(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-10"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameter-with-optuna"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameter-with-optuna"}},[t._v("#")]),t._v(" suggest_hyperparameter_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameter_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"name",annotation:"str"},{name:"prefix",default:"",annotation:"str"},{name:"**kwargs"}],return:"Any"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameter value during an Optuna trial.")]),t._v(" "),a("p",[t._v("This can be used during Optuna hyperparameters tuning.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nname: name of the hyperparameter to choose\nprefix: prefix to add to optuna corresponding parameter name\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)\n**kwargs: options for optuna hyperparameter suggestions")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("p",[t._v("kwargs can be used to pass relevant arguments to")]),t._v(" "),a("ul",[a("li",[t._v("trial.suggest_float()")]),t._v(" "),a("li",[t._v("trial.suggest_int()")]),t._v(" "),a("li",[t._v("trial.suggest_categorical()")])]),t._v(" "),a("p",[t._v("For instance it can")]),t._v(" "),a("ul",[a("li",[t._v("add a low/high value if not existing for the hyperparameter\nor override it to narrow the search. (for float or int hyperparameters)")]),t._v(" "),a("li",[t._v("add a step or log argument (for float or int hyperparameters,\nsee optuna.trial.Trial.suggest_float())")]),t._v(" "),a("li",[t._v("override choices for categorical or enum parameters to narrow the search")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameters-with-optuna"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameters-with-optuna"}},[t._v("#")]),t._v(" suggest_hyperparameters_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameters_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"kwargs_by_name",default:"None",annotation:"Optional[Dict[str, Dict[str, Any]]]"},{name:"fixed_hyperparameters",default:"None",annotation:"Optional[Dict[str, Any]]"},{name:"prefix",default:"",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameters values during an Optuna trial.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.\nIf "),a("code",[t._v("fixed_hyperparameters")]),t._v(" is provided, the corresponding names are removed from "),a("code",[t._v("names")]),t._v(".\nkwargs_by_name: options for optuna hyperparameter suggestions, by hyperparameter name\nfixed_hyperparameters: values of fixed hyperparameters, useful for suggesting subbrick hyperparameters,\nif the subbrick class is not suggested by this method, but already fixed.\nWill be added to the suggested hyperparameters.\nprefix: prefix to add to optuna corresponding parameters\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)")]),t._v(" "),a("p",[t._v("Returns:\nmapping between the hyperparameter name and its suggested value.\nIf the hyperparameter has an attribute "),a("code",[t._v("name_in_kwargs")]),t._v(", this is used as the key in the mapping\ninstead of the actual hyperparameter name.\nthe mapping is updated with "),a("code",[t._v("fixed_hyperparameters")]),t._v(".")]),t._v(" "),a("p",[t._v("kwargs_by_name[some_name] will be passed as **kwargs to suggest_hyperparameter_with_optuna(name=some_name)")]),t._v(" "),a("h3",{attrs:{id:"check-domain-additional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-additional"}},[t._v("#")]),t._v(" _check_domain_additional "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_domain_additional",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v('Check whether the given domain is compliant with the specific requirements of this solver type (i.e. the\nones in addition to "domain requirements").')]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Solver.check_domain()")]),t._v(". It focuses on specific checks, as\nopposed to taking also into account the domain requirements for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-11"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-14"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the specific requirements of this solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-2"}},[t._v("#")]),t._v(" _get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the best action to execute in a given state according to the execution action selector.\nThe search subgraph which is no more reachable after executing the returned action is\nalso deleted if node garbage was set to True in the MCTS instance's constructor.\nThe solver is run from "),a("code",[t._v("observation")]),t._v(" if "),a("code",[t._v("continuous_planning")]),t._v(" was set to True\nin the MCTS instance's constructor or if no solution is defined (i.e. has been\npreviously computed) in "),a("code",[t._v("observation")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns a random action if no action is defined in the given state,\nwhich is why it is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-12"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which the best action is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-15"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_agent[D.T_concurrency[D.T_event]]: Best action to execute according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-2"}},[t._v("#")]),t._v(" _get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-13"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-16"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-utility-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-2"}},[t._v("#")]),t._v(" _get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the best value in a given state according to the execution action selector")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns None if no action is defined in the given state, which is why\nit is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-14"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State from which the best value is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-17"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_value: Value of the action returned by the execution action selector")]),t._v(" "),a("h3",{attrs:{id:"initialize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize"}},[t._v("#")]),t._v(" _initialize "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_initialize",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Launches the parallel domains.\nThis method requires to have previously recorded the self._domain_factory,\nthe set of lambda functions passed to the solver's constructor (e.g. heuristic lambda for heuristic-based solvers),\nand whether the parallel domain jobs should notify their status via the IPC protocol (required when interacting with\nother programming languages like C++)")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-2"}},[t._v("#")]),t._v(" _is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-15"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-18"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-solution-defined-for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-solution-defined-for"}},[t._v("#")]),t._v(" _is_solution_defined_for "),a("Badge",{attrs:{text:"MCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_solution_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicates whether the solution policy is defined for a given state")]),t._v(" "),a("h4",{attrs:{id:"parameters-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-16"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which an entry is searched\nin the policy graph")])]),t._v(" "),a("h4",{attrs:{id:"returns-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-19"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("bool: True if the state has been explored and an action can be obtained\nfrom the execution action selector, False otherwise")]),t._v(" "),a("h3",{attrs:{id:"reset-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-2"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Clears the search graph.")]),t._v(" "),a("h3",{attrs:{id:"sample-action-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-2"}},[t._v("#")]),t._v(" _sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-17"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-20"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-2"}},[t._v("#")]),t._v(" _solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("h4",{attrs:{id:"parameters-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-18"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-2"}},[t._v("#")]),t._v(" _solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the MCTS algorithm from a given root solving state")]),t._v(" "),a("h4",{attrs:{id:"parameters-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-19"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(" (D.T_memory[D.T_state]): Root state of the search grph from which\nMCTS rollouts are launched")])]),t._v(" "),a("h2",{attrs:{id:"hmcts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hmcts"}},[t._v("#")]),t._v(" HMCTS")]),t._v(" "),a("p",[t._v("MCTS solver to use with the multi-agent hierarchical "),a("code",[t._v("MAHD")]),t._v(" solver\nas the multi-agent compound solver")]),t._v(" "),a("h3",{attrs:{id:"constructor-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-2"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"HMCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"HMCTS",sig:{params:[{name:"domain_factory",annotation:"Callable[[], MCTS.T_domain]"},{name:"time_budget",default:"3600000",annotation:"int"},{name:"rollout_budget",default:"100000",annotation:"int"},{name:"max_depth",default:"1000",annotation:"int"},{name:"residual_moving_average_window",default:"100",annotation:"int"},{name:"epsilon",default:"0.0",annotation:"float"},{name:"discount",default:"1.0",annotation:"float"},{name:"ucb_constant",default:"0.7071067811865475",annotation:"float"},{name:"online_node_garbage",default:"False",annotation:"bool"},{name:"heuristic",default:"None",annotation:"Callable[[MCTS.T_domain, D.T_state], Tuple[D.T_agent[Value[D.T_value]], D.T_agent[D.T_concurrency[D.T_event]]]]"},{name:"heuristic_confidence",default:"1000",annotation:"int"},{name:"action_choice_noise",default:"0.1",annotation:"float"},{name:"state_expansion_rate",default:"0.1",annotation:"float"},{name:"action_expansion_rate",default:"0.1",annotation:"float"},{name:"transition_mode",default:"TransitionMode.DISTRIBUTION",annotation:"MCTS.TransitionMode"},{name:"tree_policy",default:"TreePolicy.DEFAULT",annotation:"MCTS.TreePolicy"},{name:"expander",default:"Expander.FULL",annotation:"MCTS.Expander"},{name:"action_selector_optimization",default:"ActionSelector.UCB1",annotation:"MCTS.ActionSelector"},{name:"action_selector_execution",default:"ActionSelector.BEST_Q_VALUE",annotation:"MCTS.ActionSelector"},{name:"back_propagator",default:"BackPropagator.GRAPH",annotation:"MCTS.BackPropagator"},{name:"continuous_planning",default:"True",annotation:"bool"},{name:"parallel",default:"False",annotation:"bool"},{name:"shared_memory_proxy",default:"None"},{name:"callback",default:"<lambda function>",annotation:"Callable[[HMCTS, Optional[int]], bool]"},{name:"verbose",default:"False",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Construct a HMCTS solver instance")]),t._v(" "),a("h4",{attrs:{id:"parameters-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-20"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_factory")]),t._v(" (Callable[[], MCTS.T_domain]): The lambda function to create a domain instance.")]),t._v(" "),a("li",[a("strong",[t._v("time_budget")]),t._v(" (int, optional): Maximum solving time in milliseconds. Defaults to 3600000.")]),t._v(" "),a("li",[a("strong",[t._v("rollout_budget")]),t._v(" (int, optional): Maximum number of rollouts. Defaults to 100000.")]),t._v(" "),a("li",[a("strong",[t._v("max_depth")]),t._v(" (int, optional): Maximum depth of each MCTS rollout. Defaults to 1000.")]),t._v(" "),a("li",[a("strong",[t._v("residual_moving_average_window")]),t._v(" (int, optional): Number of latest computed residual values\nto memorize in order to compute the average Bellman error (residual) at the root state\nof the search. Defaults to 100.")]),t._v(" "),a("li",[a("strong",[t._v("epsilon")]),t._v(" (float, optional): Maximum Bellman error (residual) allowed to decide that a state\nis solved, or to decide when no labels are used that the value function of the root state\nof the search has converged (in the latter case: the root state's Bellman error is averaged\nover the residual_moving_average_window). Defaults to 0.0.")]),t._v(" "),a("li",[a("strong",[t._v("discount")]),t._v(" (float, optional): Value function's discount factor. Defaults to 1.0.")]),t._v(" "),a("li",[a("strong",[t._v("ucb_constant")]),t._v(" (float, optional): UCB constant as used in the UCT algorithm when the action selector\n(for optimization or execution) is "),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(". Defaults to 1.0/sqrt(2.0).\nonline_node_garbage (bool, optional): Boolean indicating whether the search graph which is\nno more reachable from the root solving state should be deleted (True) or not (False). Defaults to False.\nheuristic (Callable[ [MCTS.T_domain, D.T_state], Tuple[ D.T_agent[Value[D.T_value]], D.T_agent[D.T_concurrency[D.T_event]] ], ], optional):\nMulti-agent compound heuristic as returned by the "),a("code",[t._v("MAHD")]),t._v(" algorithm from independent\nagent heuristic contributions. Defaults to None (no heuristic in use).\nheuristic_confidence (int, optional): Fake state node visits set on non-expanded state nodes for which the\nmulti-agent compound heuristic is computed by "),a("code",[t._v("MAHD")]),t._v(". Defaults to 1000.\naction_choice_noise (float, optional): Probability used to sample random actions instead of executing the\ncompound heuristic actions returned by the "),a("code",[t._v("MAHD")]),t._v(" algorithm. Defaults to 0.1.\nstate_expansion_rate (float, optional): Value "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.081ex",height:"1.025ex",viewBox:"0 -442 920 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(451, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v(" used when the expander is "),a("code",[t._v("MCTS.Expander.PARTIAL")]),t._v("\nsuch that the probability of discovering new applicable actions in a given state node with already "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.554ex",height:"1.025ex",viewBox:"0 -442 1129 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(600, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(" discovered\napplicable actions is equal to "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"6.135ex",height:"1.779ex",viewBox:"0 -775.2 2711.6 786.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"65",d:"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(466, 363) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("path",{attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(778, 0)"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1229, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1698, 0)"}},[a("path",{attrs:{"data-c":"22C5",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1976, 0)"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2576, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])])])]),t._v(". Defaults to 0.1.\naction_expansion_rate (float, optional):  Value "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.217ex",height:"1.025ex",viewBox:"0 -442 980 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(451, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(" used when the expander is "),a("code",[t._v("MCTS.Expander.PARTIAL")]),t._v("\nsuch that the probability of discovering new state outcomes in a given action node with already "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"2.419ex",height:"1.025ex",viewBox:"0 -442 1069 453"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(600, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v(" discovered\nstate outcomes is equal to "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"6.135ex",height:"1.779ex",viewBox:"0 -775.2 2711.6 786.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"65",d:"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"}})]),a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(466, 363) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mo"}},[a("path",{attrs:{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(778, 0)"}},[a("path",{attrs:{"data-c":"72",d:"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1229, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1758, 0)"}},[a("path",{attrs:{"data-c":"22C5",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2036, 0)"}},[a("path",{attrs:{"data-c":"6E",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2636, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])])])]),t._v(". Defaults to 0.1.\ntransition_mode (MCTS.TransitionMode, optional): Transition mode enum (one of "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(",\n"),a("code",[t._v("MCTS.TransitionMode.SAMPLE")]),t._v(" or "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(" to progress the\ntrajectories with, respectively, the 'step' or 'sample' or 'get_next_state_distribution' method of the domain\ndepending on the domain's dynamics capabilities). Defaults to "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(".\ntree_policy (MCTS.TreePolicy, optional): Tree policy enum (currently only\n"),a("code",[t._v("MCTS.TreePolicy.DEFAULT")]),t._v(" which rollouts a random trajectory from the current root\nsolving state until reaching a non-expanded state node of the tree). Defaults to "),a("code",[t._v("MCTS.TreePolicy.DEFAULT")]),t._v(".\nexpander (MCTS.Expander, optional): Expander enum used when a state needs to be\nexpanded (one of "),a("code",[t._v("MCTS.Expander.FULL")]),t._v(" if applicable actions and next states should be\nall enumerated for each transition function, or "),a("code",[t._v("MCTS.Expander.PARTIAL")]),t._v(" if they should\nbe sampled with a probability which exponentially decreases as the number of already discovered\napplicable actions and next states increases). Defaults to "),a("code",[t._v("MCTS.Expander.FULL")]),t._v(".\naction_selector_optimization (MCTS.ActionSelector, optional): Action selector class used to\nselect actions in the tree policy's trajectory simulations (one of\n"),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(" to select the action based on the UCB criterion, or\n"),a("code",[t._v("MCTS.ActionSelector.BEST_Q_VALUE")]),t._v(" to select the action with maximum Q-Value in the\ncurrent state node). Defaults to "),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(".\naction_selector_execution (MCTS.ActionSelector, optional): Action selector class used to\nselect actions at execution time when the 'get_best_action' method of the\nsolver is invoked in a given execution state (one of\n"),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(" to select the action based on the UCB criterion, or\n"),a("code",[t._v("MCTS.ActionSelector.BEST_Q_VALUE")]),t._v(" to select the action with maximum Q-Value in the\ncurrent state node). Defaults to "),a("code",[t._v("MCTS.ActionSelector.BEST_Q_VALUE")]),t._v(".\nback_propagator (MCTS.BackPropagator, optional): Back propagator enum (currently only\n"),a("code",[t._v("MCTS.BackPropagator.GRAPH")]),t._v(" which back-propagates empirical Q-values from non-expanded\nstate nodes up to the root node of the tree along the tree policy's sampled\ntrajectories). Defaults to "),a("code",[t._v("MCTS.BackPropagator.GRAPH")]),t._v(".\ncontinuous_planning (bool, optional): Boolean whether the solver should optimize again the policy\nfrom the current solving state (True) or not (False) even if the policy is already defined\nin this state. Defaults to True.\nparallel (bool, optional): Parallelize MCTS rollouts on different processes using duplicated domains (True)\nor not (False). Defaults to False.\nshared_memory_proxy ("),a("em",[t._v("type")]),t._v(", optional): The optional shared memory proxy. Defaults to None.\ncallback (Callable[[HMCTS, Optional[int]], optional): Function called at the end of each MCTS rollout,\ntaking as arguments the solver and the thread/process ID (i.e. parallel domain ID, which is equal to None\nin case of sequential execution, i.e. when 'parallel' is set to False in this constructor) from\nwhich the callback is called, and returning True if the solver must be stopped. The callback lambda\nfunction cannot take the (potentially parallelized) domain as argument because we could not otherwise\nserialize (i.e. pickle) the solver to pass it to the corresponding parallel domain process in case of parallel\nexecution. Nevertheless, the "),a("code",[t._v("ParallelSolver.get_domain")]),t._v(" method callable on the solver instance\ncan be used to retrieve either the user domain in sequential execution, or the parallel domains proxy\n"),a("code",[t._v("ParallelDomain")]),t._v(" in parallel execution from which domain methods can be called by using the\ncallback's process ID argument. Defaults to (lambda slv, i=None: False).\nverbose (bool, optional): Boolean indicating whether verbose messages should be logged (True)\nor not (False). Defaults to False.")],1)]),t._v(" "),a("h3",{attrs:{id:"autocast-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocast-2"}},[t._v("#")]),t._v(" autocast "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"autocast",sig:{params:[{name:"self"},{name:"domain_cls",default:"None",annotation:"Optional[Type[Domain]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Autocast itself to the level corresponding to the given domain class.")]),t._v(" "),a("h4",{attrs:{id:"parameters-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-21"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_cls")]),t._v(": the domain class to which level the solver needs to autocast itself.\nBy default, use the original domain factory passed to its constructor.")])]),t._v(" "),a("h3",{attrs:{id:"call-domain-method-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-domain-method-2"}},[t._v("#")]),t._v(" call_domain_method "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"call_domain_method",sig:{params:[{name:"self"},{name:"name"},{name:"*args"}]}}}),t._v(" "),a("p",[t._v("Calls a parallel domain's method.\nThis is the only way to get a domain method for a parallel domain.")]),t._v(" "),a("h3",{attrs:{id:"check-domain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-2"}},[t._v("#")]),t._v(" check_domain "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_domain",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether a domain is compliant with this solver type.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Solver.check_domain()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Solver._check_domain_additional()")]),t._v(' (which returns True by default but can be overridden  to define\nspecific checks in addition to the "domain requirements"). The boilerplate code automatically checks whether all\ndomain requirements are met.')]),t._v(" "),a("h4",{attrs:{id:"parameters-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-22"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-21"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"close-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-2"}},[t._v("#")]),t._v(" close "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"close",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Joins the parallel domains' processes.\nNot calling this method (or not using the 'with' context statement)\nresults in the solver forever waiting for the domain processes to exit.")]),t._v(" "),a("h3",{attrs:{id:"complete-with-default-hyperparameters-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complete-with-default-hyperparameters-2"}},[t._v("#")]),t._v(" complete_with_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"complete_with_default_hyperparameters",sig:{params:[{name:"kwargs",annotation:"Dict[str, Any]"},{name:"names",default:"None",annotation:"Optional[List[str]]"}]}}}),t._v(" "),a("p",[t._v("Add missing hyperparameters to kwargs by using default values")]),t._v(" "),a("p",[t._v("Args:\nkwargs: keyword arguments to complete (e.g. for "),a("code",[t._v("__init__")]),t._v(", "),a("code",[t._v("init_model")]),t._v(", or "),a("code",[t._v("solve")]),t._v(")\nnames: names of the hyperparameters to add if missing.\nBy default, all available hyperparameters.")]),t._v(" "),a("p",[t._v("Returns:\na new dictionary, completion of kwargs")]),t._v(" "),a("h3",{attrs:{id:"copy-and-update-hyperparameters-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-and-update-hyperparameters-2"}},[t._v("#")]),t._v(" copy_and_update_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"copy_and_update_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"**kwargs_by_name",annotation:"Dict[str, Any]"}],return:"List[Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Copy hyperparameters definition of this class and update them with specified kwargs.")]),t._v(" "),a("p",[t._v("This is useful to define hyperparameters for a child class\nfor which only choices of the hyperparameter change for instance.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of hyperparameters to copy. Default to all.\n**kwargs_by_name: for each hyperparameter specified by its name,\nthe attributes to update. If a given hyperparameter name is not specified,\nthe hyperparameter is copied without further update.")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("h3",{attrs:{id:"get-action-prefix-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-prefix-2"}},[t._v("#")]),t._v(" get_action_prefix "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_prefix",sig:{params:[{name:"self"}],return:"List[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the list of actions returned by the solver so far after each\ncall to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method (mostly internal use in order\nto rebuild the sequence of visited states until reaching the current\nsolving state, when using "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(" for which we can\nonly progress the transition function with steps that hide the current\nstate of the domain)")]),t._v(" "),a("h4",{attrs:{id:"returns-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-22"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("List[D.T_agent[D.T_observation]]: List of actions executed by the solver\nso far after each call to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method")]),t._v(" "),a("h3",{attrs:{id:"get-default-hyperparameters-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-default-hyperparameters-2"}},[t._v("#")]),t._v(" get_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_default_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Get hyperparameters default values.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.")]),t._v(" "),a("p",[t._v("Returns:\na mapping between hyperparameter's name_in_kwargs and its default value (None if not specified)")]),t._v(" "),a("h3",{attrs:{id:"get-domain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-2"}},[t._v("#")]),t._v(" get_domain "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Returns the domain, optionally creating a parallel domain if not already created.")]),t._v(" "),a("h3",{attrs:{id:"get-domain-requirements-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-requirements-2"}},[t._v("#")]),t._v(" get_domain_requirements "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain_requirements",sig:{params:[],return:"List[type]"}}}),t._v(" "),a("p",[t._v("Get domain requirements for this solver class to be applicable.")]),t._v(" "),a("p",[t._v("Domain requirements are classes from the "),a("code",[t._v("skdecide.builders.domain")]),t._v(" package that the domain needs to inherit from.")]),t._v(" "),a("h4",{attrs:{id:"returns-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-23"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A list of classes to inherit from.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameter-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameter-2"}},[t._v("#")]),t._v(" get_hyperparameter "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameter",sig:{params:[{name:"name",annotation:"str"}],return:"Hyperparameter"}}}),t._v(" "),a("p",[t._v("Get hyperparameter from given name.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-by-name-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-by-name-2"}},[t._v("#")]),t._v(" get_hyperparameters_by_name "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_by_name",sig:{params:[],return:"Dict[str, Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Mapping from name to corresponding hyperparameter.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-names-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-names-2"}},[t._v("#")]),t._v(" get_hyperparameters_names "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_names",sig:{params:[],return:"List[str]"}}}),t._v(" "),a("p",[t._v("List of hyperparameters names.")]),t._v(" "),a("h3",{attrs:{id:"get-nb-explored-states-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-explored-states-2"}},[t._v("#")]),t._v(" get_nb_explored_states "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_explored_states",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of states present in the search graph (which can be\nlower than the number of actually explored states if node garbage was\nset to True in the MCTS instance's constructor)")]),t._v(" "),a("h4",{attrs:{id:"returns-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-24"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Number of states present in the search graph")]),t._v(" "),a("h3",{attrs:{id:"get-nb-rollouts-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-rollouts-2"}},[t._v("#")]),t._v(" get_nb_rollouts "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_rollouts",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of rollouts since the beginning of the search from\nthe root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-25"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("int: Number of MCTS rollouts\n")])])]),a("h3",{attrs:{id:"get-next-action-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-3"}},[t._v("#")]),t._v(" get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the next deterministic action (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-23"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which next action is requested.")])]),t._v(" "),a("h4",{attrs:{id:"returns-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-26"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The next deterministic action.")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-3"}},[t._v("#")]),t._v(" get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-24"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-27"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-policy-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-policy-2"}},[t._v("#")]),t._v(" get_policy "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_policy",sig:{params:[{name:"self"}],return:"Dict[D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float]]"}}}),t._v(" "),a("p",[t._v("Get the (partial) solution policy defined for the states for which\nthe best value according to the execution action selector has been updated\nat least once (which is optimal if the algorithm has converged and labels are used)")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Only defined over the states reachable from the last root solving state\nwhen node garbage was set to True in the MCTS instance's constructor")])]),t._v(" "),a("h4",{attrs:{id:"returns-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-28"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("Dict[ D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float], ]:\nMapping from states to pairs of action and best value according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-residual-moving-average-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-residual-moving-average-2"}},[t._v("#")]),t._v(" get_residual_moving_average "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_residual_moving_average",sig:{params:[{name:"self"}],return:"float"}}}),t._v(" "),a("p",[t._v("Get the average Bellman error (residual) at the root state of the search,\nor an infinite value if the number of computed residuals is lower than\nthe epsilon moving average window set in the MCTS instance's constructor")]),t._v(" "),a("h4",{attrs:{id:"returns-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-29"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("float: Bellman error at the root state of the search averaged over\nthe epsilon moving average window")]),t._v(" "),a("h3",{attrs:{id:"get-solving-time-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-solving-time-2"}},[t._v("#")]),t._v(" get_solving_time "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_solving_time",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the solving time in milliseconds since the beginning of the\nsearch from the root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-30"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Solving time in milliseconds")]),t._v(" "),a("h3",{attrs:{id:"get-utility-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-3"}},[t._v("#")]),t._v(" get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the estimated on-policy utility of the given observation.")]),t._v(" "),a("p",[t._v("In mathematical terms, for a fully observable domain, this function estimates:\n")]),a("p",[a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG",display:"true"}},[a("svg",{staticStyle:{"vertical-align":"-1.605ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"23.742ex",height:"3.301ex",viewBox:"0 -750 10493.9 1459.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"56",d:"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(856.2, 413) scale(0.707)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1309.3, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1698.3, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2167.3, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2834, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"munder",transform:"translate(3612, 0)"}},[a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(325.9, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"45",d:"M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"}})])]),a("g",{attrs:{"data-mml-node":"mrow",transform:"translate(0, -600) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(517, 0)"}},[a("path",{attrs:{"data-c":"223C",d:"M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1295, 0)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4930.8, 0)"}},[a("path",{attrs:{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(5208.8, 0)"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5967.8, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(6356.8, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6873.8, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7262.8, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(7540.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8691.1, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(9746.9, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(10215.9, 0)"}},[a("path",{attrs:{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z"}})])])])])])],1),t._v("\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.29ex",height:"1ex",viewBox:"0 -431 570 442"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])])])]),t._v(" is the current policy, any "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"20.791ex",height:"2.262ex",viewBox:"0 -750 9189.4 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(794.8, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1850.6, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(2239.6, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3112.1, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(3556.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4489.3, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(4934, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5806.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(6251.2, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7183.8, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7628.4, 0)"}},[a("path",{attrs:{"data-c":"22EF",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8800.4, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" represents a trajectory sampled from\nthe policy, "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"4.647ex",height:"2.262ex",viewBox:"0 -750 2054 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(759, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1148, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1665, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" is the return (cumulative reward) and "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.375ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.974ex",height:"1.375ex",viewBox:"0 -442 872.6 607.6"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msub"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])])])])])]),t._v(" the initial state for the trajectories."),a("p"),t._v(" "),a("h4",{attrs:{id:"parameters-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-25"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-31"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The estimated on-policy utility of the given observation.")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-3"}},[t._v("#")]),t._v(" is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-26"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-32"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-3"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Reset whatever is needed on this solver before running a new episode.")]),t._v(" "),a("p",[t._v("This function does nothing by default but can be overridden if needed (e.g. to reset the hidden state of a LSTM\npolicy network, which carries information about past observations seen in the previous episode).")]),t._v(" "),a("h3",{attrs:{id:"sample-action-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-3"}},[t._v("#")]),t._v(" sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-27"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-33"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-3"}},[t._v("#")]),t._v(" solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-28"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-3"}},[t._v("#")]),t._v(" solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process from a given state.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve_from(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-29"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameter-with-optuna-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameter-with-optuna-2"}},[t._v("#")]),t._v(" suggest_hyperparameter_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameter_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"name",annotation:"str"},{name:"prefix",default:"",annotation:"str"},{name:"**kwargs"}],return:"Any"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameter value during an Optuna trial.")]),t._v(" "),a("p",[t._v("This can be used during Optuna hyperparameters tuning.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nname: name of the hyperparameter to choose\nprefix: prefix to add to optuna corresponding parameter name\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)\n**kwargs: options for optuna hyperparameter suggestions")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("p",[t._v("kwargs can be used to pass relevant arguments to")]),t._v(" "),a("ul",[a("li",[t._v("trial.suggest_float()")]),t._v(" "),a("li",[t._v("trial.suggest_int()")]),t._v(" "),a("li",[t._v("trial.suggest_categorical()")])]),t._v(" "),a("p",[t._v("For instance it can")]),t._v(" "),a("ul",[a("li",[t._v("add a low/high value if not existing for the hyperparameter\nor override it to narrow the search. (for float or int hyperparameters)")]),t._v(" "),a("li",[t._v("add a step or log argument (for float or int hyperparameters,\nsee optuna.trial.Trial.suggest_float())")]),t._v(" "),a("li",[t._v("override choices for categorical or enum parameters to narrow the search")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameters-with-optuna-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameters-with-optuna-2"}},[t._v("#")]),t._v(" suggest_hyperparameters_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameters_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"kwargs_by_name",default:"None",annotation:"Optional[Dict[str, Dict[str, Any]]]"},{name:"fixed_hyperparameters",default:"None",annotation:"Optional[Dict[str, Any]]"},{name:"prefix",default:"",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameters values during an Optuna trial.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.\nIf "),a("code",[t._v("fixed_hyperparameters")]),t._v(" is provided, the corresponding names are removed from "),a("code",[t._v("names")]),t._v(".\nkwargs_by_name: options for optuna hyperparameter suggestions, by hyperparameter name\nfixed_hyperparameters: values of fixed hyperparameters, useful for suggesting subbrick hyperparameters,\nif the subbrick class is not suggested by this method, but already fixed.\nWill be added to the suggested hyperparameters.\nprefix: prefix to add to optuna corresponding parameters\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)")]),t._v(" "),a("p",[t._v("Returns:\nmapping between the hyperparameter name and its suggested value.\nIf the hyperparameter has an attribute "),a("code",[t._v("name_in_kwargs")]),t._v(", this is used as the key in the mapping\ninstead of the actual hyperparameter name.\nthe mapping is updated with "),a("code",[t._v("fixed_hyperparameters")]),t._v(".")]),t._v(" "),a("p",[t._v("kwargs_by_name[some_name] will be passed as **kwargs to suggest_hyperparameter_with_optuna(name=some_name)")]),t._v(" "),a("h3",{attrs:{id:"check-domain-additional-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-additional-2"}},[t._v("#")]),t._v(" _check_domain_additional "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_domain_additional",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v('Check whether the given domain is compliant with the specific requirements of this solver type (i.e. the\nones in addition to "domain requirements").')]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Solver.check_domain()")]),t._v(". It focuses on specific checks, as\nopposed to taking also into account the domain requirements for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-30"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-34"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the specific requirements of this solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-4"}},[t._v("#")]),t._v(" _get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the best action to execute in a given state according to the execution action selector.\nThe search subgraph which is no more reachable after executing the returned action is\nalso deleted if node garbage was set to True in the MCTS instance's constructor.\nThe solver is run from "),a("code",[t._v("observation")]),t._v(" if "),a("code",[t._v("continuous_planning")]),t._v(" was set to True\nin the MCTS instance's constructor or if no solution is defined (i.e. has been\npreviously computed) in "),a("code",[t._v("observation")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns a random action if no action is defined in the given state,\nwhich is why it is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-31"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which the best action is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-35"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_agent[D.T_concurrency[D.T_event]]: Best action to execute according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-4"}},[t._v("#")]),t._v(" _get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-32"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-36"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-utility-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-4"}},[t._v("#")]),t._v(" _get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the best value in a given state according to the execution action selector")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns None if no action is defined in the given state, which is why\nit is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-33"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State from which the best value is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-37"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_value: Value of the action returned by the execution action selector")]),t._v(" "),a("h3",{attrs:{id:"initialize-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-2"}},[t._v("#")]),t._v(" _initialize "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_initialize",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Launches the parallel domains.\nThis method requires to have previously recorded the self._domain_factory,\nthe set of lambda functions passed to the solver's constructor (e.g. heuristic lambda for heuristic-based solvers),\nand whether the parallel domain jobs should notify their status via the IPC protocol (required when interacting with\nother programming languages like C++)")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-4"}},[t._v("#")]),t._v(" _is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-34"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-38"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-solution-defined-for-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-solution-defined-for-2"}},[t._v("#")]),t._v(" _is_solution_defined_for "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_solution_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicates whether the solution policy is defined for a given state")]),t._v(" "),a("h4",{attrs:{id:"parameters-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-35"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which an entry is searched\nin the policy graph")])]),t._v(" "),a("h4",{attrs:{id:"returns-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-39"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("bool: True if the state has been explored and an action can be obtained\nfrom the execution action selector, False otherwise")]),t._v(" "),a("h3",{attrs:{id:"policy-heuristic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#policy-heuristic"}},[t._v("#")]),t._v(" _policy_heuristic "),a("Badge",{attrs:{text:"HMCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_policy_heuristic",sig:{params:[{name:"self"},{name:"domain",annotation:"MCTS.T_domain"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Reconstitutes the MCTS custom rollout executed starting in non-expanded\nstate nodes from the multi-agent compound heuristic computed by the\n"),a("code",[t._v("MAHD")]),t._v(" algorithm")]),t._v(" "),a("h4",{attrs:{id:"parameters-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-36"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(" (MCTS.T_domain): The domain instance")]),t._v(" "),a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): The non-expanded state node from which\nthe custom rollout policy must be run")])]),t._v(" "),a("h4",{attrs:{id:"returns-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-40"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_agent[D.T_concurrency[D.T_event]]: Rollout action to execute in the given state")]),t._v(" "),a("h3",{attrs:{id:"reset-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-4"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Clears the search graph and the heuristic records.")]),t._v(" "),a("h3",{attrs:{id:"sample-action-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-4"}},[t._v("#")]),t._v(" _sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-37"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-41"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-4"}},[t._v("#")]),t._v(" _solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("h4",{attrs:{id:"parameters-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-38"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-4"}},[t._v("#")]),t._v(" _solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the MCTS algorithm from a given root solving state")]),t._v(" "),a("h4",{attrs:{id:"parameters-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-39"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(" (D.T_memory[D.T_state]): Root state of the search grph from which\nMCTS rollouts are launched")])]),t._v(" "),a("h3",{attrs:{id:"value-heuristic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#value-heuristic"}},[t._v("#")]),t._v(" _value_heuristic "),a("Badge",{attrs:{text:"HMCTS",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_value_heuristic",sig:{params:[{name:"self"},{name:"domain",annotation:"MCTS.T_domain"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Tuple[D.T_agent[Value[D.T_value]], int]"}}}),t._v(" "),a("p",[t._v("Reconstitutes the MCTS heuristic used to initialize the value of non-expanded\nstate nodes from the multi-agent compound heuristic computed by the\n"),a("code",[t._v("MAHD")]),t._v(" algorithm")]),t._v(" "),a("h4",{attrs:{id:"parameters-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-40"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(" (MCTS.T_domain): The domain instance")]),t._v(" "),a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): The non-expanded state node from which\nthe heuristic must be computed")])]),t._v(" "),a("h4",{attrs:{id:"returns-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-42"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("Tuple[D.T_agent[Value[D.T_value]], int]: MCTS heuristic value at the given state")]),t._v(" "),a("h2",{attrs:{id:"uct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uct"}},[t._v("#")]),t._v(" UCT")]),t._v(" "),a("p",[t._v('UCT as described in the paper " Bandit Based Monte-Carlo Planning" by\nLevente Kocsis and Csaba Szepesvari (ECML 2006) is a famous variant of MCTS\nwith some specific options including the famous UCB1 action selector to perform tree exploration')]),t._v(" "),a("h3",{attrs:{id:"constructor-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-3"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"UCT",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"UCT",sig:{params:[{name:"domain_factory",annotation:"Callable[[], MCTS.T_domain]"},{name:"time_budget",default:"3600000",annotation:"int"},{name:"rollout_budget",default:"100000",annotation:"int"},{name:"max_depth",default:"1000",annotation:"int"},{name:"residual_moving_average_window",default:"100",annotation:"int"},{name:"epsilon",default:"0.0",annotation:"float"},{name:"discount",default:"1.0",annotation:"float"},{name:"ucb_constant",default:"0.7071067811865475",annotation:"float"},{name:"online_node_garbage",default:"False",annotation:"bool"},{name:"custom_policy",default:"None",annotation:"Callable[[MCTS.T_domain, D.T_agent[D.T_observation]], D.T_agent[D.T_concurrency[D.T_event]]]"},{name:"heuristic",default:"None",annotation:"Callable[[MCTS.T_domain, D.T_agent[D.T_observation]], Tuple[D.T_agent[Value[D.T_value]], int]]"},{name:"transition_mode",default:"TransitionMode.DISTRIBUTION",annotation:"MCTS.TransitionMode"},{name:"rollout_policy",default:"RolloutPolicy.RANDOM",annotation:"MCTS.RolloutPolicy"},{name:"continuous_planning",default:"True",annotation:"bool"},{name:"parallel",default:"False",annotation:"bool"},{name:"shared_memory_proxy",default:"None"},{name:"callback",default:"<lambda function>",annotation:"Callable[[UCT, Optional[int]], bool]"},{name:"verbose",default:"False",annotation:"bool"}],return:"None"}}}),t._v(" "),a("p",[t._v("Construct a UCT solver instance")]),t._v(" "),a("h4",{attrs:{id:"parameters-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-41"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_factory")]),t._v(" (Callable[[], MCTS.T_domain]): The lambda function to create a domain instance.")]),t._v(" "),a("li",[a("strong",[t._v("time_budget")]),t._v(" (int, optional): Maximum solving time in milliseconds. Defaults to 3600000.")]),t._v(" "),a("li",[a("strong",[t._v("rollout_budget")]),t._v(" (int, optional): Maximum number of rollouts. Defaults to 100000.")]),t._v(" "),a("li",[a("strong",[t._v("max_depth")]),t._v(" (int, optional): Maximum depth of each UCT rollout. Defaults to 1000.")]),t._v(" "),a("li",[a("strong",[t._v("residual_moving_average_window")]),t._v(" (int, optional): Number of latest computed residual values\nto memorize in order to compute the average Bellman error (residual) at the root state\nof the search. Defaults to 100.")]),t._v(" "),a("li",[a("strong",[t._v("epsilon")]),t._v(" (float, optional): Maximum Bellman error (residual) allowed to decide that a state\nis solved, or to decide when no labels are used that the value function of the root state\nof the search has converged (in the latter case: the root state's Bellman error is averaged\nover the residual_moving_average_window). Defaults to 0.0.")]),t._v(" "),a("li",[a("strong",[t._v("discount")]),t._v(" (float, optional): Value function's discount factor. Defaults to 1.0.")]),t._v(" "),a("li",[a("strong",[t._v("ucb_constant")]),t._v(" (float, optional): UCB constant as used in the UCT algorithm when the action selector\n(for optimization or execution) is "),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(". Defaults to 1.0/sqrt(2.0).\nonline_node_garbage (bool, optional): Boolean indicating whether the search graph which is\nno more reachable from the root solving state should be deleted (True) or not (False). Defaults to False.\ncustom_policy (Callable[ [MCTS.T_domain, D.T_agent[D.T_observation]], D.T_agent[D.T_concurrency[D.T_event]], ], optional):\nCustom policy function to use in the rollout policy from non-expanded state nodes when the rollout policy is\n"),a("code",[t._v("MCTS.RolloutPolicy.CUSTOM")]),t._v(". Defaults to None (no custom policy in use).\nheuristic (Callable[ [MCTS.T_domain, D.T_agent[D.T_observation]], Tuple[D.T_agent[Value[D.T_value]], int], ], optional):\nOptional Heuristic function to initialize non-expanded state nodes (returns a pair of value estimate and\nfake number of visit counts). Defaults to None (no heuristic in use).\ntransition_mode (MCTS.TransitionMode, optional): Transition mode enum (one of "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(",\n"),a("code",[t._v("MCTS.TransitionMode.SAMPLE")]),t._v(" or "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(" to progress the\ntrajectories with, respectively, the 'step' or 'sample' or 'get_next_state_distribution' method of the domain\ndepending on the domain's dynamics capabilities). Defaults to "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(".\nrollout_policy (MCTS.RolloutPolicy, optional): Rollout policy enum (one of\n:"),a("code",[t._v("MCTS.RolloutPolicy.RANDOM")]),t._v(" to simulate trajectories starting in a non-expanded state\nnode of the tree by sampling random applicable actions in each visited state, or\n"),a("code",[t._v("MCTS.RolloutPolicy.CUSTOM")]),t._v(" to simulate them by applying actions from the given policy\n'custom_policy' given to this constructor, or "),a("code",[t._v("MCTS.RolloutPolicy.VOID")]),t._v(" to deactivate\nthe simulation of trajectories from non-expanded state nodes, in which latter case it is advised to\nprovide the 'heuristic' function in this constructor to initialize non-expanded state nodes' values).\nDefaults to :"),a("code",[t._v("MCTS.RolloutPolicy.RANDOM")]),t._v(".\ncontinuous_planning (bool, optional): Boolean whether the solver should optimize again the policy\nfrom the current solving state (True) or not (False) even if the policy is already defined\nin this state. Defaults to True.\nparallel (bool, optional): Parallelize MCTS rollouts on different processes using duplicated domains (True)\nor not (False). Defaults to False.\nshared_memory_proxy ("),a("em",[t._v("type")]),t._v(", optional): The optional shared memory proxy. Defaults to None.\ncallback (Callable[[UCT, Optional[int]], optional): Function called at the end of each RIW rollout,\ntaking as arguments the solver and the thread/process ID (i.e. parallel domain ID, which is equal to None\nin case of sequential execution, i.e. when 'parallel' is set to False in this constructor) from\nwhich the callback is called, and returning True if the solver must be stopped. The callback lambda\nfunction cannot take the (potentially parallelized) domain as argument because we could not otherwise\nserialize (i.e. pickle) the solver to pass it to the corresponding parallel domain process in case of parallel\nexecution. Nevertheless, the "),a("code",[t._v("ParallelSolver.get_domain")]),t._v(" method callable on the solver instance\ncan be used to retrieve either the user domain in sequential execution, or the parallel domains proxy\n"),a("code",[t._v("ParallelDomain")]),t._v(" in parallel execution from which domain methods can be called by using the\ncallback's process ID argument. Defaults to (lambda slv, i=None: False).\nverbose (bool, optional): Boolean indicating whether verbose messages should be logged (True)\nor not (False). Defaults to False.")])]),t._v(" "),a("h3",{attrs:{id:"autocast-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocast-3"}},[t._v("#")]),t._v(" autocast "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"autocast",sig:{params:[{name:"self"},{name:"domain_cls",default:"None",annotation:"Optional[Type[Domain]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Autocast itself to the level corresponding to the given domain class.")]),t._v(" "),a("h4",{attrs:{id:"parameters-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-42"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_cls")]),t._v(": the domain class to which level the solver needs to autocast itself.\nBy default, use the original domain factory passed to its constructor.")])]),t._v(" "),a("h3",{attrs:{id:"call-domain-method-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-domain-method-3"}},[t._v("#")]),t._v(" call_domain_method "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"call_domain_method",sig:{params:[{name:"self"},{name:"name"},{name:"*args"}]}}}),t._v(" "),a("p",[t._v("Calls a parallel domain's method.\nThis is the only way to get a domain method for a parallel domain.")]),t._v(" "),a("h3",{attrs:{id:"check-domain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-3"}},[t._v("#")]),t._v(" check_domain "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_domain",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether a domain is compliant with this solver type.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Solver.check_domain()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Solver._check_domain_additional()")]),t._v(' (which returns True by default but can be overridden  to define\nspecific checks in addition to the "domain requirements"). The boilerplate code automatically checks whether all\ndomain requirements are met.')]),t._v(" "),a("h4",{attrs:{id:"parameters-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-43"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-43"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"close-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-3"}},[t._v("#")]),t._v(" close "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"close",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Joins the parallel domains' processes.\nNot calling this method (or not using the 'with' context statement)\nresults in the solver forever waiting for the domain processes to exit.")]),t._v(" "),a("h3",{attrs:{id:"complete-with-default-hyperparameters-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complete-with-default-hyperparameters-3"}},[t._v("#")]),t._v(" complete_with_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"complete_with_default_hyperparameters",sig:{params:[{name:"kwargs",annotation:"Dict[str, Any]"},{name:"names",default:"None",annotation:"Optional[List[str]]"}]}}}),t._v(" "),a("p",[t._v("Add missing hyperparameters to kwargs by using default values")]),t._v(" "),a("p",[t._v("Args:\nkwargs: keyword arguments to complete (e.g. for "),a("code",[t._v("__init__")]),t._v(", "),a("code",[t._v("init_model")]),t._v(", or "),a("code",[t._v("solve")]),t._v(")\nnames: names of the hyperparameters to add if missing.\nBy default, all available hyperparameters.")]),t._v(" "),a("p",[t._v("Returns:\na new dictionary, completion of kwargs")]),t._v(" "),a("h3",{attrs:{id:"copy-and-update-hyperparameters-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-and-update-hyperparameters-3"}},[t._v("#")]),t._v(" copy_and_update_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"copy_and_update_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"**kwargs_by_name",annotation:"Dict[str, Any]"}],return:"List[Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Copy hyperparameters definition of this class and update them with specified kwargs.")]),t._v(" "),a("p",[t._v("This is useful to define hyperparameters for a child class\nfor which only choices of the hyperparameter change for instance.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of hyperparameters to copy. Default to all.\n**kwargs_by_name: for each hyperparameter specified by its name,\nthe attributes to update. If a given hyperparameter name is not specified,\nthe hyperparameter is copied without further update.")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("h3",{attrs:{id:"get-action-prefix-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-prefix-3"}},[t._v("#")]),t._v(" get_action_prefix "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_prefix",sig:{params:[{name:"self"}],return:"List[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the list of actions returned by the solver so far after each\ncall to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method (mostly internal use in order\nto rebuild the sequence of visited states until reaching the current\nsolving state, when using "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(" for which we can\nonly progress the transition function with steps that hide the current\nstate of the domain)")]),t._v(" "),a("h4",{attrs:{id:"returns-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-44"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("List[D.T_agent[D.T_observation]]: List of actions executed by the solver\nso far after each call to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method")]),t._v(" "),a("h3",{attrs:{id:"get-default-hyperparameters-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-default-hyperparameters-3"}},[t._v("#")]),t._v(" get_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_default_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Get hyperparameters default values.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.")]),t._v(" "),a("p",[t._v("Returns:\na mapping between hyperparameter's name_in_kwargs and its default value (None if not specified)")]),t._v(" "),a("h3",{attrs:{id:"get-domain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-3"}},[t._v("#")]),t._v(" get_domain "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Returns the domain, optionally creating a parallel domain if not already created.")]),t._v(" "),a("h3",{attrs:{id:"get-domain-requirements-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-requirements-3"}},[t._v("#")]),t._v(" get_domain_requirements "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain_requirements",sig:{params:[],return:"List[type]"}}}),t._v(" "),a("p",[t._v("Get domain requirements for this solver class to be applicable.")]),t._v(" "),a("p",[t._v("Domain requirements are classes from the "),a("code",[t._v("skdecide.builders.domain")]),t._v(" package that the domain needs to inherit from.")]),t._v(" "),a("h4",{attrs:{id:"returns-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-45"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A list of classes to inherit from.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameter-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameter-3"}},[t._v("#")]),t._v(" get_hyperparameter "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameter",sig:{params:[{name:"name",annotation:"str"}],return:"Hyperparameter"}}}),t._v(" "),a("p",[t._v("Get hyperparameter from given name.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-by-name-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-by-name-3"}},[t._v("#")]),t._v(" get_hyperparameters_by_name "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_by_name",sig:{params:[],return:"Dict[str, Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Mapping from name to corresponding hyperparameter.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-names-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-names-3"}},[t._v("#")]),t._v(" get_hyperparameters_names "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_names",sig:{params:[],return:"List[str]"}}}),t._v(" "),a("p",[t._v("List of hyperparameters names.")]),t._v(" "),a("h3",{attrs:{id:"get-nb-explored-states-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-explored-states-3"}},[t._v("#")]),t._v(" get_nb_explored_states "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_explored_states",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of states present in the search graph (which can be\nlower than the number of actually explored states if node garbage was\nset to True in the MCTS instance's constructor)")]),t._v(" "),a("h4",{attrs:{id:"returns-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-46"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Number of states present in the search graph")]),t._v(" "),a("h3",{attrs:{id:"get-nb-rollouts-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-rollouts-3"}},[t._v("#")]),t._v(" get_nb_rollouts "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_rollouts",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of rollouts since the beginning of the search from\nthe root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-47"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("int: Number of MCTS rollouts\n")])])]),a("h3",{attrs:{id:"get-next-action-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-5"}},[t._v("#")]),t._v(" get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the next deterministic action (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-44"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which next action is requested.")])]),t._v(" "),a("h4",{attrs:{id:"returns-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-48"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The next deterministic action.")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-5"}},[t._v("#")]),t._v(" get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-45"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-49"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-policy-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-policy-3"}},[t._v("#")]),t._v(" get_policy "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_policy",sig:{params:[{name:"self"}],return:"Dict[D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float]]"}}}),t._v(" "),a("p",[t._v("Get the (partial) solution policy defined for the states for which\nthe best value according to the execution action selector has been updated\nat least once (which is optimal if the algorithm has converged and labels are used)")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Only defined over the states reachable from the last root solving state\nwhen node garbage was set to True in the MCTS instance's constructor")])]),t._v(" "),a("h4",{attrs:{id:"returns-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-50"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("Dict[ D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float], ]:\nMapping from states to pairs of action and best value according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-residual-moving-average-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-residual-moving-average-3"}},[t._v("#")]),t._v(" get_residual_moving_average "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_residual_moving_average",sig:{params:[{name:"self"}],return:"float"}}}),t._v(" "),a("p",[t._v("Get the average Bellman error (residual) at the root state of the search,\nor an infinite value if the number of computed residuals is lower than\nthe epsilon moving average window set in the MCTS instance's constructor")]),t._v(" "),a("h4",{attrs:{id:"returns-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-51"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("float: Bellman error at the root state of the search averaged over\nthe epsilon moving average window")]),t._v(" "),a("h3",{attrs:{id:"get-solving-time-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-solving-time-3"}},[t._v("#")]),t._v(" get_solving_time "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_solving_time",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the solving time in milliseconds since the beginning of the\nsearch from the root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-52"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Solving time in milliseconds")]),t._v(" "),a("h3",{attrs:{id:"get-utility-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-5"}},[t._v("#")]),t._v(" get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the estimated on-policy utility of the given observation.")]),t._v(" "),a("p",[t._v("In mathematical terms, for a fully observable domain, this function estimates:\n")]),a("p",[a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG",display:"true"}},[a("svg",{staticStyle:{"vertical-align":"-1.605ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"23.742ex",height:"3.301ex",viewBox:"0 -750 10493.9 1459.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"56",d:"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(856.2, 413) scale(0.707)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1309.3, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1698.3, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2167.3, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2834, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"munder",transform:"translate(3612, 0)"}},[a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(325.9, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"45",d:"M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"}})])]),a("g",{attrs:{"data-mml-node":"mrow",transform:"translate(0, -600) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(517, 0)"}},[a("path",{attrs:{"data-c":"223C",d:"M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1295, 0)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4930.8, 0)"}},[a("path",{attrs:{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(5208.8, 0)"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5967.8, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(6356.8, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6873.8, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7262.8, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(7540.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8691.1, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(9746.9, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(10215.9, 0)"}},[a("path",{attrs:{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z"}})])])])])])],1),t._v("\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.29ex",height:"1ex",viewBox:"0 -431 570 442"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])])])]),t._v(" is the current policy, any "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"20.791ex",height:"2.262ex",viewBox:"0 -750 9189.4 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(794.8, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1850.6, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(2239.6, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3112.1, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(3556.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4489.3, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(4934, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5806.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(6251.2, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7183.8, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7628.4, 0)"}},[a("path",{attrs:{"data-c":"22EF",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8800.4, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" represents a trajectory sampled from\nthe policy, "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"4.647ex",height:"2.262ex",viewBox:"0 -750 2054 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(759, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1148, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1665, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" is the return (cumulative reward) and "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.375ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.974ex",height:"1.375ex",viewBox:"0 -442 872.6 607.6"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msub"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])])])])])]),t._v(" the initial state for the trajectories."),a("p"),t._v(" "),a("h4",{attrs:{id:"parameters-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-46"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-53"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The estimated on-policy utility of the given observation.")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-5"}},[t._v("#")]),t._v(" is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-47"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-54"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-5"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Reset whatever is needed on this solver before running a new episode.")]),t._v(" "),a("p",[t._v("This function does nothing by default but can be overridden if needed (e.g. to reset the hidden state of a LSTM\npolicy network, which carries information about past observations seen in the previous episode).")]),t._v(" "),a("h3",{attrs:{id:"sample-action-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-5"}},[t._v("#")]),t._v(" sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-48"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-55"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-55"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-5"}},[t._v("#")]),t._v(" solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-49"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-5"}},[t._v("#")]),t._v(" solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process from a given state.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve_from(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-50"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameter-with-optuna-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameter-with-optuna-3"}},[t._v("#")]),t._v(" suggest_hyperparameter_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameter_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"name",annotation:"str"},{name:"prefix",default:"",annotation:"str"},{name:"**kwargs"}],return:"Any"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameter value during an Optuna trial.")]),t._v(" "),a("p",[t._v("This can be used during Optuna hyperparameters tuning.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nname: name of the hyperparameter to choose\nprefix: prefix to add to optuna corresponding parameter name\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)\n**kwargs: options for optuna hyperparameter suggestions")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("p",[t._v("kwargs can be used to pass relevant arguments to")]),t._v(" "),a("ul",[a("li",[t._v("trial.suggest_float()")]),t._v(" "),a("li",[t._v("trial.suggest_int()")]),t._v(" "),a("li",[t._v("trial.suggest_categorical()")])]),t._v(" "),a("p",[t._v("For instance it can")]),t._v(" "),a("ul",[a("li",[t._v("add a low/high value if not existing for the hyperparameter\nor override it to narrow the search. (for float or int hyperparameters)")]),t._v(" "),a("li",[t._v("add a step or log argument (for float or int hyperparameters,\nsee optuna.trial.Trial.suggest_float())")]),t._v(" "),a("li",[t._v("override choices for categorical or enum parameters to narrow the search")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameters-with-optuna-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameters-with-optuna-3"}},[t._v("#")]),t._v(" suggest_hyperparameters_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameters_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"kwargs_by_name",default:"None",annotation:"Optional[Dict[str, Dict[str, Any]]]"},{name:"fixed_hyperparameters",default:"None",annotation:"Optional[Dict[str, Any]]"},{name:"prefix",default:"",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameters values during an Optuna trial.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.\nIf "),a("code",[t._v("fixed_hyperparameters")]),t._v(" is provided, the corresponding names are removed from "),a("code",[t._v("names")]),t._v(".\nkwargs_by_name: options for optuna hyperparameter suggestions, by hyperparameter name\nfixed_hyperparameters: values of fixed hyperparameters, useful for suggesting subbrick hyperparameters,\nif the subbrick class is not suggested by this method, but already fixed.\nWill be added to the suggested hyperparameters.\nprefix: prefix to add to optuna corresponding parameters\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)")]),t._v(" "),a("p",[t._v("Returns:\nmapping between the hyperparameter name and its suggested value.\nIf the hyperparameter has an attribute "),a("code",[t._v("name_in_kwargs")]),t._v(", this is used as the key in the mapping\ninstead of the actual hyperparameter name.\nthe mapping is updated with "),a("code",[t._v("fixed_hyperparameters")]),t._v(".")]),t._v(" "),a("p",[t._v("kwargs_by_name[some_name] will be passed as **kwargs to suggest_hyperparameter_with_optuna(name=some_name)")]),t._v(" "),a("h3",{attrs:{id:"check-domain-additional-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-additional-3"}},[t._v("#")]),t._v(" _check_domain_additional "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_domain_additional",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v('Check whether the given domain is compliant with the specific requirements of this solver type (i.e. the\nones in addition to "domain requirements").')]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Solver.check_domain()")]),t._v(". It focuses on specific checks, as\nopposed to taking also into account the domain requirements for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-51"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-56"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-56"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the specific requirements of this solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-6"}},[t._v("#")]),t._v(" _get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the best action to execute in a given state according to the execution action selector.\nThe search subgraph which is no more reachable after executing the returned action is\nalso deleted if node garbage was set to True in the MCTS instance's constructor.\nThe solver is run from "),a("code",[t._v("observation")]),t._v(" if "),a("code",[t._v("continuous_planning")]),t._v(" was set to True\nin the MCTS instance's constructor or if no solution is defined (i.e. has been\npreviously computed) in "),a("code",[t._v("observation")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns a random action if no action is defined in the given state,\nwhich is why it is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-52"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which the best action is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-57"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-57"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_agent[D.T_concurrency[D.T_event]]: Best action to execute according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-6"}},[t._v("#")]),t._v(" _get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-53"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-58"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-58"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-utility-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-6"}},[t._v("#")]),t._v(" _get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the best value in a given state according to the execution action selector")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns None if no action is defined in the given state, which is why\nit is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-54"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State from which the best value is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-59"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-59"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_value: Value of the action returned by the execution action selector")]),t._v(" "),a("h3",{attrs:{id:"initialize-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-3"}},[t._v("#")]),t._v(" _initialize "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_initialize",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Launches the parallel domains.\nThis method requires to have previously recorded the self._domain_factory,\nthe set of lambda functions passed to the solver's constructor (e.g. heuristic lambda for heuristic-based solvers),\nand whether the parallel domain jobs should notify their status via the IPC protocol (required when interacting with\nother programming languages like C++)")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-6"}},[t._v("#")]),t._v(" _is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-55"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-55"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-60"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-60"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-solution-defined-for-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-solution-defined-for-3"}},[t._v("#")]),t._v(" _is_solution_defined_for "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_solution_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicates whether the solution policy is defined for a given state")]),t._v(" "),a("h4",{attrs:{id:"parameters-56"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-56"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which an entry is searched\nin the policy graph")])]),t._v(" "),a("h4",{attrs:{id:"returns-61"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-61"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("bool: True if the state has been explored and an action can be obtained\nfrom the execution action selector, False otherwise")]),t._v(" "),a("h3",{attrs:{id:"reset-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-6"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Clears the search graph.")]),t._v(" "),a("h3",{attrs:{id:"sample-action-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-6"}},[t._v("#")]),t._v(" _sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-57"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-57"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-62"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-62"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-6"}},[t._v("#")]),t._v(" _solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("h4",{attrs:{id:"parameters-58"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-58"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-6"}},[t._v("#")]),t._v(" _solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the MCTS algorithm from a given root solving state")]),t._v(" "),a("h4",{attrs:{id:"parameters-59"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-59"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(" (D.T_memory[D.T_state]): Root state of the search grph from which\nMCTS rollouts are launched")])]),t._v(" "),a("h2",{attrs:{id:"huct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#huct"}},[t._v("#")]),t._v(" HUCT")]),t._v(" "),a("p",[t._v("UCT solver to use with the multi-agent hierarchical "),a("code",[t._v("MAHD")]),t._v(" solver\nas the multi-agent compound solver")]),t._v(" "),a("h3",{attrs:{id:"constructor-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-4"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"HUCT",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"HUCT",sig:{params:[{name:"domain_factory",annotation:"Callable[[], MCTS.T_domain]"},{name:"time_budget",default:"3600000",annotation:"int"},{name:"rollout_budget",default:"100000",annotation:"int"},{name:"max_depth",default:"1000",annotation:"int"},{name:"residual_moving_average_window",default:"100",annotation:"int"},{name:"epsilon",default:"0.0",annotation:"float"},{name:"discount",default:"1.0",annotation:"float"},{name:"ucb_constant",default:"0.7071067811865475",annotation:"float"},{name:"online_node_garbage",default:"False",annotation:"float"},{name:"heuristic",default:"None",annotation:"Callable[[MCTS.T_domain, D.T_state], Tuple[D.T_agent[Value[D.T_value]], D.T_agent[D.T_concurrency[D.T_event]]]]"},{name:"heuristic_confidence",default:"1000",annotation:"int"},{name:"action_choice_noise",default:"0.1",annotation:"float"},{name:"transition_mode",default:"TransitionMode.DISTRIBUTION",annotation:"MCTS.TransitionMode"},{name:"continuous_planning",default:"True",annotation:"bool"},{name:"parallel",default:"False",annotation:"bool"},{name:"shared_memory_proxy",default:"None"},{name:"callback",default:"<lambda function>",annotation:"Callable[[HUCT, Optional[int]], bool]"},{name:"verbose",default:"False",annotation:"bool"}],return:"None"}}}),t._v(" "),a("p",[t._v("Construct a HUCT solver instance")]),t._v(" "),a("h4",{attrs:{id:"parameters-60"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-60"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_factory")]),t._v(" (Callable[[], MCTS.T_domain]): The lambda function to create a domain instance.")]),t._v(" "),a("li",[a("strong",[t._v("time_budget")]),t._v(" (int, optional): Maximum solving time in milliseconds. Defaults to 3600000.")]),t._v(" "),a("li",[a("strong",[t._v("rollout_budget")]),t._v(" (int, optional): Maximum number of rollouts. Defaults to 100000.")]),t._v(" "),a("li",[a("strong",[t._v("max_depth")]),t._v(" (int, optional): Maximum depth of each UCT rollout. Defaults to 1000.")]),t._v(" "),a("li",[a("strong",[t._v("residual_moving_average_window")]),t._v(" (int, optional): Number of latest computed residual values\nto memorize in order to compute the average Bellman error (residual) at the root state\nof the search. Defaults to 100.")]),t._v(" "),a("li",[a("strong",[t._v("epsilon")]),t._v(" (float, optional): Maximum Bellman error (residual) allowed to decide that a state\nis solved, or to decide when no labels are used that the value function of the root state\nof the search has converged (in the latter case: the root state's Bellman error is averaged\nover the residual_moving_average_window). Defaults to 0.0.")]),t._v(" "),a("li",[a("strong",[t._v("discount")]),t._v(" (float, optional): Value function's discount factor. Defaults to 1.0.")]),t._v(" "),a("li",[a("strong",[t._v("ucb_constant")]),t._v(" (float, optional): UCB constant as used in the UCT algorithm when the action selector\n(for optimization or execution) is "),a("code",[t._v("MCTS.ActionSelector.UCB1")]),t._v(". Defaults to 1.0/sqrt(2.0).\nonline_node_garbage (bool, optional): Boolean indicating whether the search graph which is\nno more reachable from the root solving state should be deleted (True) or not (False). Defaults to False.\nheuristic (Callable[ [MCTS.T_domain, D.T_state], Tuple[ D.T_agent[Value[D.T_value]], D.T_agent[D.T_concurrency[D.T_event]] ], ], optional):\nMulti-agent compound heuristic as returned by the "),a("code",[t._v("MAHD")]),t._v(" algorithm from independent\nagent heuristic contributions. Defaults to None (no heuristic in use).\nheuristic_confidence (int, optional): Fake state node visits set on non-expanded state nodes for which the\nmulti-agent compound heuristic is computed by "),a("code",[t._v("MAHD")]),t._v(". Defaults to 1000.\naction_choice_noise (float, optional): Probability used to sample random actions instead of executing the\ncompound heuristic actions returned by the "),a("code",[t._v("MAHD")]),t._v(" algorithm. Defaults to 0.1.\ntransition_mode (MCTS.TransitionMode, optional): Transition mode enum (one of "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(",\n"),a("code",[t._v("MCTS.TransitionMode.SAMPLE")]),t._v(" or "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(" to progress the\ntrajectories with, respectively, the 'step' or 'sample' or 'get_next_state_distribution' method of the domain\ndepending on the domain's dynamics capabilities). Defaults to "),a("code",[t._v("MCTS.TransitionMode.DISTRIBUTION")]),t._v(".\ncontinuous_planning (bool, optional): Boolean whether the solver should optimize again the policy\nfrom the current solving state (True) or not (False) even if the policy is already defined\nin this state. Defaults to True.\nparallel (bool, optional): Parallelize MCTS rollouts on different processes using duplicated domains (True)\nor not (False). Defaults to False.\nshared_memory_proxy ("),a("em",[t._v("type")]),t._v(", optional): The optional shared memory proxy. Defaults to None.\ncallback (Callable[[HUCT, Optional[int]], optional): Function called at the end of each RIW rollout,\ntaking as arguments the solver and the thread/process ID (i.e. parallel domain ID, which is equal to None\nin case of sequential execution, i.e. when 'parallel' is set to False in this constructor) from\nwhich the callback is called, and returning True if the solver must be stopped. The callback lambda\nfunction cannot take the (potentially parallelized) domain as argument because we could not otherwise\nserialize (i.e. pickle) the solver to pass it to the corresponding parallel domain process in case of parallel\nexecution. Nevertheless, the "),a("code",[t._v("ParallelSolver.get_domain")]),t._v(" method callable on the solver instance\ncan be used to retrieve either the user domain in sequential execution, or the parallel domains proxy\n"),a("code",[t._v("ParallelDomain")]),t._v(" in parallel execution from which domain methods can be called by using the\ncallback's process ID argument. Defaults to (lambda slv, i=None: False).\nverbose (bool, optional): Boolean indicating whether verbose messages should be logged (True)\nor not (False). Defaults to False.")])]),t._v(" "),a("h3",{attrs:{id:"autocast-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocast-4"}},[t._v("#")]),t._v(" autocast "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"autocast",sig:{params:[{name:"self"},{name:"domain_cls",default:"None",annotation:"Optional[Type[Domain]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Autocast itself to the level corresponding to the given domain class.")]),t._v(" "),a("h4",{attrs:{id:"parameters-61"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-61"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain_cls")]),t._v(": the domain class to which level the solver needs to autocast itself.\nBy default, use the original domain factory passed to its constructor.")])]),t._v(" "),a("h3",{attrs:{id:"call-domain-method-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-domain-method-4"}},[t._v("#")]),t._v(" call_domain_method "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"call_domain_method",sig:{params:[{name:"self"},{name:"name"},{name:"*args"}]}}}),t._v(" "),a("p",[t._v("Calls a parallel domain's method.\nThis is the only way to get a domain method for a parallel domain.")]),t._v(" "),a("h3",{attrs:{id:"check-domain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-4"}},[t._v("#")]),t._v(" check_domain "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_domain",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether a domain is compliant with this solver type.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Solver.check_domain()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Solver._check_domain_additional()")]),t._v(' (which returns True by default but can be overridden  to define\nspecific checks in addition to the "domain requirements"). The boilerplate code automatically checks whether all\ndomain requirements are met.')]),t._v(" "),a("h4",{attrs:{id:"parameters-62"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-62"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-63"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-63"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"close-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#close-4"}},[t._v("#")]),t._v(" close "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"close",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Joins the parallel domains' processes.\nNot calling this method (or not using the 'with' context statement)\nresults in the solver forever waiting for the domain processes to exit.")]),t._v(" "),a("h3",{attrs:{id:"complete-with-default-hyperparameters-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complete-with-default-hyperparameters-4"}},[t._v("#")]),t._v(" complete_with_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"complete_with_default_hyperparameters",sig:{params:[{name:"kwargs",annotation:"Dict[str, Any]"},{name:"names",default:"None",annotation:"Optional[List[str]]"}]}}}),t._v(" "),a("p",[t._v("Add missing hyperparameters to kwargs by using default values")]),t._v(" "),a("p",[t._v("Args:\nkwargs: keyword arguments to complete (e.g. for "),a("code",[t._v("__init__")]),t._v(", "),a("code",[t._v("init_model")]),t._v(", or "),a("code",[t._v("solve")]),t._v(")\nnames: names of the hyperparameters to add if missing.\nBy default, all available hyperparameters.")]),t._v(" "),a("p",[t._v("Returns:\na new dictionary, completion of kwargs")]),t._v(" "),a("h3",{attrs:{id:"copy-and-update-hyperparameters-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-and-update-hyperparameters-4"}},[t._v("#")]),t._v(" copy_and_update_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"copy_and_update_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"**kwargs_by_name",annotation:"Dict[str, Any]"}],return:"List[Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Copy hyperparameters definition of this class and update them with specified kwargs.")]),t._v(" "),a("p",[t._v("This is useful to define hyperparameters for a child class\nfor which only choices of the hyperparameter change for instance.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of hyperparameters to copy. Default to all.\n**kwargs_by_name: for each hyperparameter specified by its name,\nthe attributes to update. If a given hyperparameter name is not specified,\nthe hyperparameter is copied without further update.")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("h3",{attrs:{id:"get-action-prefix-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-prefix-4"}},[t._v("#")]),t._v(" get_action_prefix "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_prefix",sig:{params:[{name:"self"}],return:"List[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the list of actions returned by the solver so far after each\ncall to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method (mostly internal use in order\nto rebuild the sequence of visited states until reaching the current\nsolving state, when using "),a("code",[t._v("MCTS.TransitionMode.STEP")]),t._v(" for which we can\nonly progress the transition function with steps that hide the current\nstate of the domain)")]),t._v(" "),a("h4",{attrs:{id:"returns-64"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-64"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("List[D.T_agent[D.T_observation]]: List of actions executed by the solver\nso far after each call to the "),a("code",[t._v("MCTS.get_next_action")]),t._v(" method")]),t._v(" "),a("h3",{attrs:{id:"get-default-hyperparameters-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-default-hyperparameters-4"}},[t._v("#")]),t._v(" get_default_hyperparameters "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_default_hyperparameters",sig:{params:[{name:"names",default:"None",annotation:"Optional[List[str]]"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Get hyperparameters default values.")]),t._v(" "),a("p",[t._v("Args:\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.")]),t._v(" "),a("p",[t._v("Returns:\na mapping between hyperparameter's name_in_kwargs and its default value (None if not specified)")]),t._v(" "),a("h3",{attrs:{id:"get-domain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-4"}},[t._v("#")]),t._v(" get_domain "),a("Badge",{attrs:{text:"ParallelSolver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Returns the domain, optionally creating a parallel domain if not already created.")]),t._v(" "),a("h3",{attrs:{id:"get-domain-requirements-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-domain-requirements-4"}},[t._v("#")]),t._v(" get_domain_requirements "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_domain_requirements",sig:{params:[],return:"List[type]"}}}),t._v(" "),a("p",[t._v("Get domain requirements for this solver class to be applicable.")]),t._v(" "),a("p",[t._v("Domain requirements are classes from the "),a("code",[t._v("skdecide.builders.domain")]),t._v(" package that the domain needs to inherit from.")]),t._v(" "),a("h4",{attrs:{id:"returns-65"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-65"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A list of classes to inherit from.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameter-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameter-4"}},[t._v("#")]),t._v(" get_hyperparameter "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameter",sig:{params:[{name:"name",annotation:"str"}],return:"Hyperparameter"}}}),t._v(" "),a("p",[t._v("Get hyperparameter from given name.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-by-name-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-by-name-4"}},[t._v("#")]),t._v(" get_hyperparameters_by_name "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_by_name",sig:{params:[],return:"Dict[str, Hyperparameter]"}}}),t._v(" "),a("p",[t._v("Mapping from name to corresponding hyperparameter.")]),t._v(" "),a("h3",{attrs:{id:"get-hyperparameters-names-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-hyperparameters-names-4"}},[t._v("#")]),t._v(" get_hyperparameters_names "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_hyperparameters_names",sig:{params:[],return:"List[str]"}}}),t._v(" "),a("p",[t._v("List of hyperparameters names.")]),t._v(" "),a("h3",{attrs:{id:"get-nb-explored-states-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-explored-states-4"}},[t._v("#")]),t._v(" get_nb_explored_states "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_explored_states",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of states present in the search graph (which can be\nlower than the number of actually explored states if node garbage was\nset to True in the MCTS instance's constructor)")]),t._v(" "),a("h4",{attrs:{id:"returns-66"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-66"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Number of states present in the search graph")]),t._v(" "),a("h3",{attrs:{id:"get-nb-rollouts-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-nb-rollouts-4"}},[t._v("#")]),t._v(" get_nb_rollouts "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_nb_rollouts",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the number of rollouts since the beginning of the search from\nthe root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-67"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-67"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("int: Number of MCTS rollouts\n")])])]),a("h3",{attrs:{id:"get-next-action-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-7"}},[t._v("#")]),t._v(" get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the next deterministic action (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-63"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-63"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which next action is requested.")])]),t._v(" "),a("h4",{attrs:{id:"returns-68"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-68"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The next deterministic action.")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-7"}},[t._v("#")]),t._v(" get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-64"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-64"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-69"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-69"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-policy-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-policy-4"}},[t._v("#")]),t._v(" get_policy "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_policy",sig:{params:[{name:"self"}],return:"Dict[D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float]]"}}}),t._v(" "),a("p",[t._v("Get the (partial) solution policy defined for the states for which\nthe best value according to the execution action selector has been updated\nat least once (which is optimal if the algorithm has converged and labels are used)")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Only defined over the states reachable from the last root solving state\nwhen node garbage was set to True in the MCTS instance's constructor")])]),t._v(" "),a("h4",{attrs:{id:"returns-70"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-70"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("Dict[ D.T_agent[D.T_observation], Tuple[D.T_agent[D.T_concurrency[D.T_event]], float], ]:\nMapping from states to pairs of action and best value according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-residual-moving-average-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-residual-moving-average-4"}},[t._v("#")]),t._v(" get_residual_moving_average "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_residual_moving_average",sig:{params:[{name:"self"}],return:"float"}}}),t._v(" "),a("p",[t._v("Get the average Bellman error (residual) at the root state of the search,\nor an infinite value if the number of computed residuals is lower than\nthe epsilon moving average window set in the MCTS instance's constructor")]),t._v(" "),a("h4",{attrs:{id:"returns-71"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-71"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("float: Bellman error at the root state of the search averaged over\nthe epsilon moving average window")]),t._v(" "),a("h3",{attrs:{id:"get-solving-time-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-solving-time-4"}},[t._v("#")]),t._v(" get_solving_time "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_solving_time",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the solving time in milliseconds since the beginning of the\nsearch from the root solving state")]),t._v(" "),a("h4",{attrs:{id:"returns-72"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-72"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("int: Solving time in milliseconds")]),t._v(" "),a("h3",{attrs:{id:"get-utility-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-7"}},[t._v("#")]),t._v(" get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the estimated on-policy utility of the given observation.")]),t._v(" "),a("p",[t._v("In mathematical terms, for a fully observable domain, this function estimates:\n")]),a("p",[a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG",display:"true"}},[a("svg",{staticStyle:{"vertical-align":"-1.605ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"23.742ex",height:"3.301ex",viewBox:"0 -750 10493.9 1459.2"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"56",d:"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(856.2, 413) scale(0.707)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1309.3, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1698.3, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2167.3, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2834, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"munder",transform:"translate(3612, 0)"}},[a("g",{attrs:{"data-mml-node":"TeXAtom",transform:"translate(325.9, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"45",d:"M12 666Q12 675 24 683H582Q590 680 593 672V588Q593 514 591 502T575 490Q567 490 563 495T555 517Q552 556 517 590Q486 623 445 634T340 648H282Q266 636 264 620T260 492V370H277Q329 375 358 391T404 439Q420 480 420 506Q420 529 436 529Q445 529 451 521Q455 517 455 361Q455 333 455 298T456 253Q456 217 453 207T437 197Q420 196 420 217Q420 240 406 270Q377 328 284 335H260V201Q261 174 261 134Q262 73 264 61T278 38Q281 36 282 35H331Q400 35 449 50Q571 93 602 179Q605 203 622 203Q629 203 634 197T640 183Q638 181 624 95T604 3L600 -1H24Q12 5 12 16Q12 35 51 35Q92 38 97 52Q102 60 102 341T97 632Q91 645 51 648Q12 648 12 666ZM137 341Q137 131 136 89T130 37Q129 36 129 35H235Q233 41 231 48L226 61V623L231 635L235 648H129Q132 641 133 638T135 603T137 517T137 341ZM557 603V648H504Q504 646 515 639Q527 634 542 619L557 603ZM420 317V397L406 383Q394 370 380 363L366 355Q373 350 382 346Q400 333 409 328L420 317ZM582 61L586 88Q585 88 582 83Q557 61 526 46L511 37L542 35H577Q577 36 578 39T580 49T582 61Z"}})])]),a("g",{attrs:{"data-mml-node":"mrow",transform:"translate(0, -600) scale(0.707)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(517, 0)"}},[a("path",{attrs:{"data-c":"223C",d:"M55 166Q55 241 101 304T222 367Q260 367 296 349T362 304T421 252T484 208T554 189Q616 189 655 236T694 338Q694 350 698 358T708 367Q722 367 722 334Q722 260 677 197T562 134H554Q517 134 481 152T414 196T355 248T292 293T223 311Q179 311 145 286Q109 257 96 218T80 156T69 133Q55 133 55 166Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1295, 0)"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4930.8, 0)"}},[a("path",{attrs:{"data-c":"5B",d:"M118 -250V750H255V710H158V-210H255V-250H118Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(5208.8, 0)"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5967.8, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(6356.8, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(6873.8, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7262.8, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(7540.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8691.1, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(9746.9, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(10215.9, 0)"}},[a("path",{attrs:{"data-c":"5D",d:"M22 710V750H159V-250H22V-210H119V710H22Z"}})])])])])])],1),t._v("\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.025ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.29ex",height:"1ex",viewBox:"0 -431 570 442"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C0",d:"M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"}})])])])])]),t._v(" is the current policy, any "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"20.791ex",height:"2.262ex",viewBox:"0 -750 9189.4 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(794.8, 0)"}},[a("path",{attrs:{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1850.6, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(2239.6, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3112.1, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(3556.8, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(4489.3, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(4934, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(5806.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"msub",transform:"translate(6251.2, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(529, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7183.8, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(7628.4, 0)"}},[a("path",{attrs:{"data-c":"22EF",d:"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(8800.4, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" represents a trajectory sampled from\nthe policy, "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"4.647ex",height:"2.262ex",viewBox:"0 -750 2054 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"52",d:"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(759, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1148, 0)"}},[a("path",{attrs:{"data-c":"3C4",d:"M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1665, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(" is the return (cumulative reward) and "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.375ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.974ex",height:"1.375ex",viewBox:"0 -442 872.6 607.6"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msub"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mn",transform:"translate(469, -150) scale(0.707)"}},[a("path",{attrs:{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"}})])])])])])]),t._v(" the initial state for the trajectories."),a("p"),t._v(" "),a("h4",{attrs:{id:"parameters-65"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-65"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-73"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-73"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The estimated on-policy utility of the given observation.")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-7"}},[t._v("#")]),t._v(" is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-66"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-66"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-74"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-74"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-7"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Reset whatever is needed on this solver before running a new episode.")]),t._v(" "),a("p",[t._v("This function does nothing by default but can be overridden if needed (e.g. to reset the hidden state of a LSTM\npolicy network, which carries information about past observations seen in the previous episode).")]),t._v(" "),a("h3",{attrs:{id:"sample-action-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-7"}},[t._v("#")]),t._v(" sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-67"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-67"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-75"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-75"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-7"}},[t._v("#")]),t._v(" solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-68"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-68"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-7"}},[t._v("#")]),t._v(" solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process from a given state.")]),t._v(" "),a("p",[t._v("After solving by calling self._solve_from(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),a("h4",{attrs:{id:"parameters-69"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-69"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameter-with-optuna-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameter-with-optuna-4"}},[t._v("#")]),t._v(" suggest_hyperparameter_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameter_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"name",annotation:"str"},{name:"prefix",default:"",annotation:"str"},{name:"**kwargs"}],return:"Any"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameter value during an Optuna trial.")]),t._v(" "),a("p",[t._v("This can be used during Optuna hyperparameters tuning.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nname: name of the hyperparameter to choose\nprefix: prefix to add to optuna corresponding parameter name\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)\n**kwargs: options for optuna hyperparameter suggestions")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("p",[t._v("kwargs can be used to pass relevant arguments to")]),t._v(" "),a("ul",[a("li",[t._v("trial.suggest_float()")]),t._v(" "),a("li",[t._v("trial.suggest_int()")]),t._v(" "),a("li",[t._v("trial.suggest_categorical()")])]),t._v(" "),a("p",[t._v("For instance it can")]),t._v(" "),a("ul",[a("li",[t._v("add a low/high value if not existing for the hyperparameter\nor override it to narrow the search. (for float or int hyperparameters)")]),t._v(" "),a("li",[t._v("add a step or log argument (for float or int hyperparameters,\nsee optuna.trial.Trial.suggest_float())")]),t._v(" "),a("li",[t._v("override choices for categorical or enum parameters to narrow the search")])]),t._v(" "),a("h3",{attrs:{id:"suggest-hyperparameters-with-optuna-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suggest-hyperparameters-with-optuna-4"}},[t._v("#")]),t._v(" suggest_hyperparameters_with_optuna "),a("Badge",{attrs:{text:"Hyperparametrizable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"suggest_hyperparameters_with_optuna",sig:{params:[{name:"trial",annotation:"optuna.trial.Trial"},{name:"names",default:"None",annotation:"Optional[List[str]]"},{name:"kwargs_by_name",default:"None",annotation:"Optional[Dict[str, Dict[str, Any]]]"},{name:"fixed_hyperparameters",default:"None",annotation:"Optional[Dict[str, Any]]"},{name:"prefix",default:"",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Suggest hyperparameters values during an Optuna trial.")]),t._v(" "),a("p",[t._v("Args:\ntrial: optuna trial during hyperparameters tuning\nnames: names of the hyperparameters to choose.\nBy default, all available hyperparameters will be suggested.\nIf "),a("code",[t._v("fixed_hyperparameters")]),t._v(" is provided, the corresponding names are removed from "),a("code",[t._v("names")]),t._v(".\nkwargs_by_name: options for optuna hyperparameter suggestions, by hyperparameter name\nfixed_hyperparameters: values of fixed hyperparameters, useful for suggesting subbrick hyperparameters,\nif the subbrick class is not suggested by this method, but already fixed.\nWill be added to the suggested hyperparameters.\nprefix: prefix to add to optuna corresponding parameters\n(useful for disambiguating hyperparameters from subsolvers in case of meta-solvers)")]),t._v(" "),a("p",[t._v("Returns:\nmapping between the hyperparameter name and its suggested value.\nIf the hyperparameter has an attribute "),a("code",[t._v("name_in_kwargs")]),t._v(", this is used as the key in the mapping\ninstead of the actual hyperparameter name.\nthe mapping is updated with "),a("code",[t._v("fixed_hyperparameters")]),t._v(".")]),t._v(" "),a("p",[t._v("kwargs_by_name[some_name] will be passed as **kwargs to suggest_hyperparameter_with_optuna(name=some_name)")]),t._v(" "),a("h3",{attrs:{id:"check-domain-additional-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-domain-additional-4"}},[t._v("#")]),t._v(" _check_domain_additional "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_domain_additional",sig:{params:[{name:"domain",annotation:"Domain"}],return:"bool"}}}),t._v(" "),a("p",[t._v('Check whether the given domain is compliant with the specific requirements of this solver type (i.e. the\nones in addition to "domain requirements").')]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Solver.check_domain()")]),t._v(". It focuses on specific checks, as\nopposed to taking also into account the domain requirements for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-70"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-70"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(": The domain to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-76"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-76"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the domain is compliant with the specific requirements of this solver type (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-8"}},[t._v("#")]),t._v(" _get_next_action "),a("Badge",{attrs:{text:"DeterministicPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the best action to execute in a given state according to the execution action selector.\nThe search subgraph which is no more reachable after executing the returned action is\nalso deleted if node garbage was set to True in the MCTS instance's constructor.\nThe solver is run from "),a("code",[t._v("observation")]),t._v(" if "),a("code",[t._v("continuous_planning")]),t._v(" was set to True\nin the MCTS instance's constructor or if no solution is defined (i.e. has been\npreviously computed) in "),a("code",[t._v("observation")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns a random action if no action is defined in the given state,\nwhich is why it is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-71"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-71"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which the best action is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-77"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-77"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_agent[D.T_concurrency[D.T_event]]: Best action to execute according to the\nexecution action selector")]),t._v(" "),a("h3",{attrs:{id:"get-next-action-distribution-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-action-distribution-8"}},[t._v("#")]),t._v(" _get_next_action_distribution "),a("Badge",{attrs:{text:"UncertainPolicies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_action_distribution",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Distribution[D.T_agent[D.T_concurrency[D.T_event]]]"}}}),t._v(" "),a("p",[t._v("Get the probabilistic distribution of next action for the given observation (from the solver's current\npolicy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-72"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-72"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-78"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-78"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probabilistic distribution of next action.")]),t._v(" "),a("h3",{attrs:{id:"get-utility-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-utility-8"}},[t._v("#")]),t._v(" _get_utility "),a("Badge",{attrs:{text:"Utilities",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_utility",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_value"}}}),t._v(" "),a("p",[t._v("Get the best value in a given state according to the execution action selector")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Returns None if no action is defined in the given state, which is why\nit is advised to call "),a("code",[t._v("MCTS.is_solution_defined_for")]),t._v(" before")])]),t._v(" "),a("h4",{attrs:{id:"parameters-73"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-73"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State from which the best value is requested")])]),t._v(" "),a("h4",{attrs:{id:"returns-79"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-79"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_value: Value of the action returned by the execution action selector")]),t._v(" "),a("h3",{attrs:{id:"initialize-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-4"}},[t._v("#")]),t._v(" _initialize "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_initialize",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Launches the parallel domains.\nThis method requires to have previously recorded the self._domain_factory,\nthe set of lambda functions passed to the solver's constructor (e.g. heuristic lambda for heuristic-based solvers),\nand whether the parallel domain jobs should notify their status via the IPC protocol (required when interacting with\nother programming languages like C++)")]),t._v(" "),a("h3",{attrs:{id:"is-policy-defined-for-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-policy-defined-for-8"}},[t._v("#")]),t._v(" _is_policy_defined_for "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_policy_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether the solver's current policy is defined for the given observation.")]),t._v(" "),a("h4",{attrs:{id:"parameters-74"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-74"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-80"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-80"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the policy is defined for the given observation memory (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-solution-defined-for-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-solution-defined-for-4"}},[t._v("#")]),t._v(" _is_solution_defined_for "),a("Badge",{attrs:{text:"MCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_solution_defined_for",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicates whether the solution policy is defined for a given state")]),t._v(" "),a("h4",{attrs:{id:"parameters-75"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-75"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): State for which an entry is searched\nin the policy graph")])]),t._v(" "),a("h4",{attrs:{id:"returns-81"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-81"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("bool: True if the state has been explored and an action can be obtained\nfrom the execution action selector, False otherwise")]),t._v(" "),a("h3",{attrs:{id:"policy-heuristic-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#policy-heuristic-2"}},[t._v("#")]),t._v(" _policy_heuristic "),a("Badge",{attrs:{text:"HMCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_policy_heuristic",sig:{params:[{name:"self"},{name:"domain",annotation:"MCTS.T_domain"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Reconstitutes the MCTS custom rollout executed starting in non-expanded\nstate nodes from the multi-agent compound heuristic computed by the\n"),a("code",[t._v("MAHD")]),t._v(" algorithm")]),t._v(" "),a("h4",{attrs:{id:"parameters-76"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-76"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(" (MCTS.T_domain): The domain instance")]),t._v(" "),a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): The non-expanded state node from which\nthe custom rollout policy must be run")])]),t._v(" "),a("h4",{attrs:{id:"returns-82"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-82"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("D.T_agent[D.T_concurrency[D.T_event]]: Rollout action to execute in the given state")]),t._v(" "),a("h3",{attrs:{id:"reset-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-8"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Solver",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),a("p",[t._v("Clears the search graph and the heuristic records.")]),t._v(" "),a("h3",{attrs:{id:"sample-action-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-action-8"}},[t._v("#")]),t._v(" _sample_action "),a("Badge",{attrs:{text:"Policies",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_action",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_concurrency[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Sample an action for the given observation (from the solver's current policy).")]),t._v(" "),a("h4",{attrs:{id:"parameters-77"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-77"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation for which an action must be sampled.")])]),t._v(" "),a("h4",{attrs:{id:"returns-83"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-83"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled action.")]),t._v(" "),a("h3",{attrs:{id:"solve-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-8"}},[t._v("#")]),t._v(" _solve "),a("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the solving process.")]),t._v(" "),a("h4",{attrs:{id:"parameters-78"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-78"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),a("code",[t._v("policy")]),t._v(" and "),a("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"solve-from-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-8"}},[t._v("#")]),t._v(" _solve_from "),a("Badge",{attrs:{text:"FromAnyState",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Run the MCTS algorithm from a given root solving state")]),t._v(" "),a("h4",{attrs:{id:"parameters-79"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-79"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(" (D.T_memory[D.T_state]): Root state of the search grph from which\nMCTS rollouts are launched")])]),t._v(" "),a("h3",{attrs:{id:"value-heuristic-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#value-heuristic-2"}},[t._v("#")]),t._v(" _value_heuristic "),a("Badge",{attrs:{text:"HMCTS",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_value_heuristic",sig:{params:[{name:"self"},{name:"domain",annotation:"MCTS.T_domain"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"Tuple[D.T_agent[Value[D.T_value]], int]"}}}),t._v(" "),a("p",[t._v("Reconstitutes the MCTS heuristic used to initialize the value of non-expanded\nstate nodes from the multi-agent compound heuristic computed by the\n"),a("code",[t._v("MAHD")]),t._v(" algorithm")]),t._v(" "),a("h4",{attrs:{id:"parameters-80"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-80"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("domain")]),t._v(" (MCTS.T_domain): The domain instance")]),t._v(" "),a("li",[a("strong",[t._v("observation")]),t._v(" (D.T_agent[D.T_observation]): The non-expanded state node from which\nthe heuristic must be computed")])]),t._v(" "),a("h4",{attrs:{id:"returns-84"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-84"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("Tuple[D.T_agent[Value[D.T_value]], int]: MCTS heuristic value at the given state")])],1)}),[],!1,null,null,null);e.default=s.exports}}]);