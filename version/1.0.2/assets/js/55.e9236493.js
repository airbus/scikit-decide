(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{569:function(t,e,s){"use strict";s.r(e);var a=s(38),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"builders-solver-fromanystatesolvability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#builders-solver-fromanystatesolvability"}},[t._v("#")]),t._v(" builders.solver.fromanystatesolvability")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),s("skdecide-summary")],1),t._v(" "),s("h2",{attrs:{id:"frominitialstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#frominitialstate"}},[t._v("#")]),t._v(" FromInitialState")]),t._v(" "),s("p",[t._v('"A solver must inherit this class if it can solve only from the initial state')]),t._v(" "),s("h3",{attrs:{id:"solve"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solve"}},[t._v("#")]),t._v(" solve "),s("Badge",{attrs:{text:"FromInitialState",type:"tip"}})],1),t._v(" "),s("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),s("p",[t._v("Run the solving process.")]),t._v(" "),s("p",[t._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),s("code",[t._v("policy")]),t._v(" and "),s("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"solve-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solve-2"}},[t._v("#")]),t._v(" _solve "),s("Badge",{attrs:{text:"FromInitialState",type:"tip"}})],1),t._v(" "),s("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"}],return:"None"}}}),t._v(" "),s("p",[t._v("Run the solving process.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),s("code",[t._v("policy")]),t._v(" and "),s("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),s("h2",{attrs:{id:"fromanystate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fromanystate"}},[t._v("#")]),t._v(" FromAnyState")]),t._v(" "),s("p",[t._v("A solver must inherit this class if it can solve from any given state.")]),t._v(" "),s("h3",{attrs:{id:"solve-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solve-3"}},[t._v("#")]),t._v(" solve "),s("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),s("skdecide-signature",{attrs:{name:"solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),s("p",[t._v("Run the solving process.")]),t._v(" "),s("p",[t._v("After solving by calling self._solve(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),s("code",[t._v("policy")]),t._v(" and "),s("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"solve-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solve-from"}},[t._v("#")]),t._v(" solve_from "),s("Badge",{attrs:{text:"FromAnyState",type:"tip"}})],1),t._v(" "),s("skdecide-signature",{attrs:{name:"solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),s("p",[t._v("Run the solving process from a given state.")]),t._v(" "),s("p",[t._v("After solving by calling self._solve_from(), autocast itself so that rollout methods apply\nto the domain original characteristics.")]),t._v(" "),s("h4",{attrs:{id:"parameters-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),s("code",[t._v("policy")]),t._v(" and "),s("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"solve-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solve-4"}},[t._v("#")]),t._v(" _solve "),s("Badge",{attrs:{text:"FromInitialState",type:"warn"}})],1),t._v(" "),s("skdecide-signature",{attrs:{name:"_solve",sig:{params:[{name:"self"},{name:"from_memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"None"}}}),t._v(" "),s("p",[t._v("Run the solving process.")]),t._v(" "),s("h4",{attrs:{id:"parameters-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("from_memory")]),t._v(": The source memory (state or history) from which we begin the solving process.\nIf None, initial state is used if the domain is initializable, else a ValueError is raised.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),s("code",[t._v("policy")]),t._v(" and "),s("code",[t._v("assessibility")]),t._v(".")])]),t._v(" "),s("h3",{attrs:{id:"solve-from-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solve-from-2"}},[t._v("#")]),t._v(" _solve_from "),s("Badge",{attrs:{text:"FromAnyState",type:"tip"}})],1),t._v(" "),s("skdecide-signature",{attrs:{name:"_solve_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),s("p",[t._v("Run the solving process from a given state.")]),t._v(" "),s("h4",{attrs:{id:"parameters-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("The nature of the solutions produced here depends on other solver's characteristics like\n"),s("code",[t._v("policy")]),t._v(" and "),s("code",[t._v("assessibility")]),t._v(".")])])],1)}),[],!1,null,null,null);e.default=r.exports}}]);