(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{639:function(a,e,t){"use strict";t.r(e);var s=t(38),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"parallel-domains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-domains"}},[a._v("#")]),a._v(" parallel_domains")]),a._v(" "),t("p",[a._v("This module contains helper classes to manage domains for parallel compurations.")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("Domain specification")]),a._v(" "),t("skdecide-summary")],1),a._v(" "),t("h2",{attrs:{id:"paralleldomain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#paralleldomain"}},[a._v("#")]),a._v(" ParallelDomain")]),a._v(" "),t("p",[a._v("Base class for creating and launching n domains in separate processes.\nEach domain listens for incoming domain requests.\nEach request can indicate which domain should serve it, otherwise the first available\ndomain i is chosen and its id is returned to the incoming request.")]),a._v(" "),t("h3",{attrs:{id:"constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"ParallelDomain",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"ParallelDomain",sig:{params:[{name:"domain_factory"},{name:"lambdas",default:"None"},{name:"nb_domains",default:"4"},{name:"ipc_notify",default:"False"}]}}}),a._v(" "),t("p",[a._v("Initialize self.  See help(type(self)) for accurate signature.")]),a._v(" "),t("h2",{attrs:{id:"pipeparalleldomain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pipeparalleldomain"}},[a._v("#")]),a._v(" PipeParallelDomain")]),a._v(" "),t("p",[a._v("This class can be used to create and launch n domains in separate processes.\nEach domain listens for incoming domain requests.\nEach request can indicate which domain should serve it, otherwise the first available\ndomain i is chosen and its id is returned to the incoming request.")]),a._v(" "),t("h3",{attrs:{id:"constructor-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-2"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"PipeParallelDomain",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"PipeParallelDomain",sig:{params:[{name:"domain_factory"},{name:"lambdas",default:"None"},{name:"nb_domains",default:"4"},{name:"ipc_notify",default:"False"}]}}}),a._v(" "),t("p",[a._v("Initialize self.  See help(type(self)) for accurate signature.")]),a._v(" "),t("h2",{attrs:{id:"shmparalleldomain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shmparalleldomain"}},[a._v("#")]),a._v(" ShmParallelDomain")]),a._v(" "),t("p",[a._v("This class can be used to create and launch n domains in separate processes\nwith shared memory between the Python processes.\nEach domain listens for incoming domain requests.\nEach request can indicate which domain should serve it, otherwise the first available\ndomain is chosen and its id is returned to the incoming request.")]),a._v(" "),t("h3",{attrs:{id:"constructor-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-3"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"ShmParallelDomain",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"ShmParallelDomain",sig:{params:[{name:"domain_factory"},{name:"shm_proxy"},{name:"lambdas",default:"None"},{name:"nb_domains",default:"4"},{name:"ipc_notify",default:"False"}]}}}),a._v(" "),t("p",[a._v("Initialize self.  See help(type(self)) for accurate signature.")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);