(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{571:function(a,e,t){"use strict";t.r(e);var s=t(38),i=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"builders-solver-maskability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#builders-solver-maskability"}},[a._v("#")]),a._v(" builders.solver.maskability")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("Domain specification")]),a._v(" "),t("skdecide-summary")],1),a._v(" "),t("h2",{attrs:{id:"applicableactions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicableactions"}},[a._v("#")]),a._v(" ApplicableActions")]),a._v(" "),t("p",[a._v("A solver must inherit this class if he can use information about applicable action.")]),a._v(" "),t("p",[a._v("This characteristic will be checked during rollout so that "),t("code",[a._v("retrieve_applicable_actions()")]),a._v(" will be called before\neach call to "),t("code",[a._v("step()")]),a._v(". For instance, this is the case for solvers using action masks (see "),t("code",[a._v("Maskable")]),a._v(").")]),a._v(" "),t("h3",{attrs:{id:"retrieve-applicable-actions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#retrieve-applicable-actions"}},[a._v("#")]),a._v(" retrieve_applicable_actions "),t("Badge",{attrs:{text:"ApplicableActions",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"retrieve_applicable_actions",sig:{params:[{name:"self"},{name:"domain",annotation:"Domain"}],return:"None"}}}),a._v(" "),t("p",[a._v("Retrieve applicable actions and use it for future call to "),t("code",[a._v("self.step()")]),a._v(".")]),a._v(" "),t("p",[a._v("To be called during rollout to get the actual applicable actions from the actual domain used in rollout.")]),a._v(" "),t("h3",{attrs:{id:"using-applicable-actions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-applicable-actions"}},[a._v("#")]),a._v(" using_applicable_actions "),t("Badge",{attrs:{text:"ApplicableActions",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"using_applicable_actions",sig:{params:[{name:"self"}]}}}),a._v(" "),t("p",[a._v("Tell if the solver is able to use applicable actions information.")]),a._v(" "),t("p",[a._v("For instance, action masking could be possible only if\nconsidered domain action space is enumerable for each agent.")]),a._v(" "),t("p",[a._v("The default implementation returns always True.")]),a._v(" "),t("h2",{attrs:{id:"maskable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maskable"}},[a._v("#")]),a._v(" Maskable")]),a._v(" "),t("p",[a._v("A solver must inherit this class if he can use action masks to sample actions.")]),a._v(" "),t("p",[a._v("For instance, it can be the case for wrappers around RL solvers like "),t("code",[a._v("sb3_contrib.MaskablePPO")]),a._v(" or "),t("code",[a._v("ray.rllib")]),a._v(" with\ncustom model making use of action masking.")]),a._v(" "),t("p",[a._v("An action mask is a format for specifying applicable actions when the action space is enumerable and finite. It is\nan array with 0's (for non-applicable actions) and 1's (for applicable actions). See "),t("code",[a._v("Events.get_action_mask()")]),a._v(" for\nmore information.")]),a._v(" "),t("h3",{attrs:{id:"get-action-mask"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-action-mask"}},[a._v("#")]),a._v(" get_action_mask "),t("Badge",{attrs:{text:"Maskable",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"get_action_mask",sig:{params:[{name:"self"}],return:"Optional[D.T_agent[Mask]]"}}}),a._v(" "),t("p",[a._v("Retrieve stored action masks.")]),a._v(" "),t("p",[a._v("To be used by "),t("code",[a._v("self.sample_action()")]),a._v(".\nReturns None if "),t("code",[a._v("self.set_action_mask()")]),a._v(" was not called.")]),a._v(" "),t("h3",{attrs:{id:"retrieve-applicable-actions-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#retrieve-applicable-actions-2"}},[a._v("#")]),a._v(" retrieve_applicable_actions "),t("Badge",{attrs:{text:"ApplicableActions",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"retrieve_applicable_actions",sig:{params:[{name:"self"},{name:"domain",annotation:"Domain"}],return:"None"}}}),a._v(" "),t("p",[a._v("Retrieve applicable actions and use it for future call to "),t("code",[a._v("self.step()")]),a._v(".")]),a._v(" "),t("p",[a._v("To be called during rollout to get the actual applicable actions from the actual domain used in rollout.\nTransform applicable actions into an action_mask to be use when sampling action.")]),a._v(" "),t("h3",{attrs:{id:"set-action-mask"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-action-mask"}},[a._v("#")]),a._v(" set_action_mask "),t("Badge",{attrs:{text:"Maskable",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"set_action_mask",sig:{params:[{name:"self"},{name:"action_mask",annotation:"Optional[D.T_agent[Mask]]"}],return:"None"}}}),a._v(" "),t("p",[a._v("Set the action mask.")]),a._v(" "),t("p",[a._v("To be called during rollout before "),t("code",[a._v("self.sample_action()")]),a._v(", assuming that\n"),t("code",[a._v("self.sample_action()")]),a._v(" knows what to do with it.")]),a._v(" "),t("p",[a._v("Autocastable so that it can use action_mask from original domain during rollout.")]),a._v(" "),t("h3",{attrs:{id:"using-applicable-actions-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-applicable-actions-2"}},[a._v("#")]),a._v(" using_applicable_actions "),t("Badge",{attrs:{text:"ApplicableActions",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"using_applicable_actions",sig:{params:[{name:"self"}]}}}),a._v(" "),t("p",[a._v("Tell if the solver is able to use applicable actions information.")]),a._v(" "),t("p",[a._v("For instance, action masking could be possible only if\nconsidered domain action space is enumerable for each agent.")]),a._v(" "),t("p",[a._v("The default implementation returns always True.")]),a._v(" "),t("h3",{attrs:{id:"set-action-mask-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-action-mask-2"}},[a._v("#")]),a._v(" _set_action_mask "),t("Badge",{attrs:{text:"Maskable",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"_set_action_mask",sig:{params:[{name:"self"},{name:"action_mask",annotation:"Optional[D.T_agent[Mask]]"}],return:"None"}}}),a._v(" "),t("p",[a._v("Set the action mask.")]),a._v(" "),t("p",[a._v("To be called during rollout before "),t("code",[a._v("self.sample_action()")]),a._v(", assuming that\n"),t("code",[a._v("self.sample_action()")]),a._v(" knows what to do with it.")])],1)}),[],!1,null,null,null);e.default=i.exports}}]);