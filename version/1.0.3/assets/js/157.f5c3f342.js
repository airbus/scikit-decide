(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{669:function(a,e,s){"use strict";s.r(e);var t=s(38),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"hub-solver-stable-baselines-gnn-common-utils"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hub-solver-stable-baselines-gnn-common-utils"}},[a._v("#")]),a._v(" hub.solver.stable_baselines.gnn.common.utils")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("Domain specification")]),a._v(" "),s("skdecide-summary")],1),a._v(" "),s("h2",{attrs:{id:"obs-as-tensor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#obs-as-tensor"}},[a._v("#")]),a._v(" obs_as_tensor")]),a._v(" "),s("skdecide-signature",{attrs:{name:"obs_as_tensor",sig:{params:[{name:"obs",annotation:"typing.Union[numpy.ndarray, gymnasium.spaces.graph.GraphInstance, list[gymnasium.spaces.graph.GraphInstance], dict[str, typing.Union[numpy.ndarray, gymnasium.spaces.graph.GraphInstance, list[gymnasium.spaces.graph.GraphInstance]]]]"},{name:"device",annotation:"<class 'torch.device'>"}],return:"typing.Union[torch.Tensor, torch_geometric.data.data.Data, dict[str, typing.Union[torch.Tensor, torch_geometric.data.data.Data]]]"}}}),a._v(" "),s("p",[a._v("Moves the observation to the given device.")]),a._v(" "),s("p",[a._v("Args:\nobs:\ndevice: PyTorch device")]),a._v(" "),s("p",[a._v("Returns:\nPyTorch tensor of the observation on a desired device.")]),a._v(" "),s("h2",{attrs:{id:"is-vectorized-observation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-vectorized-observation"}},[a._v("#")]),a._v(" is_vectorized_observation")]),a._v(" "),s("skdecide-signature",{attrs:{name:"is_vectorized_observation",sig:{params:[{name:"observation",annotation:"typing.Union[numpy.ndarray, gymnasium.spaces.graph.GraphInstance, list[gymnasium.spaces.graph.GraphInstance]]"},{name:"observation_space",annotation:"<class 'gymnasium.spaces.space.Space'>"}],return:"<class 'bool'>"}}}),a._v(" "),s("p",[a._v("For every observation type, detects and validates the shape,\nthen returns whether or not the observation is vectorized.")]),a._v(" "),s("p",[a._v(":param observation: the input observation to validate\n:param observation_space: the observation space\n:return: whether the given observation is vectorized or not")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);