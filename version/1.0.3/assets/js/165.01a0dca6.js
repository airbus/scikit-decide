(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{677:function(n,t,a){"use strict";a.r(t);var o=a(38),e=Object(o.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"hub-solver-utils-autoregressive-torch-utils"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hub-solver-utils-autoregressive-torch-utils"}},[n._v("#")]),n._v(" hub.solver.utils.autoregressive.torch_utils")]),n._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[n._v("Domain specification")]),n._v(" "),a("skdecide-summary")],1),n._v(" "),a("h2",{attrs:{id:"extract-applicable-action-components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extract-applicable-action-components"}},[n._v("#")]),n._v(" extract_applicable_action_components")]),n._v(" "),a("skdecide-signature",{attrs:{name:"extract_applicable_action_components",sig:{params:[{name:"action_components",annotation:"<class 'torch.Tensor'>"},{name:"applicable_actions",annotation:"<class 'torch.Tensor'>"},{name:"i_action_component",annotation:"<class 'int'>"}],return:"<class 'torch.Tensor'>"}}}),n._v(" "),a("p",[n._v("Extract the applicable action components for a given index given previous action components")]),n._v(" "),a("p",[n._v("NB: output has not a predictable shape")]),n._v(" "),a("p",[n._v("Args:\naction_components: partial actions up to i_action_component -1, size (N,) with N>=i_action_component\napplicable_actions: applicable full actions from which we want to extract applicable components, size (M,A),\nwhere A is the action shape length (and A > i_action_component),\nwhere M is the number of applicable actions\ni_action_component: index of action component for which we are extracting applicable components")]),n._v(" "),a("p",[n._v("Returns:\napplicable_action_components: size (m,) with applicable components indices (m<=M)")]),n._v(" "),a("h2",{attrs:{id:"batched-extract-action-component-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batched-extract-action-component-mask"}},[n._v("#")]),n._v(" batched_extract_action_component_mask")]),n._v(" "),a("skdecide-signature",{attrs:{name:"batched_extract_action_component_mask",sig:{params:[{name:"action_components",annotation:"<class 'torch.Tensor'>"},{name:"applicable_actions",annotation:"list[torch.Tensor]"},{name:"i_action_component",annotation:"<class 'int'>"},{name:"action_component_dim",annotation:"<class 'int'>"},{name:"nonzeromask_samples_mask",default:"None",annotation:"typing.Optional[torch.Tensor]"}],return:"<class 'torch.Tensor'>"}}}),n._v(" "),a("p",[n._v("Extract batchwise a mask for the given component index according to previous action components")]),n._v(" "),a("p",[n._v("NB: Batch dim for action_components "),a("em",[n._v("and")]),n._v(" applicable_actions")]),n._v(" "),a("p",[n._v("Args:\naction_components: partial actions up to i_action_component -1, size (B,N) with N>=i_action_component\napplicable_actions: applicable full actions from which we want to extract applicable components, size B*(M,A),\nwhere B is the batch size\nwhere A is the action shape length (and A > i_action_component),\nwhere M is the number of applicable actions\ni_action_component: index of action component for which we are extracting a mask\naction_component_dim: action component max value\nnonzeromask_samples_mask: boolean tensor (B,). True for each sample needing a mask computation\n(else mask is only 0's). If None, we compute for each sample.")]),n._v(" "),a("p",[n._v("Returns:\naction_component_mask: size (B, action_component_dim)")]),n._v(" "),a("h2",{attrs:{id:"batched-extract-applicable-action-components-v2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batched-extract-applicable-action-components-v2"}},[n._v("#")]),n._v(" batched_extract_applicable_action_components_v2")]),n._v(" "),a("skdecide-signature",{attrs:{name:"batched_extract_applicable_action_components_v2",sig:{params:[{name:"action_components",annotation:"<class 'torch.Tensor'>"},{name:"applicable_actions",annotation:"<class 'torch.Tensor'>"},{name:"i_action_component",annotation:"<class 'int'>"}],return:"<class 'torch.Tensor'>"}}}),n._v(" "),a("p",[n._v("Extract the applicable action components for a given index given previous action components")]),n._v(" "),a("p",[n._v("NB: output has a predictable shape, corresponding to applicable_actions length")]),n._v(" "),a("p",[n._v("Args:\naction_components: partial actions up to i_action_component -1, size (N,) with N>=i_action_component\napplicable_actions: applicable full actions from which we want to extract applicable components, size (M,A),\nwhere A is the action shape length (and A > i_action_component),\nwhere M is the number of applicable actions\ni_action_component: index of action component for which we are extracting applicable components")]),n._v(" "),a("p",[n._v('Returns:\napplicable_action_components: size (M,) with applicable components indices (-1 meaning "no component")')]),n._v(" "),a("h2",{attrs:{id:"extract-applicable-action-components-v2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extract-applicable-action-components-v2"}},[n._v("#")]),n._v(" extract_applicable_action_components_v2")]),n._v(" "),a("skdecide-signature",{attrs:{name:"extract_applicable_action_components_v2",sig:{params:[{name:"action_components",annotation:"<class 'torch.Tensor'>"},{name:"applicable_actions",annotation:"<class 'torch.Tensor'>"},{name:"i_action_component",annotation:"<class 'int'>"}],return:"<class 'torch.Tensor'>"}}}),n._v(" "),a("p",[n._v("Extract the applicable action components for a given index given previous action components")]),n._v(" "),a("p",[n._v("NB: output has a predictable shape, corresponding to applicable_actions length")]),n._v(" "),a("p",[n._v("Args:\naction_components: partial actions up to i_action_component -1, size (N,) with N>=i_action_component\napplicable_actions: applicable full actions from which we want to extract applicable components, size (M,A),\nwhere A is the action shape length (and A > i_action_component),\nwhere M is the number of applicable actions\ni_action_component: index of action component for which we are extracting applicable components")]),n._v(" "),a("p",[n._v('Returns:\napplicable_action_components: size (M,) with applicable components indices (-1 meaning "no component")')]),n._v(" "),a("h2",{attrs:{id:"batched-extract-action-component-mask-v2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batched-extract-action-component-mask-v2"}},[n._v("#")]),n._v(" batched_extract_action_component_mask_v2")]),n._v(" "),a("skdecide-signature",{attrs:{name:"batched_extract_action_component_mask_v2",sig:{params:[{name:"action_components"},{name:"applicable_actions"},{name:"i_action_component"},{name:"action_component_dim"}]}}}),n._v(" "),a("p",[n._v("Extract batchwise a mask for the given component index according to previous action components")]),n._v(" "),a("p",[n._v("NB: Batch dim for action_components "),a("em",[n._v("but not")]),n._v(" applicable_actions")]),n._v(" "),a("p",[n._v("Args:\naction_components: partial actions up to i_action_component -1, size (B,N) with N>=i_action_component\napplicable_actions: applicable full actions from which we want to extract applicable components, size (M,A),\nwhere A is the action shape length (and A > i_action_component),\nwhere M is the number of applicable actions\ni_action_component: index of action component for which we are extracting a mask\naction_component_dim: action component max value")]),n._v(" "),a("p",[n._v("Returns:\naction_component_mask: size (B, action_component_dim)")]),n._v(" "),a("h2",{attrs:{id:"extract-action-component-mask-v2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extract-action-component-mask-v2"}},[n._v("#")]),n._v(" extract_action_component_mask_v2")]),n._v(" "),a("skdecide-signature",{attrs:{name:"extract_action_component_mask_v2",sig:{params:[{name:"action_components"},{name:"applicable_actions"},{name:"i_action_component"},{name:"action_component_dim"}]}}}),n._v(" "),a("p",[n._v("Extract a mask for the given component index according to previous action components")]),n._v(" "),a("p",[n._v("Args:\naction_components: partial actions up to i_action_component -1, size (N,) with N>=i_action_component\napplicable_actions: applicable full actions from which we want to extract applicable components, size (M,A),\nwhere A is the action shape length (and A > i_action_component),\nwhere M is the number of applicable actions\ni_action_component: index of action component for which we are extracting a mask\naction_component_dim: action component max value")]),n._v(" "),a("p",[n._v("Returns:\naction_component_mask: size (action_component_dim, )")])],1)}),[],!1,null,null,null);t.default=e.exports}}]);