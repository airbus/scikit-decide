(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{583:function(t,a,n){"use strict";n.r(a);var e=n(38),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"hub-domain-flight-planning-flightplanning-utils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hub-domain-flight-planning-flightplanning-utils"}},[t._v("#")]),t._v(" hub.domain.flight_planning.flightplanning_utils")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),n("skdecide-summary")],1),t._v(" "),n("h2",{attrs:{id:"plot-network-adapted"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plot-network-adapted"}},[t._v("#")]),t._v(" plot_network_adapted")]),t._v(" "),n("skdecide-signature",{attrs:{name:"plot_network_adapted",sig:{params:[{name:"graph",annotation:"<class 'networkx.classes.digraph.DiGraph'>"},{name:"p0",annotation:"<class 'pygeodesy.ellipsoidalVincenty.LatLon'>"},{name:"p1",annotation:"<class 'pygeodesy.ellipsoidalVincenty.LatLon'>"},{name:"dir_path",default:"None",annotation:"<class 'str'>"}]}}}),t._v(" "),n("p",[t._v("Plots the vertical profile and map trajectory of a given flight graph.\nThis version is adapted to work with the graph from create_flight_graph.")]),t._v(" "),n("p",[t._v("Args:\ngraph (nx.DiGraph): The flight graph to plot.\np0 (LatLon): The starting point object.\np1 (LatLon): The ending point object.\ndir_path (str, optional): Directory to save the plot image. Defaults to None.")])],1)}),[],!1,null,null,null);a.default=i.exports}}]);