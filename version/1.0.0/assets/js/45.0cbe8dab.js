(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{645:function(t,e,a){"use strict";a.r(e);var s=a(38),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"builders-domain-scheduling-scheduling-domains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#builders-domain-scheduling-scheduling-domains"}},[t._v("#")]),t._v(" builders.domain.scheduling.scheduling_domains")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),a("skdecide-summary")],1),t._v(" "),a("h2",{attrs:{id:"schedulingobjectiveenum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schedulingobjectiveenum"}},[t._v("#")]),t._v(" SchedulingObjectiveEnum")]),t._v(" "),a("p",[t._v("Enum defining the different scheduling objectives")]),t._v(" "),a("h3",{attrs:{id:"cost"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cost"}},[t._v("#")]),t._v(" COST "),a("Badge",{attrs:{text:"SchedulingObjectiveEnum",type:"tip"}})],1),t._v(" "),a("p",[t._v("cost of resources (to be minimized)")]),t._v(" "),a("h3",{attrs:{id:"makespan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#makespan"}},[t._v("#")]),t._v(" MAKESPAN "),a("Badge",{attrs:{text:"SchedulingObjectiveEnum",type:"tip"}})],1),t._v(" "),a("p",[t._v("makespan (to be minimized)")]),t._v(" "),a("h2",{attrs:{id:"d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d"}},[t._v("#")]),t._v(" D")]),t._v(" "),a("p",[t._v("Base class for any scheduling statefull domain")]),t._v(" "),a("h3",{attrs:{id:"check-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-observation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"is-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-6"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-11"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-7"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-12"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-8"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-13"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-9"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-14"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-10"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-15"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-16"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-11"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-17"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"set-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-12"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-13"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-18"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"check-value-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-2"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-14"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-19"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-2"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-20"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-3"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_action_space()")]),t._v(", the difference being that the\nresult is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-21"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-2"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-15"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-22"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(", the difference being that\nthe memory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-16"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-23"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-2"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-17"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-24"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-18"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-25"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-2"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-26"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-3"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-27"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-2"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-28"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-3"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(", the difference\nbeing that the result is not cached here.")]),t._v(" "),a("h4",{attrs:{id:"returns-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-29"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-2"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-30"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-3"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-31"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-32"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-2"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-33"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-2"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-19"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-34"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-2"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-20"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-35"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-2"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-36"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-3"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", the difference\nbeing that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-37"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"init-memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-21"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-38"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-2"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-22"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-39"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-2"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-23"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-40"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-24"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-41"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-2"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-25"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-42"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-26"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-43"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-2"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-27"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-44"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-2"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-28"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-45"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-2"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-46"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-2"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-29"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-47"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-2"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-30"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-48"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one sample of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Simulation._sample()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-31"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-49"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"state-step"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-32"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-50"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-2"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-33"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-51"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"schedulingdomain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schedulingdomain"}},[t._v("#")]),t._v(" SchedulingDomain")]),t._v(" "),a("p",[t._v("This is the highest level scheduling domain class (inheriting top-level class for each mandatory\ndomain characteristic).\nThis is where the implementation of the statefull scheduling domain is implemented,\nletting to the user the possibility\nto the user to define the scheduling problem without having to think of a statefull version.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-3"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-34"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-52"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-4"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-53"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-2"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-3"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-35"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-54"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-3"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-36"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-55"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-55"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-4"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-56"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-56"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-4"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-57"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-57"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-4"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-58"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-58"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-3"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-37"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-59"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-59"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-3"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-38"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-60"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-60"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-4"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-61"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-61"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-62"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-62"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-63"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-63"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-64"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-64"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-3"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-39"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-65"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-65"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-3"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-40"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-66"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-66"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-3"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-41"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-67"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-67"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-3"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-42"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-68"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-68"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-3"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-43"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-69"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-69"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-3"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-70"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-70"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-3"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-44"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-71"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-71"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample, store and return task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-3"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-45"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-3"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-3"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-46"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-72"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-72"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-2"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-4"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-47"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-73"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-73"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-5"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-74"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-74"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-6"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-2"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-2"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-2"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-4"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-48"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-75"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-75"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-2"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-2"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-4"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-49"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-76"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-76"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-2"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-50"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-77"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-77"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-5"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-78"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-78"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-6"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-79"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-79"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-5"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-80"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-80"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-6"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-5"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-81"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-81"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-6"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-82"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-82"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-2"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-3"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-83"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-83"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-4"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-84"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-84"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-2"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-2"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-4"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-51"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-85"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-85"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-4"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-52"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-86"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-86"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-5"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-87"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-87"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-6"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-2"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-2"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-2"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-2"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-2"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-2"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-2"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-2"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-2"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-2"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-2"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-2"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-88"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-88"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-2"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-2"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-89"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-89"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-2"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-90"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-90"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-2"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-2"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-53"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-91"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-91"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-4"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-54"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-92"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-92"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-4"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-55"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-55"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-93"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-93"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-2"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-56"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-56"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-94"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-94"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-4"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-57"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-57"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-95"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-95"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-2"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-58"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-58"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-96"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-96"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-4"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-59"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-59"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-97"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-97"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-4"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-60"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-60"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-98"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-98"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-4"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-99"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-99"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-4"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-61"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-61"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-100"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-100"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-2"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-2"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-2"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-4"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-62"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-62"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-4"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-2"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-101"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-101"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-2"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-2"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-63"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-63"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-102"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-102"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-4"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-64"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-64"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-103"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-103"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"d-det"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-det"}},[t._v("#")]),t._v(" D_det")]),t._v(" "),a("p",[t._v("Base class for deterministic scheduling problems")]),t._v(" "),a("h3",{attrs:{id:"check-value-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-5"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-65"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-65"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-104"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-104"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-7"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-105"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-105"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-3"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-5"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-66"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-66"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-106"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-106"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-5"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-67"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-67"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-107"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-107"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-7"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-108"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-108"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-7"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-109"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-109"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-7"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-110"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-110"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-2"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-68"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-68"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-111"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-111"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-2"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-69"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-69"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-112"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-112"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-5"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-70"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-70"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-113"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-113"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-5"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-71"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-71"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-114"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-114"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-7"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-115"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-115"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-72"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-72"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-116"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-116"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"is-action-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-5"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-73"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-73"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-117"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-117"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-5"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-74"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-74"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-118"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-118"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-5"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-75"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-75"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-119"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-119"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-5"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-76"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-76"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-120"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-120"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-5"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-77"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-77"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-121"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-121"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-78"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-78"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-122"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-122"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-123"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-123"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-5"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-124"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-124"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-5"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-79"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-79"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-125"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-125"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-5"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-80"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-80"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-5"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-5"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-81"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-81"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-126"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-126"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"check-value-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-6"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-82"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-82"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-127"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-127"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-8"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-128"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-128"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-9"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_action_space()")]),t._v(", the difference being that the\nresult is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-129"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-129"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-6"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-83"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-83"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-130"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-130"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-3"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(", the difference being that\nthe memory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-84"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-84"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-131"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-131"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-6"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-85"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-85"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-132"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-132"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-3"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-86"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-86"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-133"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-133"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-8"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-134"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-134"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-9"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-135"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-135"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-8"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-136"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-136"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-9"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(", the difference\nbeing that the result is not cached here.")]),t._v(" "),a("h4",{attrs:{id:"returns-137"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-137"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-8"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-138"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-138"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-9"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-139"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-139"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-5"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-140"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-140"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-6"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-141"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-141"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-3"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-87"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-87"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-142"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-142"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-3"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"SingleValueDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-88"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-88"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-143"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-143"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-6"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-89"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-89"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-144"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-144"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-6"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-90"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-90"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-145"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-145"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-8"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-146"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-146"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-9"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", the difference\nbeing that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-147"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-147"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-2"}},[t._v("#")]),t._v(" _get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-91"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-91"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-148"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-148"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"init-memory-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-3"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-92"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-92"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-149"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-149"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-6"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-93"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-93"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-150"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-150"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-6"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-94"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-94"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-151"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-151"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-3"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-95"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-95"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-152"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-152"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-6"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-96"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-96"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-153"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-153"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-3"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-97"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-97"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-154"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-154"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-6"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-98"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-98"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-155"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-155"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-6"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-99"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-99"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-156"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-156"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-2"}},[t._v("#")]),t._v(" _is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-100"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-100"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-157"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-157"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-2"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-158"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-158"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-3"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-159"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-159"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-6"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-160"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-160"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-6"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-101"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-101"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-161"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-161"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-6"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-102"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-102"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-6"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-3"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-162"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-162"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-3"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one sample of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Simulation._sample()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-103"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-103"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-163"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-163"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"state-step-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-3"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-104"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-104"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-164"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-164"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-6"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-105"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-105"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-165"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-165"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"d-uncertain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-uncertain"}},[t._v("#")]),t._v(" D_uncertain")]),t._v(" "),a("p",[t._v("Base class for uncertain scheduling problems where we can compute distributions")]),t._v(" "),a("h3",{attrs:{id:"check-value-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-7"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-106"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-106"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-166"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-166"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-10"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-167"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-167"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-4"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-7"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-107"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-107"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-168"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-168"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-7"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-108"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-108"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-169"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-169"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-10"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-170"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-170"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-10"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-171"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-171"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-10"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-172"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-172"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-4"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-109"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-109"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-173"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-173"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-7"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-110"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-110"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-174"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-174"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-7"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-111"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-111"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-175"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-175"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-10"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-176"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-176"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-3"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-112"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-112"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-177"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-177"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"is-action-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-7"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-113"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-113"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-178"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-178"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-7"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-114"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-114"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-179"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-179"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-7"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-115"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-115"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-180"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-180"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-7"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-116"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-116"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-181"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-181"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-7"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-117"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-117"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-182"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-182"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-3"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-118"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-118"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-183"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-183"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-4"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-184"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-184"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-7"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-185"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-185"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-7"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-119"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-119"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-186"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-186"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-7"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-120"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-120"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-7"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-7"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-121"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-121"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-187"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-187"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"check-value-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-8"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-122"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-122"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-188"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-188"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-11"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-189"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-189"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-12"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_action_space()")]),t._v(", the difference being that the\nresult is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-190"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-190"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-8"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-123"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-123"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-191"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-191"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-4"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(", the difference being that\nthe memory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-124"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-124"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-192"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-192"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-8"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-125"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-125"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-193"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-193"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-4"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-126"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-126"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-194"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-194"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-11"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-195"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-195"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-12"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-196"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-196"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-11"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-197"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-197"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-12"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(", the difference\nbeing that the result is not cached here.")]),t._v(" "),a("h4",{attrs:{id:"returns-198"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-198"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-11"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-199"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-199"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-12"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-200"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-200"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-7"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-201"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-201"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-8"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-202"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-202"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-5"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-127"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-127"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-203"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-203"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-8"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-128"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-128"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-204"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-204"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-8"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-129"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-129"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-205"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-205"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-11"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-206"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-206"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-12"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", the difference\nbeing that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-207"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-207"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-4"}},[t._v("#")]),t._v(" _get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-130"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-130"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-208"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-208"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"init-memory-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-4"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-131"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-131"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-209"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-209"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-8"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-132"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-132"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-210"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-210"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-8"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-133"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-133"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-211"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-211"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-4"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-134"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-134"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-212"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-212"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-8"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-135"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-135"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-213"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-213"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-4"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-136"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-136"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-214"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-214"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-8"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-137"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-137"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-215"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-215"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-8"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-138"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-138"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-216"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-216"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-4"}},[t._v("#")]),t._v(" _is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-139"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-139"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-217"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-217"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-5"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-218"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-218"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-6"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-219"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-219"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-8"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-220"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-220"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-8"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-140"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-140"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-221"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-221"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-8"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-141"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-141"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-8"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-4"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-222"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-222"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-4"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one sample of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Simulation._sample()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-142"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-142"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-223"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-223"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"state-step-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-4"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-143"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-143"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-224"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-224"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-8"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-144"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-144"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-225"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-225"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"uncertainschedulingdomain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uncertainschedulingdomain"}},[t._v("#")]),t._v(" UncertainSchedulingDomain")]),t._v(" "),a("p",[t._v("This is the highest level scheduling domain class (inheriting top-level class for each mandatory\ndomain characteristic).")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-3"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-2"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-2"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-2"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-9"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-145"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-145"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-226"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-226"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-2"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-13"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-227"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-227"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-5"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-2"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-3"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-3"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-3"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-9"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-146"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-146"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-228"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-228"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-3"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-9"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-147"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-147"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-229"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-229"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-13"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-230"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-230"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-13"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-231"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-231"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-13"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-232"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-232"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-3"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-3"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-6"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-148"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-148"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-233"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-233"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-3"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-9"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-149"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-149"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-234"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-234"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-9"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-150"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-150"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-235"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-235"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-13"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-236"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-236"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-3"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-3"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-3"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-3"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-3"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-3"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-3"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-2"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-2"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-2"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-3"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-3"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-2"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-3"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-3"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-3"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-237"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-237"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-3"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-3"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-238"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-238"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-3"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-239"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-239"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-5"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-151"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-151"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-240"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-240"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-3"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-2"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-9"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-152"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-152"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-241"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-241"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-9"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-153"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-153"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-242"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-242"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-9"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-154"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-154"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-243"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-243"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-9"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-155"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-155"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-244"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-244"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-9"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-156"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-156"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-245"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-245"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-5"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-157"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-157"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-246"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-246"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-7"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-247"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-247"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-9"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-248"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-248"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-9"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-158"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-158"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-249"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-249"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-3"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-3"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-3"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample, store and return task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-2"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-9"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-159"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-159"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-9"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-9"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-160"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-160"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-250"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-250"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-2"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-2"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-2"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-2"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-2"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-2"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-2"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-2"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-2"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-2"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-2"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-2"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-2"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-2"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-2"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-2"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-2"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-2"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-2"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-2"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-2"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-2"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-2"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-2"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-2"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-2"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-2"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-4"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-10"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-161"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-161"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-251"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-251"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-14"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-252"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-252"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-15"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-4"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-4"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-4"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-10"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-162"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-162"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-253"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-253"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-5"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-4"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-10"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-163"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-163"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-254"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-254"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-5"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-164"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-164"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-255"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-255"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-14"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-256"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-256"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-15"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-257"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-257"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-14"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-258"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-258"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-15"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-14"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-259"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-259"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-15"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-260"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-260"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-4"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-9"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-261"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-261"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-10"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-262"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-262"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-4"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-4"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-7"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-4"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-10"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-165"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-165"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-263"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-263"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-10"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-166"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-166"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-264"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-264"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-14"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-265"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-265"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-15"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-4"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-4"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-4"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-4"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-4"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-4"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-4"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-4"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-4"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-4"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-4"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-4"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-266"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-266"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-4"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-2"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-2"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-4"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-267"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-267"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-4"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-268"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-268"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-4"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-5"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-167"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-167"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-269"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-269"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-10"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-168"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-168"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-270"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-270"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-10"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-169"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-169"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-271"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-271"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-5"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-170"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-170"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-272"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-272"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-10"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-171"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-171"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-273"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-273"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-5"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-172"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-172"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-274"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-274"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-10"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-173"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-173"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-275"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-275"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-10"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-174"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-174"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-276"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-276"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-8"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-277"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-277"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-9"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-278"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-278"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-10"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-279"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-279"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-10"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-175"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-175"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-280"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-280"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-4"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-4"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-4"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-10"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-176"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-176"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-10"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-5"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-281"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-281"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-5"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-5"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-177"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-177"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-282"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-282"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-10"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-178"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-178"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-283"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-283"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"deterministicschedulingdomain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deterministicschedulingdomain"}},[t._v("#")]),t._v(" DeterministicSchedulingDomain")]),t._v(" "),a("p",[t._v("This is the highest level scheduling domain class (inheriting top-level class for each mandatory\ndomain characteristic).")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-5"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-3"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-3"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-3"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-11"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-179"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-179"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-284"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-284"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-3"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-16"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-285"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-285"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-6"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-3"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-5"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-5"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-5"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-11"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-180"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-180"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-286"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-286"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-5"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-11"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-181"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-181"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-287"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-287"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-16"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-288"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-288"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-16"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-289"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-289"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-16"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-290"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-290"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-5"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-5"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-5"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-182"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-182"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-291"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-291"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-8"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-183"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-183"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-292"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-292"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-5"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-11"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-184"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-184"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-293"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-293"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-11"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-185"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-185"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-294"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-294"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-16"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-295"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-295"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-5"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-5"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-5"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-5"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-5"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-5"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-5"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-3"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-3"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-3"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-5"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-5"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-3"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-5"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-5"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-5"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-296"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-296"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-5"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-5"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-297"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-297"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-5"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-298"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-298"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-6"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-186"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-186"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-299"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-299"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-5"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-3"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-11"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-187"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-187"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-300"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-300"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-11"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-188"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-188"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-301"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-301"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-11"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-189"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-189"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-302"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-302"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-11"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-190"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-190"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-303"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-303"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-11"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-191"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-191"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-304"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-304"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-6"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-192"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-192"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-305"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-305"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-10"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-306"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-306"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-11"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-307"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-307"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-11"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-193"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-193"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-308"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-308"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-5"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-5"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-5"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample, store and return task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-3"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-11"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-194"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-194"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-11"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-11"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-195"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-195"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-309"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-309"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-3"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-3"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-3"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-3"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-3"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-3"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-3"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-3"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-3"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-3"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-3"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-3"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-3"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-3"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-3"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-3"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-3"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-3"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-3"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-3"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-3"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-3"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-3"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-3"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-3"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-3"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-3"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-6"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-12"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-196"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-196"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-310"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-310"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-17"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-311"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-311"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-18"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-6"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-6"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-6"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-12"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-197"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-197"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-312"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-312"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-6"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-6"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-12"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-198"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-198"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-313"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-313"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-6"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-199"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-199"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-314"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-314"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-17"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-315"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-315"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-18"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-316"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-316"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-17"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-317"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-317"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-18"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-17"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-318"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-318"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-18"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-319"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-319"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-6"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-11"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-320"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-320"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-12"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-321"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-321"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-6"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-6"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-9"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-6"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-12"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-200"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-200"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-322"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-322"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-12"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-201"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-201"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-323"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-323"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-17"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-324"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-324"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-18"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-6"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-6"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-6"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-6"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-6"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-6"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-6"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-6"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-6"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-6"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-6"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-6"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-325"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-325"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-6"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-3"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-3"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-6"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-326"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-326"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-6"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-327"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-327"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-6"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-6"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-202"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-202"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-328"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-328"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-12"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-203"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-203"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-329"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-329"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-12"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-204"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-204"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-330"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-330"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-6"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-205"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-205"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-331"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-331"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-12"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-206"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-206"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-332"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-332"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-6"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-207"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-207"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-333"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-333"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-12"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-208"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-208"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-334"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-334"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-12"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-209"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-209"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-335"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-335"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-11"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-336"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-336"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-12"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-337"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-337"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-12"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-338"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-338"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-12"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-210"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-210"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-339"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-339"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-6"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-6"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-6"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-12"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-211"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-211"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-12"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-6"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-340"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-340"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-6"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-6"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-212"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-212"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-341"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-341"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-12"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-213"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-213"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-342"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-342"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"singlemodercpsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singlemodercpsp"}},[t._v("#")]),t._v(" SingleModeRCPSP")]),t._v(" "),a("p",[t._v("Single mode (classic) Resource project scheduling problem template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("task having deterministic resource consumption\nThe goal is to minimize the overall makespan, respecting the cumulative resource consumption constraint")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-7"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-4"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-4"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-4"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-13"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-214"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-214"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-343"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-343"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-4"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-19"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-344"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-344"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-7"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-4"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-7"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-7"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-7"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-13"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-215"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-215"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-345"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-345"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-7"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-13"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-216"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-216"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-346"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-346"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-19"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-347"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-347"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-19"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-348"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-348"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-19"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-349"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-349"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-7"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-7"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-7"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-217"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-217"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-350"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-350"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-10"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-218"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-218"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-351"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-351"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-7"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-13"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-219"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-219"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-352"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-352"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-13"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-220"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-220"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-353"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-353"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-19"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-354"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-354"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-7"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-7"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-7"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-7"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-7"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-7"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-7"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-4"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-4"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-4"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-7"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-7"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-4"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-7"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-7"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-7"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-355"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-355"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-7"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-7"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-356"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-356"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-7"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-357"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-357"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-7"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-221"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-221"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-358"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-358"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-7"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-4"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-13"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-222"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-222"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-359"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-359"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-13"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-223"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-223"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-360"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-360"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-13"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-224"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-224"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-361"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-361"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-13"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-225"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-225"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-362"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-362"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-13"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-226"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-226"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-363"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-363"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-7"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-227"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-227"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-364"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-364"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-13"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-365"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-365"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-13"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-366"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-366"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-13"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-228"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-228"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-367"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-367"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-7"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-7"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-7"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-4"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-13"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-229"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-229"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-13"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-13"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-230"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-230"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-368"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-368"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-4"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-4"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-4"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-4"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-4"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-4"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-4"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-4"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-4"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-4"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-4"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-4"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-4"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-4"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-4"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-4"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-4"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-4"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-4"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-4"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-4"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-4"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-4"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-4"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-4"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-4"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-4"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-8"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-14"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-231"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-231"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-369"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-369"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-20"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-370"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-370"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-21"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-8"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-8"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-8"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-14"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-232"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-232"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-371"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-371"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-7"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-8"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-14"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-233"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-233"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-372"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-372"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-7"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-234"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-234"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-373"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-373"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-20"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-374"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-374"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-21"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-375"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-375"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-20"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-376"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-376"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-21"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-20"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-377"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-377"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-21"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-378"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-378"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-8"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-13"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-379"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-379"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-14"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-380"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-380"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-8"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-8"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-11"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-8"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-14"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-235"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-235"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-381"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-381"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-14"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-236"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-236"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-382"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-382"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-20"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-383"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-383"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-21"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-2"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-8"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-8"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-2"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-8"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-8"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-8"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-8"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-8"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-8"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-2"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-2"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-2"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-2"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-8"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-8"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-8"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-8"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-384"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-384"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-8"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-4"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-mode"}},[t._v("#")]),t._v(" _get_tasks_mode "),a("Badge",{attrs:{text:"SingleMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_mode",sig:{params:[{name:"self"}],return:"Dict[int, ModeConsumption]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is a ModeConsumption object defining\nthe resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1})\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]})\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-4"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-8"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-8"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-385"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-385"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-8"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-7"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-237"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-237"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-386"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-386"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-14"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-238"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-238"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-387"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-387"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-14"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-239"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-239"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-388"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-388"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-7"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-240"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-240"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-389"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-389"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-14"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-241"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-241"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-390"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-390"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-7"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-242"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-242"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-391"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-391"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-14"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-243"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-243"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-392"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-392"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-14"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-244"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-244"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-393"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-393"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-14"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-394"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-394"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-15"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-395"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-395"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-14"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-396"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-396"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-14"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-245"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-245"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-397"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-397"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-8"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-8"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-8"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-14"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-246"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-246"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-14"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-7"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-398"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-398"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-7"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-7"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-247"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-247"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-399"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-399"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-14"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-248"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-248"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-400"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-400"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"singlemodercpspcalendar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singlemodercpspcalendar"}},[t._v("#")]),t._v(" SingleModeRCPSPCalendar")]),t._v(" "),a("p",[t._v("Single mode Resource project scheduling problem with varying resource availability template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with variable availability through time")]),t._v(" "),a("li",[t._v("task having deterministic resource consumption\nThe goal is to minimize the overall makespan, respecting the cumulative resource consumption constraint\nat any time")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-9"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-5"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-5"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-5"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-15"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-249"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-249"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-401"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-401"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-5"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-22"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-402"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-402"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-8"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-5"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-9"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-9"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-9"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-15"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-250"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-250"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-403"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-403"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-9"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-15"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-251"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-251"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-404"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-404"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-22"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-405"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-405"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-22"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-406"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-406"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-22"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-407"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-407"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-9"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-9"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-9"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-252"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-252"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-408"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-408"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-12"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-253"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-253"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-409"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-409"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-9"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-15"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-254"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-254"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-410"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-410"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-15"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-255"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-255"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-411"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-411"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-22"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-412"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-412"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-9"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-9"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-3"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-9"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-9"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-9"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-9"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-9"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-5"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-5"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-5"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-9"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-3"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-3"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-3"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-3"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-9"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-5"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-9"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-9"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-9"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-413"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-413"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-9"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-9"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-414"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-414"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-9"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-415"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-415"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-8"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-256"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-256"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-416"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-416"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-9"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-5"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-15"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-257"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-257"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-417"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-417"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-15"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-258"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-258"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-418"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-418"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-15"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-259"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-259"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-419"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-419"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-15"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-260"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-260"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-420"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-420"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-15"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-261"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-261"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-421"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-421"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-8"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-262"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-262"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-422"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-422"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-16"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-423"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-423"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-15"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-424"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-424"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-15"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-263"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-263"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-425"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-425"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-9"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-9"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-9"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-5"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-15"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-264"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-264"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-15"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-15"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-265"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-265"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-426"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-426"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-5"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-5"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-5"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-5"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-5"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-5"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-5"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-5"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-5"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-5"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-5"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-5"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-5"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-5"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-5"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-5"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-5"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-5"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-5"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-5"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-5"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-5"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-5"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-5"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-5"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-5"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-5"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-10"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-16"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-266"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-266"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-427"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-427"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-23"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-428"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-428"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-24"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-10"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-10"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-10"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-16"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-267"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-267"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-429"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-429"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-8"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-10"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-16"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-268"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-268"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-430"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-430"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-8"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-269"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-269"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-431"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-431"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-23"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-432"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-432"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-24"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-433"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-433"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-23"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-434"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-434"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-24"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-23"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-435"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-435"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-24"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-436"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-436"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-10"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-15"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-437"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-437"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-16"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-438"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-438"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-10"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-10"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-13"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-10"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-16"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-270"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-270"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-439"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-439"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-16"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-271"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-271"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-440"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-440"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-23"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-441"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-441"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-24"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-10"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-10"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-4"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-10"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-10"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-10"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-10"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-10"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-10"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-4"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-4"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-4"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-4"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-10"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-10"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-10"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-10"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-442"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-442"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-10"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-5"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-mode-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-mode-2"}},[t._v("#")]),t._v(" _get_tasks_mode "),a("Badge",{attrs:{text:"SingleMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_mode",sig:{params:[{name:"self"}],return:"Dict[int, ModeConsumption]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is a ModeConsumption object defining\nthe resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1})\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]})\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-5"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-10"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-10"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-443"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-443"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-10"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-8"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-272"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-272"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-444"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-444"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-16"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-273"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-273"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-445"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-445"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-16"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-274"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-274"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-446"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-446"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-8"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-275"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-275"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-447"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-447"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-16"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-276"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-276"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-448"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-448"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-8"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-277"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-277"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-449"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-449"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-16"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-278"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-278"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-450"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-450"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-16"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-279"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-279"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-451"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-451"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-17"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-452"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-452"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-18"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-453"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-453"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-16"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-454"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-454"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-16"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-280"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-280"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-455"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-455"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-10"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-10"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-10"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-16"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-281"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-281"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-16"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-8"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-456"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-456"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-8"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-8"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-282"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-282"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-457"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-457"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-16"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-283"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-283"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-458"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-458"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodercpsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodercpsp"}},[t._v("#")]),t._v(" MultiModeRCPSP")]),t._v(" "),a("p",[t._v("Multimode (classic) Resource project scheduling problem template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption and duration\nThe goal is to minimize the overall makespan, respecting the cumulative resource consumption constraint")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-11"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-6"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-6"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-6"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-17"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-284"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-284"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-459"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-459"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-6"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-25"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-460"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-460"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-9"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-6"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-11"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-11"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-11"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-17"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-285"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-285"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-461"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-461"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-11"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-17"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-286"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-286"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-462"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-462"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-25"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-463"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-463"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-25"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-464"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-464"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-25"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-465"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-465"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-11"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-11"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-11"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-287"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-287"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-466"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-466"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-14"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-288"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-288"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-467"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-467"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-11"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-17"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-289"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-289"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-468"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-468"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-17"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-290"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-290"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-469"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-469"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-25"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-470"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-470"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-3"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-11"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-11"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-5"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-11"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-11"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-11"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-11"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-11"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-6"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-6"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-6"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-11"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-5"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-5"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-5"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-5"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-11"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-6"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-11"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-11"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-11"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-471"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-471"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-11"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-11"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-472"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-472"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-11"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-473"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-473"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-9"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-291"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-291"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-474"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-474"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-11"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-6"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-17"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-292"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-292"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-475"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-475"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-17"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-293"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-293"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-476"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-476"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-17"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-294"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-294"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-477"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-477"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-17"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-295"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-295"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-478"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-478"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-17"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-296"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-296"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-479"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-479"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-9"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-297"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-297"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-480"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-480"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-19"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-481"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-481"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-17"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-482"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-482"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-17"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-298"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-298"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-483"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-483"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-11"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-11"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-11"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-6"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-17"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-299"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-299"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-17"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-17"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-300"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-300"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-484"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-484"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-6"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-6"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-6"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-6"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-6"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-6"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-6"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-6"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-6"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-6"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-6"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-6"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-6"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-6"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-6"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-6"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-6"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-6"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-6"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-6"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-6"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-6"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-6"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-6"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-6"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-6"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-6"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-12"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-18"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-301"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-301"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-485"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-485"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-26"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-486"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-486"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-27"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-12"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-12"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-12"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-18"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-302"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-302"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-487"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-487"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-9"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-12"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-18"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-303"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-303"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-488"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-488"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-9"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-304"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-304"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-489"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-489"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-26"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-490"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-490"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-27"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-491"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-491"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-26"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-492"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-492"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-27"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-26"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-493"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-493"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-27"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-494"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-494"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-12"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-17"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-495"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-495"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-18"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-496"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-496"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-12"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-12"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-15"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-12"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-18"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-305"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-305"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-497"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-497"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-18"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-306"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-306"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-498"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-498"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-26"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-499"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-499"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-27"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-4"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-12"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-12"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-6"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-12"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-12"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-12"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-12"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-12"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-12"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-6"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-6"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-6"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-6"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-12"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-12"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-12"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-12"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-500"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-500"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-12"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-6"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-6"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-12"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-12"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-501"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-501"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-12"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-9"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-307"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-307"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-502"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-502"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-18"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-308"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-308"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-503"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-503"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-18"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-309"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-309"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-504"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-504"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-9"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-310"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-310"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-505"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-505"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-18"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-311"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-311"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-506"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-506"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-9"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-312"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-312"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-507"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-507"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-18"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-313"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-313"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-508"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-508"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-18"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-314"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-314"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-509"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-509"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-20"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-510"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-510"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-21"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-511"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-511"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-18"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-512"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-512"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-18"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-315"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-315"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-513"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-513"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-12"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-12"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-12"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-18"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-316"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-316"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-18"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-9"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-514"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-514"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-9"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-9"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-317"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-317"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-515"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-515"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-18"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-318"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-318"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-516"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-516"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodercpspwithcost"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodercpspwithcost"}},[t._v("#")]),t._v(" MultiModeRCPSPWithCost")]),t._v(" "),a("p",[t._v("Multimode (classic) Resource project scheduling problem template with cost based on modes.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption and duration\nThe goal is to minimize the overall cost that is function of the mode chosen for each task")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-13"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-7"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-7"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-7"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-19"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-319"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-319"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-517"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-517"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-7"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-28"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-518"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-518"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-10"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-7"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-13"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-13"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-13"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-19"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-320"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-320"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-519"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-519"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-13"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-19"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-321"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-321"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-520"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-520"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-28"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-521"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-521"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-28"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-522"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-522"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-28"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-523"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-523"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-13"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-13"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-13"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-322"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-322"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-524"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-524"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-16"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-323"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-323"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-525"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-525"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-13"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-19"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-324"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-324"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-526"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-526"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-19"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-325"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-325"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-527"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-527"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-28"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-528"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-528"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-5"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-13"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-13"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-7"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-13"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-13"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-13"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-13"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-13"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-7"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-7"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-7"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-13"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-7"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-7"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-7"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-7"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-13"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-7"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-13"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-13"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-13"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-529"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-529"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-13"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-13"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-530"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-530"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-13"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-531"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-531"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-10"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-326"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-326"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-532"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-532"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-13"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-7"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-19"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-327"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-327"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-533"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-533"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-19"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-328"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-328"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-534"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-534"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-19"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-329"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-329"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-535"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-535"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-19"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-330"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-330"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-536"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-536"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-19"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-331"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-331"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-537"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-537"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-10"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-332"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-332"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-538"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-538"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-22"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-539"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-539"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-19"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-540"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-540"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-19"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-333"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-333"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-541"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-541"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-13"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-13"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-13"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-7"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-19"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-334"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-334"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-19"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-19"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-335"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-335"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-542"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-542"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-7"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-7"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-7"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-7"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-7"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-7"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-7"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-7"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-7"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-7"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-7"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-7"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-7"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-7"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-7"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-7"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-7"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-7"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-7"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-7"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-7"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-7"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-7"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-7"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-7"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-7"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-7"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-14"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-20"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-336"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-336"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-543"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-543"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-29"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-544"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-544"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-30"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-14"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-14"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-14"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-20"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-337"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-337"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-545"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-545"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-10"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-14"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-20"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-338"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-338"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-546"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-546"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-10"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-339"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-339"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-547"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-547"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-29"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-548"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-548"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-30"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-549"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-549"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-29"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-550"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-550"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-30"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-29"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-551"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-551"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-30"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-552"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-552"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-14"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-19"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-553"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-553"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-20"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-554"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-554"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-14"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-14"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-17"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-14"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-20"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-340"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-340"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-555"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-555"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-20"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-341"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-341"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-556"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-556"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-29"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-557"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-557"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-30"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-6"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-14"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-14"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-8"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-14"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-14"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-14"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-14"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-14"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-14"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-8"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-8"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-8"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-8"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-14"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-14"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-14"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-14"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-558"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-558"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-14"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-7"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-7"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-14"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-14"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-559"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-559"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-14"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-10"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-342"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-342"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-560"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-560"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-20"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-343"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-343"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-561"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-561"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-20"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-344"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-344"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-562"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-562"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-10"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-345"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-345"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-563"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-563"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-20"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-346"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-346"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-564"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-564"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-10"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-347"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-347"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-565"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-565"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-20"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-348"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-348"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-566"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-566"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-20"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-349"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-349"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-567"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-567"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-23"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-568"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-568"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-24"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-569"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-569"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-20"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-570"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-570"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-20"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-350"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-350"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-571"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-571"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-14"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-14"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-14"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-20"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-351"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-351"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-20"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-10"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-572"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-572"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-10"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-10"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-352"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-352"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-573"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-573"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-20"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-353"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-353"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-574"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-574"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodercpspcalendar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodercpspcalendar"}},[t._v("#")]),t._v(" MultiModeRCPSPCalendar")]),t._v(" "),a("p",[t._v("Multimode (classic) Resource project scheduling problem template with cost based on modes.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with variable availability (capacity)")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption and duration\nThe goal is to minimize the overall makespan")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-15"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-8"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-8"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-8"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-21"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-354"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-354"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-575"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-575"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-8"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-31"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-576"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-576"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-11"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-8"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-15"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-15"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-15"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-21"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-355"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-355"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-577"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-577"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-15"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-21"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-356"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-356"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-578"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-578"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-31"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-579"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-579"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-31"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-580"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-580"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-31"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-581"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-581"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-15"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-15"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-15"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-357"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-357"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-582"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-582"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-18"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-358"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-358"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-583"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-583"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-15"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-21"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-359"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-359"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-584"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-584"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-21"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-360"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-360"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-585"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-585"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-31"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-586"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-586"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-15"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-15"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-9"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-15"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-15"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-15"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-15"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-15"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-8"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-8"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-8"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-15"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-9"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-9"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-9"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-9"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-15"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-8"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-15"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-15"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-15"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-587"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-587"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-15"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-15"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-588"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-588"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-15"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-589"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-589"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-11"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-361"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-361"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-590"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-590"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-15"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-8"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-21"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-362"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-362"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-591"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-591"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-21"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-363"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-363"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-592"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-592"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-21"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-364"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-364"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-593"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-593"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-21"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-365"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-365"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-594"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-594"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-21"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-366"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-366"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-595"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-595"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-11"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-367"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-367"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-596"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-596"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-25"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-597"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-597"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-21"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-598"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-598"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-21"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-368"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-368"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-599"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-599"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-15"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-15"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-15"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-8"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-21"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-369"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-369"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-21"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-21"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-370"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-370"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-600"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-600"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-8"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-8"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-8"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-8"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-8"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-8"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-8"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-8"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-8"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-8"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-8"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-8"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-8"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-8"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-8"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-8"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-8"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-8"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-8"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-8"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-8"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-8"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-8"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-8"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-8"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-8"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-8"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-16"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-22"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-371"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-371"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-601"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-601"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-32"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-602"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-602"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-33"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-16"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-16"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-16"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-22"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-372"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-372"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-603"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-603"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-11"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-16"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-22"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-373"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-373"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-604"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-604"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-11"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-374"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-374"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-605"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-605"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-32"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-606"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-606"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-33"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-607"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-607"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-32"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-608"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-608"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-33"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-32"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-609"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-609"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-33"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-610"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-610"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-16"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-21"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-611"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-611"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-22"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-612"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-612"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-16"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-16"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-19"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-16"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-22"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-375"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-375"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-613"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-613"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-22"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-376"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-376"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-614"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-614"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-32"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-615"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-615"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-33"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-16"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-16"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-10"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-16"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-16"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-16"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-16"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-16"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-16"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-10"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-10"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-10"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-10"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-16"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-16"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-16"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-16"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-616"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-616"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-16"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-8"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-8"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-16"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-16"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-617"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-617"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-16"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-11"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-377"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-377"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-618"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-618"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-22"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-378"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-378"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-619"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-619"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-22"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-379"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-379"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-620"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-620"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-11"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-380"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-380"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-621"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-621"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-22"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-381"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-381"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-622"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-622"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-11"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-382"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-382"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-623"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-623"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-22"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-383"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-383"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-624"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-624"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-22"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-384"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-384"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-625"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-625"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-26"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-626"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-626"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-27"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-627"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-627"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-22"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-628"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-628"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-22"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-385"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-385"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-629"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-629"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-16"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-16"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-16"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-22"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-386"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-386"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-22"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-11"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-630"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-630"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-11"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-11"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-387"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-387"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-631"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-631"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-22"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-388"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-388"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-632"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-632"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodercpspcalendar-stochastic-durations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodercpspcalendar-stochastic-durations"}},[t._v("#")]),t._v(" MultiModeRCPSPCalendar_Stochastic_Durations")]),t._v(" "),a("p",[t._v("Multimode (classic) Resource project scheduling problem template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with variable availability (capacity)")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption and\na stochastic duration\nThe goal is to minimize the overall makespan")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-17"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-9"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-9"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-9"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-23"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-389"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-389"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-633"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-633"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-9"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-34"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-634"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-634"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-12"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-9"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-17"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-17"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-17"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-23"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-390"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-390"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-635"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-635"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-17"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-23"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-391"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-391"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-636"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-636"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-34"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-637"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-637"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-34"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-638"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-638"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-34"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-639"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-639"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-17"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-17"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-20"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-392"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-392"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-640"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-640"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-17"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-23"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-393"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-393"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-641"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-641"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-23"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-394"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-394"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-642"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-642"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-34"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-643"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-643"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-17"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-17"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-11"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-17"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-17"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-17"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-17"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-17"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-9"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-9"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-9"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-17"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-11"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-17"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-9"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-17"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-17"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-17"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-644"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-644"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-17"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-17"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-645"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-645"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-17"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-646"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-646"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-12"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-395"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-395"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-647"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-647"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-17"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-9"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-23"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-396"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-396"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-648"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-648"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-23"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-397"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-397"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-649"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-649"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-23"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-398"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-398"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-650"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-650"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-23"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-399"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-399"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-651"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-651"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-23"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-400"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-400"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-652"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-652"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-12"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-401"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-401"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-653"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-653"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-28"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-654"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-654"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-23"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-655"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-655"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-23"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-402"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-402"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-656"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-656"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-17"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-17"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-17"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-9"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-23"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-403"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-403"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-23"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-23"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-404"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-404"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-657"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-657"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-9"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-9"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-9"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-9"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-9"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-9"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-9"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-9"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-9"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-9"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-9"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-9"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-9"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-9"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-9"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-9"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-9"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-9"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-9"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-9"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-9"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-9"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-9"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-9"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-9"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-9"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-9"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-18"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-24"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-405"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-405"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-658"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-658"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-35"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-659"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-659"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-36"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-18"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-18"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-18"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-24"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-406"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-406"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-660"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-660"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-12"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-18"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-24"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-407"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-407"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-661"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-661"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-12"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-408"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-408"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-662"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-662"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-35"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-663"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-663"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-36"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-664"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-664"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-35"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-665"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-665"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-36"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-35"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-666"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-666"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-36"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-667"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-667"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-18"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-23"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-668"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-668"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-24"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-669"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-669"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-18"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-17"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-21"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-18"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-24"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-409"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-409"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-670"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-670"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-24"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-410"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-410"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-671"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-671"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-35"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-672"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-672"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-36"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-18"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-18"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-12"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-18"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-18"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-18"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-18"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-18"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-18"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-12"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the univariate Distribution of the duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-18"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-18"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-18"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-18"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-673"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-673"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-18"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-9"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-9"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-18"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-18"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-674"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-674"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-18"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-12"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-411"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-411"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-675"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-675"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-24"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-412"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-412"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-676"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-676"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-24"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-413"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-413"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-677"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-677"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-12"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-414"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-414"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-678"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-678"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-24"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-415"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-415"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-679"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-679"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-12"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-416"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-416"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-680"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-680"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-24"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-417"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-417"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-681"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-681"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-24"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-418"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-418"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-682"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-682"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-29"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-683"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-683"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-30"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-684"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-684"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-24"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-685"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-685"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-24"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-419"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-419"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-686"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-686"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-18"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-18"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-18"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying univariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-24"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-420"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-420"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-24"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-12"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-687"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-687"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-12"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-12"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-421"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-421"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-688"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-688"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-24"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-422"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-422"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-689"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-689"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodemultiskillrcpsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodemultiskillrcpsp"}},[t._v("#")]),t._v(" MultiModeMultiSkillRCPSP")]),t._v(" "),a("p",[t._v("Multimode multiskill Resource project scheduling problem template\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("resource can be unitary and have skills")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption,\ndeterministic duration and skills needed\nThe goal is to minimize the overall makespan, allocating unit resource to tasks fulfilling the skills requirement.")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-19"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-10"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-10"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-10"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-25"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-423"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-423"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-690"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-690"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-10"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-37"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-691"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-691"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-13"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-10"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-19"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-19"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-19"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-25"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-424"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-424"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-692"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-692"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-19"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-25"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-425"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-425"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-693"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-693"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-37"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-694"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-694"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-37"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-695"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-695"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-37"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-696"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-696"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-19"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-19"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-18"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-426"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-426"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-697"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-697"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-22"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-427"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-427"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-698"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-698"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-19"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-25"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-428"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-428"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-699"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-699"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-25"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-429"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-429"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-700"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-700"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-37"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-701"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-701"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-7"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-19"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-19"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-13"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-19"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-19"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-19"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-19"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-19"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-10"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-10"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-10"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-19"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-11"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-13"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-11"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-11"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-19"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-10"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-19"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-19"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-19"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-702"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-702"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-19"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-19"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-703"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-703"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-19"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-704"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-704"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-13"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-430"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-430"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-705"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-705"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-19"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-10"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-25"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-431"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-431"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-706"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-706"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-25"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-432"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-432"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-707"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-707"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-25"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-433"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-433"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-708"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-708"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-25"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-434"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-434"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-709"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-709"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-25"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-435"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-435"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-710"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-710"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-13"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-436"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-436"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-711"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-711"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-31"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-712"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-712"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-25"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-713"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-713"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-25"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-437"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-437"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-714"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-714"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-19"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-19"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-19"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-10"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-25"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-438"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-438"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-25"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-25"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-439"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-439"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-715"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-715"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-10"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-10"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-10"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-10"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-10"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-10"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-10"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-10"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-10"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-10"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-10"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-10"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-10"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-10"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-10"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-10"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-10"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-10"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-10"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-10"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-10"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-10"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-10"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-10"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-10"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-10"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-10"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-20"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-26"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-440"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-440"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-716"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-716"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-38"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-717"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-717"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-39"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-20"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-20"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-20"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-26"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-441"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-441"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-718"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-718"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-13"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-20"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-26"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-442"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-442"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-719"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-719"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-13"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-443"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-443"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-720"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-720"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-38"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-721"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-721"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-39"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-722"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-722"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-38"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-723"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-723"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-39"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-38"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-724"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-724"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-39"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-725"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-725"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-20"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-25"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-726"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-726"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-26"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-727"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-727"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-20"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-19"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-23"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-20"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-26"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-444"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-444"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-728"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-728"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-26"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-445"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-445"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-729"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-729"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-38"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-730"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-730"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-39"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-8"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-20"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-20"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-14"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-20"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-20"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-20"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-20"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-20"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-20"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-12"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-14"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-12"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-12"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-20"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-20"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-20"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-20"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-731"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-731"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-20"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-10"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-10"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-20"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-20"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-732"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-732"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-20"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-13"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-446"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-446"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-733"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-733"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-26"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-447"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-447"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-734"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-734"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-26"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-448"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-448"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-735"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-735"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-13"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-449"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-449"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-736"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-736"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-26"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-450"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-450"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-737"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-737"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-13"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-451"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-451"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-738"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-738"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-26"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-452"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-452"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-739"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-739"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-26"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-453"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-453"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-740"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-740"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-32"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-741"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-741"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-33"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-742"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-742"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-26"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-743"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-743"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-26"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-454"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-454"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-744"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-744"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-20"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-20"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-20"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-26"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-455"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-455"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-26"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-13"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-745"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-745"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-13"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-13"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-456"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-456"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-746"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-746"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-26"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-457"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-457"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-747"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-747"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodemultiskillrcpspcalendar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodemultiskillrcpspcalendar"}},[t._v("#")]),t._v(" MultiModeMultiSkillRCPSPCalendar")]),t._v(" "),a("p",[t._v("Multimode multiskill Resource project scheduling problem with resource variability template\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with variable availability")]),t._v(" "),a("li",[t._v("resource can be unitary and have skills")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption,\ndeterministic duration and skills needed\nThe goal is to minimize the overall makespan, allocating unit resource to tasks fulfilling the skills requirement.")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-21"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-11"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-11"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-11"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-27"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-458"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-458"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-748"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-748"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-11"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-40"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-749"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-749"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-14"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-11"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-21"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-21"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-21"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-27"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-459"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-459"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-750"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-750"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-21"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-27"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-460"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-460"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-751"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-751"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-40"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-752"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-752"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-40"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-753"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-753"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-40"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-754"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-754"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-21"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-21"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-20"}},[t._v("#")]),t._v(" get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-461"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-461"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-755"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-755"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The deterministic next state.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-24"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"DiscreteDistribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the discrete probability distribution of next state given a memory and action.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("In the Markovian case (memory only holds last state "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.061ex",height:"1.023ex",viewBox:"0 -442 469 452"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})])])])])]),t._v("), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function can\nbe mathematically represented by "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.292ex",height:"2.283ex",viewBox:"0 -759 4107.1 1009"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"msup",transform:"translate(1140, 0)"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1997.5, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2275.5, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2744.5, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3189.1, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3718.1, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(", where "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.94ex",height:"1.767ex",viewBox:"0 -759 857.5 781"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"msup"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"53",d:"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(613, 363) scale(0.707)"}},[a("path",{attrs:{"data-c":"2032",d:"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"}})])])])])])]),t._v(" is the next state random variable.")],1)]),t._v(" "),a("h4",{attrs:{id:"parameters-462"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-462"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-756"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-756"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The discrete probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-21"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-27"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-463"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-463"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-757"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-757"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-27"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-464"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-464"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-758"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-758"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-40"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-759"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-759"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-21"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-21"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-15"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-21"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-21"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-21"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-21"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-21"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-11"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-11"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-11"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-21"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-13"}},[t._v("#")]),t._v(" get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-15"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-13"}},[t._v("#")]),t._v(" get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-13"}},[t._v("#")]),t._v(" get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-21"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-11"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-21"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-21"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-21"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-760"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-760"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-21"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-21"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-761"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-761"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-21"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-762"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-762"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-14"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-465"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-465"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-763"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-763"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-21"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-11"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-27"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-466"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-466"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-764"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-764"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-27"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-467"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-467"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-765"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-765"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-27"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-468"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-468"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-766"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-766"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-27"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-469"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-469"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-767"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-767"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-27"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-470"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-470"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-768"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-768"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-14"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-471"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-471"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-769"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-769"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-34"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-770"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-770"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-27"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-771"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-771"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-27"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-472"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-472"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-772"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-772"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-21"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-21"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-21"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-11"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-27"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-473"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-473"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-27"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-27"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-474"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-474"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-773"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-773"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-11"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-11"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-11"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-11"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-11"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-11"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-11"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-11"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-11"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-11"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-11"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-11"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-11"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-11"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-11"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-11"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-11"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-11"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-11"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-11"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-11"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-11"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-11"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-11"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-11"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-11"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-11"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-22"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-28"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-475"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-475"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-774"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-774"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-41"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-775"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-775"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-42"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-22"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-22"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-22"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-28"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-476"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-476"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-776"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-776"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-14"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-22"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-28"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-477"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-477"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-777"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-777"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-14"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-478"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-478"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-778"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-778"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-41"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-779"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-779"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-42"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-780"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-780"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-41"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-781"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-781"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-42"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-41"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-782"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-782"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-42"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-783"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-783"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-22"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-27"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-784"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-784"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-28"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-785"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-785"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-22"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-21"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"DeterministicTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-25"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-22"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-28"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-479"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-479"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-786"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-786"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-28"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-480"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-480"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-787"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-787"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-41"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-788"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-788"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-42"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-22"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-22"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-16"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-22"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-22"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-22"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-22"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-22"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-22"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-14"}},[t._v("#")]),t._v(" _get_task_duration "),a("Badge",{attrs:{text:"DeterministicTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the fixed deterministic task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-16"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}]}}}),t._v(" "),a("p",[t._v("Return the Distribution of the duration of the given task in the given mode.\nBecause the duration is deterministic, the distribution always returns the same duration.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-lower-bound-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-lower-bound-14"}},[t._v("#")]),t._v(" _get_task_duration_lower_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_lower_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the lower bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-upper-bound-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-upper-bound-14"}},[t._v("#")]),t._v(" _get_task_duration_upper_bound "),a("Badge",{attrs:{text:"UncertainBoundedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_upper_bound",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the upper bound for the task duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-22"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-22"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-22"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-22"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-789"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-789"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-22"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-11"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-11"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-22"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-22"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-790"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-790"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-22"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-14"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-481"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-481"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-791"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-791"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-28"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-482"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-482"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-792"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-792"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-28"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-483"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-483"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-793"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-793"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-14"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-484"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-484"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-794"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-794"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-28"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-485"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-485"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-795"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-795"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-14"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-486"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-486"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-796"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-796"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-28"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-487"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-487"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-797"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-797"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-28"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-488"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-488"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-798"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-798"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-35"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-799"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-799"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-36"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-800"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-800"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-28"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-801"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-801"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-28"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-489"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-489"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-802"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-802"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-22"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-22"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-22"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-28"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-490"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-490"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-28"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-14"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-803"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-803"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-14"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-14"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-491"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-491"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-804"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-804"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-28"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-492"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-492"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-805"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-805"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"multimodercpsp-stochastic-durations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multimodercpsp-stochastic-durations"}},[t._v("#")]),t._v(" MultiModeRCPSP_Stochastic_Durations")]),t._v(" "),a("p",[t._v("Multimode Resource project scheduling problem with stochastic durations template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("a set of non-renewable resource (consumable)")]),t._v(" "),a("li",[t._v("task having several modes of execution, giving for each mode a deterministic resource consumption and\na stochastic duration\nThe goal is to minimize the overall expected makespan")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-23"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-12"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-12"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-12"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-29"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-493"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-493"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-806"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-806"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-12"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-43"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-807"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-807"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-15"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-12"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-23"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-23"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-23"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-29"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-494"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-494"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-808"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-808"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-23"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-29"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-495"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-495"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-809"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-809"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-43"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-810"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-810"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-43"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-811"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-811"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-43"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-812"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-812"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-23"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-23"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-26"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-496"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-496"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-813"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-813"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-23"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-29"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-497"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-497"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-814"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-814"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-29"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-498"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-498"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-815"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-815"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-43"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-816"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-816"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-9"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-23"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-23"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-17"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-23"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-23"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-23"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-23"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-23"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-12"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-12"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-12"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-23"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-17"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-23"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-12"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-23"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-23"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-23"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-817"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-817"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-23"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-23"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-818"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-818"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-23"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-819"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-819"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-15"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-499"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-499"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-820"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-820"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-23"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-12"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-29"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-500"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-500"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-821"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-821"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-29"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-501"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-501"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-822"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-822"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-29"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-502"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-502"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-823"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-823"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-29"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-503"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-503"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-824"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-824"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-29"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-504"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-504"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-825"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-825"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-15"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-505"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-505"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-826"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-826"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-37"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-37"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-827"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-827"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-29"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-828"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-828"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-29"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-506"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-506"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-829"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-829"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-23"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-23"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-23"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-12"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-29"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-507"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-507"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-29"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-29"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-508"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-508"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-830"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-830"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-12"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-12"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-12"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-12"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-12"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-12"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-12"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-12"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-12"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-12"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-12"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-12"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-12"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-12"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-12"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-12"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-12"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-12"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-12"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-12"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-12"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-12"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-12"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-12"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-12"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-12"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-12"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-24"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-30"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-509"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-509"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-831"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-831"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-44"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-832"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-832"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-45"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-24"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-24"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-24"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-30"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-510"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-510"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-833"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-833"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-15"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-24"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-30"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-511"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-511"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-834"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-834"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-15"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-512"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-512"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-835"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-835"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-44"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-836"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-836"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-45"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-837"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-837"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-44"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-838"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-838"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-45"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-44"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-839"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-839"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-45"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-840"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-840"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-24"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-29"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-841"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-841"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-30"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-842"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-842"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-24"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-22"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-27"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-24"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-30"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-513"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-513"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-843"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-843"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-30"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-514"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-514"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-844"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-844"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-44"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-845"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-845"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-45"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-10"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-24"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-24"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-18"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-24"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-24"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-24"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-24"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-24"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-24"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-18"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the univariate Distribution of the duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-24"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-24"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-24"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-24"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-846"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-846"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-24"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-12"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-12"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: {\n1: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1}),\n2: ConstantModeConsumption({'rt_1': 0, 'rt_2': 3, 'ru_1': 1}),\n}\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: {\n1: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]}),\n2: VaryingModeConsumption({'rt_1': [1,1,1,1,2,2,2], 'rt_2': [0,0,0,0,0,0,0], 'ru_1': [1,1,1,1,1,1,1]}),\n}\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-24"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-24"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-847"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-847"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-24"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-15"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-515"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-515"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-848"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-848"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-30"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-516"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-516"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-849"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-849"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-30"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-517"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-517"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-850"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-850"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-15"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-518"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-518"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-851"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-851"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-30"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-519"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-519"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-852"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-852"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-15"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-520"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-520"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-853"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-853"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-30"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-521"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-521"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-854"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-854"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-30"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-522"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-522"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-855"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-855"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-38"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-38"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-856"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-856"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-39"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-39"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-857"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-857"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-30"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-858"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-858"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-30"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-523"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-523"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-859"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-859"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-24"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-24"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-24"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying univariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-30"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-524"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-524"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-30"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-15"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-860"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-860"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-15"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-15"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-525"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-525"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-861"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-861"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-30"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-526"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-526"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-862"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-862"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"singlemodercpsp-stochastic-durations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singlemodercpsp-stochastic-durations"}},[t._v("#")]),t._v(" SingleModeRCPSP_Stochastic_Durations")]),t._v(" "),a("p",[t._v("Resource project scheduling problem template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("task having a deterministic resource consumption and a stochastic duration\nThe goal is to minimize the overall expected makespan")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-25"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-13"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-13"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-13"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-31"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-527"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-527"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-863"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-863"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-13"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-46"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-864"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-864"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-16"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-13"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-25"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-25"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-25"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-31"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-528"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-528"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-865"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-865"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-25"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-31"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-529"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-529"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-866"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-866"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-46"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-867"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-867"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-46"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-868"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-868"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-46"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-869"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-869"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-25"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-25"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-28"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-530"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-530"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-870"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-870"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-25"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-31"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-531"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-531"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-871"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-871"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-31"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-532"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-532"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-872"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-872"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-46"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-46"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-873"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-873"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-11"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-25"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-25"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-19"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-25"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-25"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-25"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-25"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-25"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-13"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-13"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-13"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-25"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-19"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-25"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-13"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-25"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-25"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-25"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-874"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-874"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-25"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-25"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-875"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-875"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-25"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-876"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-876"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-16"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-533"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-533"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-877"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-877"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-25"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-13"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-31"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-534"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-534"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-878"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-878"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-31"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-535"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-535"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-879"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-879"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-31"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-536"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-536"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-880"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-880"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-31"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-537"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-537"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-881"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-881"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-31"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-538"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-538"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-882"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-882"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-16"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-539"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-539"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-883"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-883"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-40"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-40"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-884"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-884"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-31"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-885"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-885"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-31"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-540"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-540"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-886"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-886"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-25"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-25"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-25"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-13"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-31"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-541"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-541"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-31"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-31"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-542"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-542"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-887"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-887"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-13"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-13"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-13"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-13"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-13"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-13"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-13"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-13"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-13"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-13"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-13"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-13"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-13"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-13"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-13"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-13"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-13"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-13"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-13"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-13"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-13"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-13"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-13"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-13"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-13"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-13"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-13"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-26"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-32"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-543"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-543"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-888"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-888"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-47"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-889"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-889"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-48"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-26"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-26"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-26"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-32"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-544"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-544"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-890"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-890"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-16"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-26"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-32"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-545"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-545"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-891"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-891"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-16"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-546"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-546"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-892"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-892"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-47"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-893"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-893"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-48"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-894"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-894"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-47"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-895"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-895"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-48"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-47"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-896"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-896"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-48"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-897"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-897"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-26"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-31"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-898"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-898"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-32"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-899"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-899"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-26"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-23"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-29"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-26"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-32"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-547"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-547"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-900"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-900"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-32"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-548"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-548"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-901"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-901"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-47"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-47"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-902"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-902"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-48"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-48"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-12"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-26"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-26"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-20"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-26"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-26"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-26"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-26"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-26"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-26"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-20"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the univariate Distribution of the duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-26"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-26"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-26"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-26"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-903"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-903"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-26"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-13"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-mode-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-mode-3"}},[t._v("#")]),t._v(" _get_tasks_mode "),a("Badge",{attrs:{text:"SingleMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_mode",sig:{params:[{name:"self"}],return:"Dict[int, ModeConsumption]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is a ModeConsumption object defining\nthe resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1})\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]})\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-13"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-26"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-26"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-904"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-904"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-26"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-16"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-549"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-549"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-905"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-905"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-32"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-550"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-550"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-906"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-906"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-32"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-551"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-551"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-907"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-907"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-16"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-552"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-552"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-908"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-908"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-32"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-553"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-553"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-909"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-909"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-16"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-554"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-554"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-910"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-910"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-32"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-555"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-555"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-911"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-911"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-32"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-556"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-556"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-912"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-912"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-41"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-41"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-913"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-913"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-42"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-42"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-914"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-914"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-32"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-915"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-915"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-32"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-557"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-557"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-916"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-916"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-26"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-26"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-26"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying univariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-32"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-558"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-558"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-32"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-16"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-917"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-917"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-16"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-16"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-559"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-559"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-918"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-918"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-32"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-560"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-560"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-919"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-919"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"singlemodercpsp-stochastic-durations-withconditionaltasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singlemodercpsp-stochastic-durations-withconditionaltasks"}},[t._v("#")]),t._v(" SingleModeRCPSP_Stochastic_Durations_WithConditionalTasks")]),t._v(" "),a("p",[t._v("Resource project scheduling problem with stochastic duration and conditional tasks template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("task having a deterministic resource consumption and a stochastic duration given as a distribution")]),t._v(" "),a("li",[t._v("based on duration of tasks, some optional tasks have to be executed.\nThe goal is to minimize the overall expected makespan")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-27"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-14"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-14"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-14"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-33"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-561"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-561"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-920"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-920"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-14"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-49"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-921"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-921"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-17"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-14"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-27"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-27"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-27"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-33"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-562"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-562"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-922"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-922"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-27"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-33"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-563"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-563"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-923"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-923"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-49"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-924"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-924"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-49"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-925"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-925"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-49"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-926"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-926"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-27"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-27"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-30"}},[t._v("#")]),t._v(" get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of next state given a memory and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-564"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-564"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-927"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-927"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of next state.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-27"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-33"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-565"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-565"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-928"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-928"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-33"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-566"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-566"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-929"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-929"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-49"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-49"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-930"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-930"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-13"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-27"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-27"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-21"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-27"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-27"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-27"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-27"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-27"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-14"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-14"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-14"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-27"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-21"}},[t._v("#")]),t._v(" get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the multivariate Distribution of the duration of the given task in the given mode.\nMultivariate seetings need to be provided.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-27"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-14"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-27"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-27"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-27"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-931"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-931"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-27"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-27"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-932"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-932"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-27"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-933"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-933"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-transition-value-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-transition-value-17"}},[t._v("#")]),t._v(" get_transition_value "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_transition_value",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_agent[Value[D.T_value]]"}}}),t._v(" "),a("p",[t._v("Get the value (reward or cost) of a transition.")]),t._v(" "),a("p",[t._v("The transition to consider is defined by the function parameters.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" to return\nFalse. This information can then be exploited by solvers to avoid computing next state to evaluate a\ntransition value (more efficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-567"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-567"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-934"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-934"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition value (reward or cost).")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-27"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-14"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-33"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-568"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-568"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-935"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-935"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-33"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-569"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-569"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-936"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-936"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-33"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-570"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-570"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-937"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-937"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-33"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-571"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-571"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-938"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-938"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-33"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-572"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-572"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-939"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-939"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-terminal-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-terminal-17"}},[t._v("#")]),t._v(" is_terminal "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_terminal",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether a state is terminal.")]),t._v(" "),a("p",[t._v("A terminal state is a state with no outgoing transition (except to itself with value 0).")]),t._v(" "),a("h4",{attrs:{id:"parameters-573"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-573"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-940"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-940"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the state is terminal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-43"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-43"}},[t._v("#")]),t._v(" is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions.is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-941"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-941"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-33"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-942"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-942"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-33"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-574"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-574"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-943"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-943"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-27"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-27"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-27"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying multiivariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-14"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-33"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-575"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-575"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-33"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-33"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-576"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-576"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-944"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-944"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-14"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-14"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-14"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-14"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-14"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-14"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-14"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-14"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-14"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-14"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-14"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-14"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-14"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-14"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-14"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-14"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-14"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-14"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-14"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-14"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-14"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-14"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-14"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-14"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-14"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-14"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-14"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-28"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-34"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-577"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-577"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-945"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-945"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-50"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-946"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-946"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-51"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-28"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-28"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-28"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-34"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-578"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-578"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-947"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-947"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-17"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-28"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-34"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-579"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-579"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-948"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-948"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-17"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-580"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-580"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-949"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-949"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-50"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-950"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-950"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-51"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-951"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-951"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-50"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-952"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-952"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-51"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-50"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-953"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-953"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-51"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-954"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-954"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-28"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-33"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-33"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-955"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-955"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-34"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-956"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-956"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-28"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-24"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-31"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-31"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-28"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-34"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-581"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-581"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-957"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-957"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-34"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-582"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-582"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-958"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-958"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-50"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-50"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-959"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-959"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-51"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-51"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-14"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-28"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-28"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-22"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-28"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-28"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-28"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-28"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-28"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-28"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-duration-distribution-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-duration-distribution-22"}},[t._v("#")]),t._v(" _get_task_duration_distribution "),a("Badge",{attrs:{text:"UncertainMultivariateTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_duration_distribution",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"},{name:"multivariate_settings",default:"None",annotation:"Optional[Dict[str, int]]"}],return:"Distribution"}}}),t._v(" "),a("p",[t._v("Return the univariate Distribution of the duration of the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-28"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-28"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-28"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-28"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-960"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-960"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-28"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-14"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-mode-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-mode-4"}},[t._v("#")]),t._v(" _get_tasks_mode "),a("Badge",{attrs:{text:"SingleMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_mode",sig:{params:[{name:"self"}],return:"Dict[int, ModeConsumption]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is a ModeConsumption object defining\nthe resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1})\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]})\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-14"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-28"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-28"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-961"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-961"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-28"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-17"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-583"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-583"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-962"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-962"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-34"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-584"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-584"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-963"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-963"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-34"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-585"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-585"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-964"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-964"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-17"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-586"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-586"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-965"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-965"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-34"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-587"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-587"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-966"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-966"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-17"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-588"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-588"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-967"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-967"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-34"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-589"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-589"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-968"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-968"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-34"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-590"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-590"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-969"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-969"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-44"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-44"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state_()")]),t._v(" the first time and automatically\ncaches its value to make future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-970"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-970"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-transition-value-dependent-on-next-state-45"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-transition-value-dependent-on-next-state-45"}},[t._v("#")]),t._v(" _is_transition_value_dependent_on_next_state_ "),a("Badge",{attrs:{text:"UncertainTransitions",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_transition_value_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether _get_transition_value() requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default\nfrom "),a("code",[t._v("UncertainTransitions._is_transition_value_dependent_on_next_state()")]),t._v(", the difference being that the result\nis not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-971"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-971"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the transition value computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-34"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-972"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-972"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-34"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-591"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-591"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-973"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-973"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-28"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-28"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-28"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode,\nsampled from the underlying univariate distribution.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-34"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-592"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-592"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-34"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-17"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-974"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-974"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-17"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-17"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-593"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-593"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-975"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-975"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-34"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-34"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-594"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-594"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-976"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-976"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h2",{attrs:{id:"singlemodercpsp-simulated-stochastic-durations-withconditionaltasks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singlemodercpsp-simulated-stochastic-durations-withconditionaltasks"}},[t._v("#")]),t._v(" SingleModeRCPSP_Simulated_Stochastic_Durations_WithConditionalTasks")]),t._v(" "),a("p",[t._v("Resource project scheduling problem with stochastic duration and conditional tasks template.\nIt consists in :")]),t._v(" "),a("ul",[a("li",[t._v("a deterministic scheduling problem with precedence constraint between task")]),t._v(" "),a("li",[t._v("a set of renewable resource with constant availability (capacity)")]),t._v(" "),a("li",[t._v("task having a deterministic resource consumption and a stochastic duration that is simulated as blackbox")]),t._v(" "),a("li",[t._v("based on duration of tasks, some optional tasks have to be executed.\nThe goal is to minimize the overall expected makespan")])]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-29"}},[t._v("#")]),t._v(" add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"all-tasks-possible-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all-tasks-possible-15"}},[t._v("#")]),t._v(" all_tasks_possible "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"all_tasks_possible",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return a True is for each task there is at least one mode in which the task can be executed, given the\nresource configuration in the state provided as argument. Returns False otherwise.\nIf this function returns False, the scheduling problem is unsolvable from this state.\nThis is to cope with the use of non-renable resources that may lead to state from which a\ntask will not be possible anymore.")]),t._v(" "),a("h3",{attrs:{id:"check-if-action-can-be-started-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-action-can-be-started-15"}},[t._v("#")]),t._v(" check_if_action_can_be_started "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_if_action_can_be_started",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}],return:"Tuple[bool, Dict[str, int]]"}}}),t._v(" "),a("p",[t._v("Check if a start or resume action can be applied. It returns a boolean and a dictionary of resources to use.")]),t._v(" "),a("h3",{attrs:{id:"check-unique-resource-names-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-unique-resource-names-15"}},[t._v("#")]),t._v(" check_unique_resource_names "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_unique_resource_names",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return True if there are no duplicates in resource names across both resource types\nand resource units name lists.")]),t._v(" "),a("h3",{attrs:{id:"check-value-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-35"}},[t._v("#")]),t._v(" check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-595"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-595"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-977"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-977"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"find-one-ressource-to-do-one-task-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-one-ressource-to-do-one-task-15"}},[t._v("#")]),t._v(" find_one_ressource_to_do_one_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"find_one_ressource_to_do_one_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("For the common case when it is possible to do the task by one resource unit.\nFor general case, it might just return no possible ressource unit.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-52"}},[t._v("#")]),t._v(" get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-978"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-978"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-agents-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-agents-18"}},[t._v("#")]),t._v(" get_agents "),a("Badge",{attrs:{text:"MultiAgent",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_agents",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a singleton for single agent domains.")]),t._v(" "),a("p",[t._v("We must be here consistent with "),a("code",[t._v("skdecide.core.autocast()")]),t._v(' which transforms a single agent domain\ninto a multi agents domain whose only agent has the id "agent".')]),t._v(" "),a("h3",{attrs:{id:"get-all-condition-items-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-condition-items-15"}},[t._v("#")]),t._v(" get_all_condition_items "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_condition_items",sig:{params:[{name:"self"}],return:"Enum"}}}),t._v(" "),a("p",[t._v("Return an Enum with all the elements that can be used to define a condition.")]),t._v(" "),a("p",[t._v("Example:\nreturn\nConditionElementsExample(Enum):\nOK = 0\nNC_PART_1_OPERATION_1 = 1\nNC_PART_1_OPERATION_2 = 2\nNC_PART_2_OPERATION_1 = 3\nNC_PART_2_OPERATION_2 = 4\nHARDWARE_ISSUE_MACHINE_A = 5\nHARDWARE_ISSUE_MACHINE_B = 6")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-29"}},[t._v("#")]),t._v(" get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-29"}},[t._v("#")]),t._v(" get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, Dict[str, Any]]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-29"}},[t._v("#")]),t._v(" get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-35"}},[t._v("#")]),t._v(" get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-596"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-596"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-979"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-979"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-29"}},[t._v("#")]),t._v(" get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-35"}},[t._v("#")]),t._v(" get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-597"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-597"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-980"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-980"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-52"}},[t._v("#")]),t._v(" get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals.get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches its\nvalue to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-981"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-981"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-52"}},[t._v("#")]),t._v(" get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized.get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-982"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-982"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-52"}},[t._v("#")]),t._v(" get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized.get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-983"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-983"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-29"}},[t._v("#")]),t._v(" get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-29"}},[t._v("#")]),t._v(" get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-29"}},[t._v("#")]),t._v(" get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-35"}},[t._v("#")]),t._v(" get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-598"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-598"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-984"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-984"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-35"}},[t._v("#")]),t._v(" get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-599"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-599"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-985"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-985"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-52"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-52"}},[t._v("#")]),t._v(" get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-986"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-986"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-15"}},[t._v("#")]),t._v(" get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-29"}},[t._v("#")]),t._v(" get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-29"}},[t._v("#")]),t._v(" get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-23"}},[t._v("#")]),t._v(" get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-29"}},[t._v("#")]),t._v(" get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-29"}},[t._v("#")]),t._v(" get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-29"}},[t._v("#")]),t._v(" get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-29"}},[t._v("#")]),t._v(" get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-29"}},[t._v("#")]),t._v(" get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-names-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-names-15"}},[t._v("#")]),t._v(" get_skills_names "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_names",sig:{params:[{name:"self"}],return:"Set[str]"}}}),t._v(" "),a("p",[t._v("Return a list of all skill names as a list of str. Skill names are defined in the 2 dictionaries returned\nby the get_all_resources_skills and get_all_tasks_skills functions.")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-resource-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-resource-15"}},[t._v("#")]),t._v(" get_skills_of_resource "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skills of a given resource")]),t._v(" "),a("h3",{attrs:{id:"get-skills-of-task-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-skills-of-task-15"}},[t._v("#")]),t._v(" get_skills_of_task "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_skills_of_task",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",annotation:"int"}],return:"Dict[str, Any]"}}}),t._v(" "),a("p",[t._v("Return the skill requirements for a given task")]),t._v(" "),a("h3",{attrs:{id:"get-successors-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-29"}},[t._v("#")]),t._v(" get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-29"}},[t._v("#")]),t._v(" get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-on-completion-added-conditions-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-on-completion-added-conditions-15"}},[t._v("#")]),t._v(" get_task_on_completion_added_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_on_completion_added_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[Distribution]]"}}}),t._v(" "),a("p",[t._v("Return a dict of list. The key of the dict is the task id and each list is composed of a list of tuples.\nEach tuple contains the probability (first item in tuple) that the conditionElement (second item in tuple)\nis True. The probabilities in the inner list should sum up to 1. The dictionary should only contains the keys\nof tasks that can create conditions.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n12:\n[\nDiscreteDistribution([(ConditionElementsExample.NC_PART_1_OPERATION_1, 0.1), (ConditionElementsExample.OK, 0.9)]),\nDiscreteDistribution([(ConditionElementsExample.HARDWARE_ISSUE_MACHINE_A, 0.05), ('paper', 0.1), (ConditionElementsExample.OK, 0.95)])\n]\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-29"}},[t._v("#")]),t._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-29"}},[t._v("#")]),t._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-29"}},[t._v("#")]),t._v(" get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-987"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-987"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-29"}},[t._v("#")]),t._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-29"}},[t._v("#")]),t._v(" get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("p",[t._v("e.g.\n{\n12:{\n15: TimeLag(5, 10),\n16: TimeLag(5, 20),\n17: MinimumOnlyTimeLag(5),\n18: MaximumOnlyTimeLag(15),\n}\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-988"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-988"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeLag objects.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-29"}},[t._v("#")]),t._v(" get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a TimeWindow object.\nNote that the max time horizon needs to be provided to the TimeWindow constructors\ne.g.\n{\n1: TimeWindow(10, 15, 20, 30, self.get_max_horizon())\n2: EmptyTimeWindow(self.get_max_horizon())\n3: EndTimeWindow(20, 25, self.get_max_horizon())\n4: EndBeforeOnlyTimeWindow(40, self.get_max_horizon())\n}")]),t._v(" "),a("h4",{attrs:{id:"returns-989"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-989"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-29"}},[t._v("#")]),t._v(" get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"initialize-domain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize-domain-15"}},[t._v("#")]),t._v(" initialize_domain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"initialize_domain",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Initialize a scheduling domain. This function needs to be called when instantiating a scheduling domain.")]),t._v(" "),a("h3",{attrs:{id:"is-action-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-35"}},[t._v("#")]),t._v(" is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events.get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-600"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-600"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-990"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-990"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-35"}},[t._v("#")]),t._v(" is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-601"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-601"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-991"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-991"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-35"}},[t._v("#")]),t._v(" is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events.is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead of\nthe memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-602"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-602"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-992"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-992"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-35"}},[t._v("#")]),t._v(" is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals.get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-603"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-603"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-993"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-993"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-35"}},[t._v("#")]),t._v(" is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable.get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-604"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-604"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-994"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-994"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-35"}},[t._v("#")]),t._v(" reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable.reset()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Initializable._reset()")]),t._v("\n(which returns an initial state). The boilerplate code automatically stores the initial state into the "),a("code",[t._v("_memory")]),t._v("\nattribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-995"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-995"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-35"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation.sample()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Simulation._sample()")]),t._v("\n(which returns a transition outcome). The boilerplate code automatically samples an observation corresponding to\nthe sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation.sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-605"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-605"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-996"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-996"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-29"}},[t._v("#")]),t._v(" sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-29"}},[t._v("#")]),t._v(" sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-29"}},[t._v("#")]),t._v(" sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample, store and return task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-inplace-environment-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-inplace-environment-15"}},[t._v("#")]),t._v(" set_inplace_environment "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_inplace_environment",sig:{params:[{name:"self"},{name:"inplace_environment",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Activate or not the fact that the simulator modifies the given state inplace or create a copy before.\nThe inplace version is several times faster but will lead to bugs in graph search solver.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-35"}},[t._v("#")]),t._v(" set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with successive '),a("code",[t._v("Environment.step()")]),t._v("\ncalls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-606"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-606"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-35"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"step-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-35"}},[t._v("#")]),t._v(" step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment.step()")]),t._v(" provides some boilerplate code and internally calls "),a("code",[t._v("Environment._step()")]),t._v(" (which\nreturns a transition outcome). The boilerplate code automatically stores next state into the "),a("code",[t._v("_memory")]),t._v(" attribute\nand samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment.step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment.step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable.reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-607"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-607"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-997"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-997"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-15"}},[t._v("#")]),t._v(" update_complete_dummy_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly started tasks whose duration is 0 from ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-simulation-15"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-dummy-tasks-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-dummy-tasks-uncertain-15"}},[t._v("#")]),t._v(" update_complete_dummy_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_dummy_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly started tasks whose duration is 0\nfrom ongoing to complete.")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-15"}},[t._v("#")]),t._v(" update_complete_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-simulation-15"}},[t._v("#")]),t._v(" update_complete_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of newly completed tasks in the state from ongoing to complete\nand update resource availability. This function will also log in task_details the time it was complete")]),t._v(" "),a("h3",{attrs:{id:"update-complete-tasks-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-complete-tasks-uncertain-15"}},[t._v("#")]),t._v(" update_complete_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_complete_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of newly completed tasks in the state from ongoing\nto complete, update resource availability and update on-completion conditions.\nThis function will also log in task_details the time it was complete.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-15"}},[t._v("#")]),t._v(" update_conditional_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-simulation-15"}},[t._v("#")]),t._v(" update_conditional_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update remaining tasks by checking conditions and potentially\nadding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-conditional-tasks-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-conditional-tasks-uncertain-15"}},[t._v("#")]),t._v(" update_conditional_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_conditional_tasks_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update remaining tasks by checking conditions and potentially adding conditional tasks.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-15"}},[t._v("#")]),t._v(" update_pause_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from ongoing to paused if specified in the action\nand update resource availability. This function will also log in task_details the time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-simulation-15"}},[t._v("#")]),t._v(" update_pause_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-pause-tasks-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-pause-tasks-uncertain-15"}},[t._v("#")]),t._v(" update_pause_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_pause_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from ongoing to paused if\nspecified in the action and update resource availability. This function will also log in task_details\nthe time it was paused.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-15"}},[t._v("#")]),t._v(" update_progress "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("Update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-simulation-15"}},[t._v("#")]),t._v(" update_progress_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"}]}}}),t._v(" "),a("p",[t._v("In a simulation scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-progress-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-progress-uncertain-15"}},[t._v("#")]),t._v(" update_progress_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_progress_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the progress of all ongoing tasks in the state.")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-15"}},[t._v("#")]),t._v(" update_resource_availability "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-simulation-15"}},[t._v("#")]),t._v(" update_resource_availability_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update resource availability for next time step.\nThis should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resource-availability-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-availability-uncertain-15"}},[t._v("#")]),t._v(" update_resource_availability_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resource_availability_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update resource availability for next time step. This should be called after update_time().")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-15"}},[t._v("#")]),t._v(" update_resume_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from paused to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was resumed")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-simulation-15"}},[t._v("#")]),t._v(" update_resume_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulationn scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-resume-tasks-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-resume-tasks-uncertain-15"}},[t._v("#")]),t._v(" update_resume_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_resume_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from paused to ongoing if specified\nin the action and update resource availability. This function will also log in task_details the time it was\nresumed.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-15"}},[t._v("#")]),t._v(" update_start_tasks "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the status of a task from remaining to ongoing if specified in the action\nand update resource availability. This function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-simulation-15"}},[t._v("#")]),t._v(" update_start_tasks_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the status of a task from remaining to ongoing if\nspecified in the action and update resource availability. This function will also log in task_details the\ntime it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-start-tasks-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-start-tasks-uncertain-15"}},[t._v("#")]),t._v(" update_start_tasks_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_start_tasks_uncertain",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In an uncertain scheduling environment, update the status of a task from remaining to ongoing\nif specified in the action and update resource availability.\nThis function returns a DsicreteDistribution of State.\nThis function will also log in task_details the time it was started.")]),t._v(" "),a("h3",{attrs:{id:"update-time-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-15"}},[t._v("#")]),t._v(" update_time "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-simulation-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-simulation-15"}},[t._v("#")]),t._v(" update_time_simulation "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_simulation",sig:{params:[{name:"self"},{name:"state",annotation:"State"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("In a simulated scheduling environment, update the time of the state if the time_progress attribute of the\ngiven EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"update-time-uncertain-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-time-uncertain-15"}},[t._v("#")]),t._v(" update_time_uncertain "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"update_time_uncertain",sig:{params:[{name:"self"},{name:"states",annotation:"DiscreteDistribution[State]"},{name:"action",annotation:"SchedulingAction"}]}}}),t._v(" "),a("p",[t._v("Update the time of the state if the time_progress attribute of the given EnumerableAction is True.")]),t._v(" "),a("h3",{attrs:{id:"add-to-current-conditions-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-current-conditions-30"}},[t._v("#")]),t._v(" _add_to_current_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_add_to_current_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"state"}]}}}),t._v(" "),a("p",[t._v("Samples completion conditions for a given task and add these conditions to the list of conditions in the\ngiven state. This function should be called when a task complete.")]),t._v(" "),a("h3",{attrs:{id:"check-value-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-value-36"}},[t._v("#")]),t._v(" _check_value "),a("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"Value[D.T_value]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that a value is compliant with its reward specification.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-608"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-608"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The value to check.")])]),t._v(" "),a("h4",{attrs:{id:"returns-998"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-998"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the value is compliant (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-53"}},[t._v("#")]),t._v(" _get_action_space "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain action space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_action_space()")]),t._v(" internally calls "),a("code",[t._v("Events._get_action_space_()")]),t._v(" the first time and\nautomatically caches its value to make future calls more efficient (since the action space is assumed to be\nconstant).")]),t._v(" "),a("h4",{attrs:{id:"returns-999"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-999"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The action space.")]),t._v(" "),a("h3",{attrs:{id:"get-action-space-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-action-space-54"}},[t._v("#")]),t._v(" _get_action_space_ "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_action_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-all-resources-skills-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-resources-skills-30"}},[t._v("#")]),t._v(" _get_all_resources_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_resources_skills",sig:{params:[{name:"self"}],return:"Dict[str, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a resource type or resource unit\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {unit: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-tasks-skills-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-tasks-skills-30"}},[t._v("#")]),t._v(" _get_all_tasks_skills "),a("Badge",{attrs:{text:"WithResourceSkills",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_tasks_skills",sig:{params:[{name:"self"}],return:"Dict[int, Dict[str, Any]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the name of a task\nand the second key is the name of a skill. The value defines the details of the skill.\nE.g. {task: {skill: (detail of skill)}}")]),t._v(" "),a("h3",{attrs:{id:"get-all-unconditional-tasks-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-all-unconditional-tasks-30"}},[t._v("#")]),t._v(" _get_all_unconditional_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_all_unconditional_tasks",sig:{params:[{name:"self"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids for which there are no conditions. These tasks are to be considered at\nthe start of a project (i.e. in the initial state).")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-36"}},[t._v("#")]),t._v(" _get_applicable_actions "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of applicable actions in the given memory (state or history), or in\nthe internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_applicable_actions()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-609"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-609"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1000"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1000"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of applicable actions.")]),t._v(" "),a("h3",{attrs:{id:"get-applicable-actions-from-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-applicable-actions-from-18"}},[t._v("#")]),t._v(" _get_applicable_actions_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_applicable_actions_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"D.T_agent[Space[D.T_event]]"}}}),t._v(" "),a("p",[t._v("Returns the action space from a state.\nTODO : think about a way to avoid the instaceof usage.")]),t._v(" "),a("h3",{attrs:{id:"get-available-tasks-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-available-tasks-30"}},[t._v("#")]),t._v(" _get_available_tasks "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_available_tasks",sig:{params:[{name:"self"},{name:"state"}],return:"Set[int]"}}}),t._v(" "),a("p",[t._v("Returns the set of all task ids that can be considered under the conditions defined in the given state.\nNote that the set will contains all ids for all tasks in the domain that meet the conditions, that is tasks\nthat are remaining, or that have been completed, paused or started / resumed.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-36"}},[t._v("#")]),t._v(" _get_enabled_events "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events",sig:{params:[{name:"self"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory), or in the internal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._get_enabled_events()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-610"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-610"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1001"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1001"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-enabled-events-from-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-enabled-events-from-18"}},[t._v("#")]),t._v(" _get_enabled_events_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_enabled_events_from",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"Space[D.T_event]"}}}),t._v(" "),a("p",[t._v("Get the space (finite or infinite set) of enabled uncontrollable events in the given memory (state or\nhistory).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._get_enabled_events()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("h4",{attrs:{id:"parameters-611"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-611"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1002"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1002"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The space of enabled events.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-53"}},[t._v("#")]),t._v(" _get_goals "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Goals._get_goals()")]),t._v(" internally calls "),a("code",[t._v("Goals._get_goals_()")]),t._v(" the first time and automatically caches\nits value to make future calls more efficient (since the goals space is assumed to be constant).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Goal states are assumed to be fully observable (i.e. observation = state) so that there is never uncertainty\nabout whether the goal has been reached or not. This assumption guarantees that any policy that does not\nreach the goal with certainty incurs in infinite expected cost. - "),a("em",[t._v("Geffner, 2013: A Concise Introduction to\nModels and Methods for Automated Planning")])])]),t._v(" "),a("h4",{attrs:{id:"returns-1003"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1003"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-goals-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-goals-54"}},[t._v("#")]),t._v(" _get_goals_ "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_goals_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the domain goals space (finite or infinite set).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Goals._get_goals()")]),t._v(", the difference being that the result is\nnot cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1004"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1004"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The goals space.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-53"}},[t._v("#")]),t._v(" _get_initial_state "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Get the (cached) initial state.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("DeterministicInitialized._get_initial_state()")]),t._v(" internally\ncalls "),a("code",[t._v("DeterministicInitialized._get_initial_state_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the initial state is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-1005"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1005"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The initial state.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-54"}},[t._v("#")]),t._v(" _get_initial_state_ "),a("Badge",{attrs:{text:"DeterministicInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Create and return an empty initial state")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-53"}},[t._v("#")]),t._v(" _get_initial_state_distribution "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the (cached) probability distribution of initial states.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(" internally\ncalls "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution_()")]),t._v(" the first time and automatically caches its value\nto make future calls more efficient (since the initial state distribution is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-1006"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1006"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-initial-state-distribution-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state-distribution-54"}},[t._v("#")]),t._v(" _get_initial_state_distribution_ "),a("Badge",{attrs:{text:"UncertainInitialized",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_initial_state_distribution_",sig:{params:[{name:"self"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of initial states.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("UncertainInitialized._get_initial_state_distribution()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1007"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1007"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of initial states.")]),t._v(" "),a("h3",{attrs:{id:"get-max-horizon-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-max-horizon-30"}},[t._v("#")]),t._v(" _get_max_horizon "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_max_horizon",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the maximum time horizon (int)")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-35"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-35"}},[t._v("#")]),t._v(" _get_memory_maxlen "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the (cached) memory max length.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(" internally calls "),a("code",[t._v("FiniteHistory._get_memory_maxlen_()")]),t._v(" the first\ntime and automatically caches its value to make future calls more efficient (since the memory max length is\nassumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-1008"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1008"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-memory-maxlen-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-memory-maxlen-36"}},[t._v("#")]),t._v(" _get_memory_maxlen_ "),a("Badge",{attrs:{text:"FiniteHistory",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_memory_maxlen_",sig:{params:[{name:"self"}],return:"int"}}}),t._v(" "),a("p",[t._v("Get the memory max length.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("FiniteHistory._get_memory_maxlen()")]),t._v(", the difference being that\nthe result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1009"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1009"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The memory max length.")]),t._v(" "),a("h3",{attrs:{id:"get-mode-costs-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-mode-costs-30"}},[t._v("#")]),t._v(" _get_mode_costs "),a("Badge",{attrs:{text:"WithModeCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_mode_costs",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, float]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is the id of a task (int), the second key the id of a mode\nand the value indicates the cost of execution the task in the mode.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-25"}},[t._v("#")]),t._v(" _get_next_state "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with DeterministicTransitions. This function will be ignored\nif the domain is defined as having UncertainTransitions or Simulation.")]),t._v(" "),a("h3",{attrs:{id:"get-next-state-distribution-32"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-next-state-distribution-32"}},[t._v("#")]),t._v(" _get_next_state_distribution "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_next_state_distribution",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"Distribution[D.T_state]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined with UncertainTransitions. This function will be ignored\nif the domain is defined as a Simulation. This function may also be used by uncertainty-specialised solvers\non deterministic domains.")]),t._v(" "),a("h3",{attrs:{id:"get-objectives-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-objectives-30"}},[t._v("#")]),t._v(" _get_objectives "),a("Badge",{attrs:{text:"SchedulingDomain",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_objectives",sig:{params:[{name:"self"}],return:"List[SchedulingObjectiveEnum]"}}}),t._v(" "),a("p",[t._v("Return the objectives to consider as a list. The items should be of SchedulingObjectiveEnum type.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-36"}},[t._v("#")]),t._v(" _get_observation "),a("Badge",{attrs:{text:"TransformedObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Get the deterministic observation given a state and action.")]),t._v(" "),a("h4",{attrs:{id:"parameters-612"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-612"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1010"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1010"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-distribution-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-distribution-36"}},[t._v("#")]),t._v(" _get_observation_distribution "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_distribution",sig:{params:[{name:"self"},{name:"state",annotation:"D.T_state"},{name:"action",default:"None",annotation:"Optional[D.T_agent[D.T_concurrency[D.T_event]]]"}],return:"Distribution[D.T_agent[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the probability distribution of the observation given a state and action.")]),t._v(" "),a("p",[t._v("In mathematical terms (discrete case), given an action "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.023ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.197ex",height:"1.02ex",viewBox:"0 -441 529 451"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})])])])])]),t._v(", this function represents: "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.566ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"9.078ex",height:"2.262ex",viewBox:"0 -750 4012.7 1000"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"50",d:"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(751, 0)"}},[a("path",{attrs:{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(1140, 0)"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(1903, 0)"}},[a("path",{attrs:{"data-c":"7C",d:"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(2181, 0)"}},[a("path",{attrs:{"data-c":"73",d:"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(2650, 0)"}},[a("path",{attrs:{"data-c":"2C",d:"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"}})]),a("g",{attrs:{"data-mml-node":"mi",transform:"translate(3094.7, 0)"}},[a("path",{attrs:{"data-c":"61",d:"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"}})]),a("g",{attrs:{"data-mml-node":"mo",transform:"translate(3623.7, 0)"}},[a("path",{attrs:{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"}})])])])])]),t._v(",\nwhere "),a("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[a("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.643ex",viewBox:"0 -704 763 726"}},[a("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[a("g",{attrs:{"data-mml-node":"math"}},[a("g",{attrs:{"data-mml-node":"mi"}},[a("path",{attrs:{"data-c":"4F",d:"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"}})])])])])]),t._v(" is the random variable of the observation.")],1),t._v(" "),a("h4",{attrs:{id:"parameters-613"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-613"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The state to be observed.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The last applied action (or None if the state is an initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1011"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1011"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The probability distribution of the observation.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-53"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-53"}},[t._v("#")]),t._v(" _get_observation_space "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("Get the (cached) observation space (finite or infinite set).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(" internally\ncalls "),a("code",[t._v("PartiallyObservable._get_observation_space_()")]),t._v(" the first time and automatically caches its value to make\nfuture calls more efficient (since the observation space is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-1012"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1012"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The observation space.")]),t._v(" "),a("h3",{attrs:{id:"get-observation-space-54"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-observation-space-54"}},[t._v("#")]),t._v(" _get_observation_space_ "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_observation_space_",sig:{params:[{name:"self"}],return:"D.T_agent[Space[D.T_observation]]"}}}),t._v(" "),a("p",[t._v("To be implemented if needed one day.")]),t._v(" "),a("h3",{attrs:{id:"get-original-quantity-resource-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-original-quantity-resource-16"}},[t._v("#")]),t._v(" _get_original_quantity_resource "),a("Badge",{attrs:{text:"WithoutResourceAvailabilityChange",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_original_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource (either resource type or resource unit).")]),t._v(" "),a("h3",{attrs:{id:"get-preallocations-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-30"}},[t._v("#")]),t._v(" _get_preallocations "),a("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),a("h3",{attrs:{id:"get-predecessors-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-predecessors-30"}},[t._v("#")]),t._v(" _get_predecessors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_predecessors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the predecessors of the task. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-quantity-resource-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-quantity-resource-24"}},[t._v("#")]),t._v(" _get_quantity_resource "),a("Badge",{attrs:{text:"DeterministicResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return the resource availability (int) for the given resource\n(either resource type or resource unit) at the given time.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-cost-per-time-unit-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-cost-per-time-unit-30"}},[t._v("#")]),t._v(" _get_resource_cost_per_time_unit "),a("Badge",{attrs:{text:"WithResourceCosts",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_cost_per_time_unit",sig:{params:[{name:"self"}],return:"Dict[str, float]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the name of a resource (str)\nand the value indicates the cost of using this resource per time unit.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-renewability-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-renewability-30"}},[t._v("#")]),t._v(" _get_resource_renewability "),a("Badge",{attrs:{text:"MixedRenewable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_renewability",sig:{params:[{name:"self"}],return:"Dict[str, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource name (string)\nand the value whether this resource is renewable (True) or not (False).")]),t._v(" "),a("h3",{attrs:{id:"get-resource-type-for-unit-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-type-for-unit-30"}},[t._v("#")]),t._v(" _get_resource_type_for_unit "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_type_for_unit",sig:{params:[{name:"self"}],return:"Dict[str, str]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a resource unit name and the value a resource type name.\nAn empty dictionary can be used if there are no resource unit matching a resource type.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-types-names-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-types-names-30"}},[t._v("#")]),t._v(" _get_resource_types_names "),a("Badge",{attrs:{text:"WithResourceTypes",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_types_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource types as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-resource-units-names-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-units-names-30"}},[t._v("#")]),t._v(" _get_resource_units_names "),a("Badge",{attrs:{text:"WithResourceUnits",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_resource_units_names",sig:{params:[{name:"self"}],return:"List[str]"}}}),t._v(" "),a("p",[t._v("Return the names (string) of all resource units as a list.")]),t._v(" "),a("h3",{attrs:{id:"get-successors-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-successors-30"}},[t._v("#")]),t._v(" _get_successors "),a("Badge",{attrs:{text:"WithPrecedence",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_successors",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return the successors of the tasks. Successors are given as a list for a task given as a key.")]),t._v(" "),a("h3",{attrs:{id:"get-task-existence-conditions-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-existence-conditions-30"}},[t._v("#")]),t._v(" _get_task_existence_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_existence_conditions",sig:{params:[{name:"self"}],return:"Dict[int, List[int]]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a list of conditions to be respected (True)\nfor the task to be part of the schedule. If a task has no entry in the dictionary,\nthere is no conditions for that task.")]),t._v(" "),a("p",[t._v("Example:\nreturn\n{\n20: [get_all_condition_items().NC_PART_1_OPERATION_1],\n21: [get_all_condition_items().HARDWARE_ISSUE_MACHINE_A]\n22: [get_all_condition_items().NC_PART_1_OPERATION_1, get_all_condition_items().NC_PART_1_OPERATION_2]\n}e")]),t._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-30"}},[t._v("#")]),t._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-30"}},[t._v("#")]),t._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),t._v(" "),a("h3",{attrs:{id:"get-task-progress-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-progress-30"}},[t._v("#")]),t._v(" _get_task_progress "),a("Badge",{attrs:{text:"CustomTaskProgress",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_progress",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"t_from",annotation:"int"},{name:"t_to",annotation:"int"},{name:"mode",annotation:"Optional[int]"},{name:"sampled_duration",default:"None",annotation:"Optional[int]"}],return:"float"}}}),t._v(" "),a("h4",{attrs:{id:"returns-1013"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1013"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The task progress (float) between t_from and t_to based on the task duration\nand assuming linear progress.")]),t._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-30"}},[t._v("#")]),t._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-ids-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-ids-15"}},[t._v("#")]),t._v(" _get_tasks_ids "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_ids",sig:{params:[{name:"self"}],return:"Union[Set[int], Dict[int, Any], List[int]]"}}}),t._v(" "),a("p",[t._v("Return a set or dict of int = id of tasks")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-mode-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-mode-5"}},[t._v("#")]),t._v(" _get_tasks_mode "),a("Badge",{attrs:{text:"SingleMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_mode",sig:{params:[{name:"self"}],return:"Dict[int, ModeConsumption]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is a task id and the value is a ModeConsumption object defining\nthe resource consumption.\nIf the domain is an instance of VariableResourceConsumption, VaryingModeConsumption objects should be used.\nIf this is not the case (i.e. the domain is an instance of ConstantResourceConsumption),\nthen ConstantModeConsumption should be used.")]),t._v(" "),a("p",[t._v("E.g. with constant resource consumption\n{\n12: ConstantModeConsumption({'rt_1': 2, 'rt_2': 0, 'ru_1': 1})\n}")]),t._v(" "),a("p",[t._v("E.g. with time varying resource consumption\n{\n12: VaryingModeConsumption({'rt_1': [2,2,2,2,3], 'rt_2': [0,0,0,0,0], 'ru_1': [1,1,1,1,1]})\n}")]),t._v(" "),a("h3",{attrs:{id:"get-tasks-modes-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-tasks-modes-15"}},[t._v("#")]),t._v(" _get_tasks_modes "),a("Badge",{attrs:{text:"MultiMode",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_tasks_modes",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, ModeConsumption]]"}}}),t._v(" "),a("p",[t._v("Return a nested dictionary where the first key is a task id and the second key is a mode id.\nThe value is a Mode object defining the resource consumption.")]),t._v(" "),a("h3",{attrs:{id:"get-time-lags-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-lags-30"}},[t._v("#")]),t._v(" _get_time_lags "),a("Badge",{attrs:{text:"WithTimeLag",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_lags",sig:{params:[{name:"self"}],return:"Dict[int, Dict[int, TimeLag]]"}}}),t._v(" "),a("p",[t._v("Return nested dictionaries where the first key is the id of a task (int)\nand the second key is the id of another task (int).\nThe value is a TimeLag object containing the MINIMUM and MAXIMUM time (int) that needs to separate the end\nof the first task to the start of the second task.")]),t._v(" "),a("h3",{attrs:{id:"get-time-window-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-time-window-30"}},[t._v("#")]),t._v(" _get_time_window "),a("Badge",{attrs:{text:"WithTimeWindow",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_time_window",sig:{params:[{name:"self"}],return:"Dict[int, TimeWindow]"}}}),t._v(" "),a("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value is a dictionary of EmptyTimeWindow object.")]),t._v(" "),a("h4",{attrs:{id:"returns-1014"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1014"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("A dictionary of TimeWindow objects.")]),t._v(" "),a("h3",{attrs:{id:"get-variable-resource-consumption-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-resource-consumption-30"}},[t._v("#")]),t._v(" _get_variable_resource_consumption "),a("Badge",{attrs:{text:"VariableResourceConsumption",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_get_variable_resource_consumption",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Return true if the domain has variable resource consumption,\nfalse if the consumption of resource does not vary in time for any of the tasks")]),t._v(" "),a("h3",{attrs:{id:"init-memory-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-memory-18"}},[t._v("#")]),t._v(" _init_memory "),a("Badge",{attrs:{text:"History",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_init_memory",sig:{params:[{name:"self"},{name:"state",default:"None",annotation:"Optional[D.T_state]"}],return:"D.T_memory[D.T_state]"}}}),t._v(" "),a("p",[t._v("Initialize memory (possibly with a state) according to its specification and return it.")]),t._v(" "),a("p",[t._v("This function is automatically called by "),a("code",[t._v("Initializable._reset()")]),t._v(" to reinitialize the internal memory whenever\nthe domain is used as an environment.")]),t._v(" "),a("h4",{attrs:{id:"parameters-614"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-614"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": An optional state to initialize the memory with (typically the initial state).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1015"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1015"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The new initialized memory.")]),t._v(" "),a("h3",{attrs:{id:"is-action-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-action-36"}},[t._v("#")]),t._v(" _is_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_action",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is an action (i.e. a controllable event for the agents).")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\naction space provided by "),a("code",[t._v("Events._get_action_space()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-615"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-615"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("event")]),t._v(": The event to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1016"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1016"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is an action (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-36"}},[t._v("#")]),t._v(" _is_applicable_action "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history), or in the internal one if\nomitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_applicable_action()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_applicable_action_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute\ninstead of the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-616"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-616"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1017"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1017"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-applicable-action-from-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-applicable-action-from-18"}},[t._v("#")]),t._v(" _is_applicable_action_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_applicable_action_from",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_event]"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an action is applicable in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_applicable_action()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\napplicable actions provided by "),a("code",[t._v("Events._get_applicable_actions_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-617"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-617"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1018"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1018"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the action is applicable (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-36"}},[t._v("#")]),t._v(" _is_enabled_event "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",default:"None",annotation:"Optional[D.T_memory[D.T_state]]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an uncontrollable event is enabled in the given memory (state or history), or in the\ninternal one if omitted.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Events._is_enabled_event()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Events._is_enabled_event_from()")]),t._v(". The boilerplate code automatically passes the "),a("code",[t._v("_memory")]),t._v(" attribute instead\nof the memory parameter whenever the latter is None.")]),t._v(" "),a("h4",{attrs:{id:"parameters-618"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-618"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider (if None, the internal memory attribute "),a("code",[t._v("_memory")]),t._v(" is used instead).")])]),t._v(" "),a("h4",{attrs:{id:"returns-1019"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1019"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-enabled-event-from-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-enabled-event-from-18"}},[t._v("#")]),t._v(" _is_enabled_event_from "),a("Badge",{attrs:{text:"Events",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_enabled_event_from",sig:{params:[{name:"self"},{name:"event",annotation:"D.T_event"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether an event is enabled in the given memory (state or history).")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Events._is_enabled_event()")]),t._v(", the difference being that the\nmemory parameter is mandatory here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the space of\nenabled events provided by "),a("code",[t._v("Events._get_enabled_events_from()")]),t._v(", but it can be overridden for faster\nimplementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-619"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-619"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1020"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1020"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the event is enabled (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-goal-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-goal-36"}},[t._v("#")]),t._v(" _is_goal "),a("Badge",{attrs:{text:"Goals",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_goal",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"D.T_agent[D.T_predicate]"}}}),t._v(" "),a("p",[t._v("Indicate whether an observation belongs to the goals.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\ngoals space provided by "),a("code",[t._v("Goals._get_goals()")]),t._v(", but it can be overridden for faster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-620"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-620"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1021"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1021"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation is a goal (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-observation-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-observation-36"}},[t._v("#")]),t._v(" _is_observation "),a("Badge",{attrs:{text:"PartiallyObservable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_observation",sig:{params:[{name:"self"},{name:"observation",annotation:"D.T_agent[D.T_observation]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check that an observation indeed belongs to the domain observation space.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("By default, this function is implemented using the "),a("code",[t._v("skdecide.core.Space.contains()")]),t._v(" function on the domain\nobservation space provided by "),a("code",[t._v("PartiallyObservable._get_observation_space()")]),t._v(", but it can be overridden for\nfaster implementations.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-621"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-621"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The observation to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1022"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1022"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the observation belongs to the domain observation space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"reset-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-36"}},[t._v("#")]),t._v(" _reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_reset",sig:{params:[{name:"self"}],return:"D.T_agent[D.T_observation]"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial observation.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Initializable._reset()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Initializable._state_reset()")]),t._v(" (which returns an initial state). The boilerplate code automatically stores\nthe initial state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("h4",{attrs:{id:"returns-1023"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1023"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial observation.")]),t._v(" "),a("h3",{attrs:{id:"sample-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-36"}},[t._v("#")]),t._v(" _sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Sample one transition of the simulator's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Simulation._sample()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Simulation._state_sample()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically\nsamples an observation corresponding to the sampled next state.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing simulator needs to be wrapped instead of implemented fully in scikit-decide (e.g. a\nsimulator), it is recommended to overwrite "),a("code",[t._v("Simulation._sample()")]),t._v(" to call the external simulator and not use\nthe "),a("code",[t._v("Simulation._state_sample()")]),t._v(" helper function.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-622"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-622"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1024"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1024"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of the sampled transition.")]),t._v(" "),a("h3",{attrs:{id:"sample-completion-conditions-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-completion-conditions-30"}},[t._v("#")]),t._v(" _sample_completion_conditions "),a("Badge",{attrs:{text:"WithConditionalTasks",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_completion_conditions",sig:{params:[{name:"self"},{name:"task",annotation:"int"}],return:"List[int]"}}}),t._v(" "),a("p",[t._v("Samples the condition distributions associated with the given task and return a list of sampled\nconditions.")]),t._v(" "),a("h3",{attrs:{id:"sample-quantity-resource-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-quantity-resource-30"}},[t._v("#")]),t._v(" _sample_quantity_resource "),a("Badge",{attrs:{text:"UncertainResourceAvailabilityChanges",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_quantity_resource",sig:{params:[{name:"self"},{name:"resource",annotation:"str"},{name:"time",annotation:"int"},{name:"**kwargs"}],return:"int"}}}),t._v(" "),a("p",[t._v("Sample an amount of resource availability (int) for the given resource\n(either resource type or resource unit) at the given time. This number should be the sum of the number of\nresource available at time t and the number of resource of this type consumed so far).")]),t._v(" "),a("h3",{attrs:{id:"sample-task-duration-30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-task-duration-30"}},[t._v("#")]),t._v(" _sample_task_duration "),a("Badge",{attrs:{text:"SimulatedTaskDuration",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_sample_task_duration",sig:{params:[{name:"self"},{name:"task",annotation:"int"},{name:"mode",default:"1",annotation:"Optional[int]"},{name:"progress_from",default:"0.0",annotation:"Optional[float]"}],return:"int"}}}),t._v(" "),a("p",[t._v("Return a task duration for the given task in the given mode.")]),t._v(" "),a("h3",{attrs:{id:"set-memory-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-memory-36"}},[t._v("#")]),t._v(" _set_memory "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_set_memory",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Set internal memory attribute "),a("code",[t._v("_memory")]),t._v(" to given one.")]),t._v(" "),a("p",[t._v('This can be useful to set a specific "starting point" before doing a rollout with\nsuccessive '),a("code",[t._v("Environment._step()")]),t._v(" calls.")]),t._v(" "),a("h4",{attrs:{id:"parameters-623"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-623"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The memory to set internally.")])]),t._v(" "),a("h4",{attrs:{id:"example-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-36"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set simulation_domain memory to my_state (assuming Markovian domain)")]),t._v("\nsimulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_set_memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a 100-steps rollout from here (applying my_action at every step)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    simulation_domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_step"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"state-reset-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-reset-18"}},[t._v("#")]),t._v(" _state_reset "),a("Badge",{attrs:{text:"Initializable",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_reset",sig:{params:[{name:"self"}],return:"D.T_state"}}}),t._v(" "),a("p",[t._v("Reset the state of the environment and return an initial state.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Initializable._reset()")]),t._v(". It focuses on the state level, as\nopposed to the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"returns-1025"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1025"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("An initial state.")]),t._v(" "),a("h3",{attrs:{id:"state-sample-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sample-18"}},[t._v("#")]),t._v(" _state_sample "),a("Badge",{attrs:{text:"Simulation",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_sample",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory[D.T_state]"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("This function will be used if the domain is defined as a Simulation (i.e. transitions are defined by call to\na simulation). This function may also be used by simulation-based solvers on non-Simulation domains.")]),t._v(" "),a("h3",{attrs:{id:"state-step-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-step-18"}},[t._v("#")]),t._v(" _state_step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_state_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"TransitionOutcome[D.T_state, D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Compute one step of the transition's dynamics.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Environment._step()")]),t._v(". It focuses on the state level, as opposed\nto the observation one for the latter.")]),t._v(" "),a("h4",{attrs:{id:"parameters-624"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-624"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1026"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1026"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The transition outcome of this step.")]),t._v(" "),a("h3",{attrs:{id:"step-36"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#step-36"}},[t._v("#")]),t._v(" _step "),a("Badge",{attrs:{text:"Environment",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_step",sig:{params:[{name:"self"},{name:"action",annotation:"D.T_agent[D.T_concurrency[D.T_event]]"}],return:"EnvironmentOutcome[D.T_agent[D.T_observation], D.T_agent[Value[D.T_value]], D.T_agent[D.T_predicate], D.T_agent[D.T_info]]"}}}),t._v(" "),a("p",[t._v("Run one step of the environment's dynamics.")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Environment._step()")]),t._v(" provides some boilerplate code and internally\ncalls "),a("code",[t._v("Environment._state_step()")]),t._v(" (which returns a transition outcome). The boilerplate code automatically stores\nnext state into the "),a("code",[t._v("_memory")]),t._v(" attribute and samples a corresponding observation.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Whenever an existing environment needs to be wrapped instead of implemented fully in scikit-decide (e.g. compiled\nATARI games), it is recommended to overwrite "),a("code",[t._v("Environment._step()")]),t._v(" to call the external environment and not\nuse the "),a("code",[t._v("Environment._state_step()")]),t._v(" helper function.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Before calling "),a("code",[t._v("Environment._step()")]),t._v(" the first time or when the end of an episode is\nreached, "),a("code",[t._v("Initializable._reset()")]),t._v(" must be called to reset the environment's state.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-625"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-625"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the current memory (state or history) triggering the transition.")])]),t._v(" "),a("h4",{attrs:{id:"returns-1027"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-1027"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The environment outcome of this step.")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);