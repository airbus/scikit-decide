(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{621:function(e,t,s){"use strict";s.r(t);var a=s(38),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"contributing-to-scikit-decide"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contributing-to-scikit-decide"}},[e._v("#")]),e._v(" Contributing to scikit-decide")]),e._v(" "),s("p",[e._v("We welcome all contributions to scikit-decide.")]),e._v(" "),s("p",[e._v("You can help by:")]),e._v(" "),s("ul",[s("li",[e._v("fixing bugs (see "),s("a",{attrs:{href:"https://github.com/airbus/scikit-decide/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("issues"),s("OutboundLink")],1),e._v(' with label "bug"),')]),e._v(" "),s("li",[e._v("adding new domains or solvers to the hub in "),s("code",[e._v("skdecide/hub/")]),e._v(",")]),e._v(" "),s("li",[e._v("improving the documentation,")]),e._v(" "),s("li",[e._v("adding and improving educational notebooks in "),s("code",[e._v("notebooks/")]),e._v(".")])]),e._v(" "),s("p",[e._v("This is not exhaustive.")]),e._v(" "),s("p",[e._v("The project is hosted on "),s("a",{attrs:{href:"https://github.com/airbus/scikit-decide",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/airbus/scikit-decide"),s("OutboundLink")],1),e._v(".\nContributions to the repository are made by submitting pull requests.")]),e._v(" "),s("p",[e._v("This guide is organized as follows:")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#setting-up-your-development-environment"}},[e._v("Setting up your development environment")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#guidelines-to-follow-when-preparing-a-contribution"}},[e._v("Guidelines to follow when preparing a contribution")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#submitting-pull-requests"}},[e._v("Submitting pull requests")]),e._v(" to put your contribution in the main repository")])]),e._v(" "),s("h2",{attrs:{id:"setting-up-your-development-environment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-your-development-environment"}},[e._v("#")]),e._v(" Setting up your development environment")]),e._v(" "),s("h3",{attrs:{id:"prerequisite-minizinc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisite-minizinc"}},[e._v("#")]),e._v(" Prerequisite: minizinc")]),e._v(" "),s("p",[e._v("You need first to install "),s("a",{attrs:{href:"https://www.minizinc.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("minizinc"),s("OutboundLink")],1),e._v(" (version greater than 2.6) and update the "),s("code",[e._v("PATH")]),e._v(" environment variable\nso that it can be found by Python. See "),s("a",{attrs:{href:"https://www.minizinc.org/doc-latest/en/installation.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("minizinc documentation"),s("OutboundLink")],1),e._v(" for more details.")]),e._v(" "),s("h3",{attrs:{id:"installing-from-source-in-developer-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-from-source-in-developer-mode"}},[e._v("#")]),e._v(" Installing from source in developer mode")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("Disclaimer")]),e._v(": The following process has only been tested on Linux/MacOS platforms.")])]),e._v(" "),s("p",[e._v("In order to install scikit-decide from the source so that your modification to the library are taken into account, we recommmend using poetry.")]),e._v(" "),s("h4",{attrs:{id:"prerequisites-for-c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites-for-c"}},[e._v("#")]),e._v(" Prerequisites for C++")]),e._v(" "),s("p",[e._v("To build the  c++ part of the library,\nyou need a minimal environment with c++ compiler, cmake, and boost.\nTo be able to use parallelism based on openMP, you should also install libomp.\nFor instance, on macOS it is done via:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("xcode-select --install\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" cmake\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" boost\nbrew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" libomp\n")])])]),s("h4",{attrs:{id:"installation-with-pyenv-poetry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation-with-pyenv-poetry"}},[e._v("#")]),e._v(" Installation with pyenv + poetry")]),e._v(" "),s("p",[e._v("Here are the steps to follow:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v('Clone the source and got to the "scikit-decide" root directory.')]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone --recurse-submodules -j8 https://github.com/airbus/scikit-decide.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" scikit-decide\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Set proper python version (e.g. 3.8.11) for the scikit-decide project.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("pyenv "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.8")]),e._v(".11\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Update pip installer (the one that "),s("code",[e._v("pyenv")]),e._v(" makes you use).")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -U pip\n")])])]),s("ul",[s("li",[s("p",[e._v("Use poetry to install the project:")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Install "),s("a",{attrs:{href:"https://python-poetry.org/docs/master/#installation",target:"_blank",rel:"noopener noreferrer"}},[e._v("poetry"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" python -\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.local/bin:"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),e._v('"')]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# add path to poetry")]),e._v("\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Install poetry-dynamic-versioning in poetry root env")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry self "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" poetry-dynamic-versioning\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Specify to poetry the python version to use so that it creates the appropriate virtual environment.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" use "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.8")]),e._v(".11\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Preinstall gym 0.21.0 with appropriate option to avoid an error during installation\n(see this "),s("a",{attrs:{href:"https://github.com/openai/gym/issues/3176",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue"),s("OutboundLink")],1),e._v("\nand this "),s("a",{attrs:{href:"https://github.com/python-poetry/poetry/issues/3433#issuecomment-840509576",target:"_blank",rel:"noopener noreferrer"}},[e._v("solution"),s("OutboundLink")],1),e._v("):")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry run python -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"pip==22"')]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# starting with pip 23.1, gym 0.21.0 is not intallable anymore")]),e._v("\npoetry run python -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"setuptools<67"')]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# starting with setuptools 67, gym 0.21.0 is not intallable anymore")]),e._v("\npoetry run python -m pip uninstall -y wheel  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# wheel must not be here to fall back directly to python setup.py")]),e._v("\npoetry run python -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("gym")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.21")]),e._v(".0 --no-use-pep517\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Install all dependencies as defined in "),s("code",[e._v("poetry.lock")]),e._v(", build and install the c++ library.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf build  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# removing previous build")]),e._v("\npoetry "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --extras all\n")])])])])])])])])]),e._v(" "),s("h4",{attrs:{id:"alternate-installation-with-conda-poetry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#alternate-installation-with-conda-poetry"}},[e._v("#")]),e._v(" Alternate installation with conda + poetry")]),e._v(" "),s("p",[e._v("You can also use conda rather than pyenv. It can be useful when you cannot install poetry via the above method,\nas it can also be installed by conda via the conda-forge channel.")]),e._v(" "),s("ul",[s("li",[s("p",[e._v('Clone the source and got to the "scikit-decide" root directory.')]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone --recurse-submodules -j8 https://github.com/airbus/scikit-decide.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" scikit-decide\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Create and activate a conda environment with the proper python version for the scikit-decide project.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("conda create -n test_dev_skdecide "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("python")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.8")]),e._v(".11\nconda activate test_dev_skdecide\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Update pip installer")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -U pip\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Install poetry in the environment")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("conda "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -c conda-forge poetry\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Install poetry-dynamic-versioning in poetry root env")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry self "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" poetry-dynamic-versioning\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Preinstall gym 0.21.0 with appropriate option to avoid an error during installation\n(see this "),s("a",{attrs:{href:"https://github.com/openai/gym/issues/3176",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue"),s("OutboundLink")],1),e._v("\nand this "),s("a",{attrs:{href:"https://github.com/python-poetry/poetry/issues/3433#issuecomment-840509576",target:"_blank",rel:"noopener noreferrer"}},[e._v("solution"),s("OutboundLink")],1),e._v("):")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry run python -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"pip==22"')]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# starting with pip 23.1, gym 0.21.0 is not intallable anymore")]),e._v("\npoetry run python -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"setuptools<67"')]),e._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# starting with setuptools 67, gym 0.21.0 is not intallable anymore")]),e._v("\npoetry run python -m pip uninstall -y wheel  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# wheel must not be here to fall back directly to python setup.py")]),e._v("\npoetry run python -m pip "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("gym")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.21")]),e._v(".0 --no-use-pep517\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Install all dependencies as defined in "),s("code",[e._v("poetry.lock")]),e._v(", build and install the c++ library.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf build  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# removing previous build")]),e._v("\npoetry "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --extras all\n")])])])])]),e._v(" "),s("h4",{attrs:{id:"use-of-developer-mode-installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-of-developer-mode-installation"}},[e._v("#")]),e._v(" Use of developer mode installation")]),e._v(" "),s("p",[e._v("Now you are able to use the library in developer mode (i.e. with code modifications directly taken into account)\nby prefixing all commands with "),s("code",[e._v("poetry run")]),e._v(".\nFor instance:")]),e._v(" "),s("ul",[s("li",[e._v("to see the list of installed packages: "),s("code",[e._v("poetry run pip list")]),e._v("  (NB: you can also use "),s("code",[e._v("poetry show")]),e._v(")")]),e._v(" "),s("li",[e._v("to run the tutorial script from examples: "),s("code",[e._v("poetry run python examples/tutorial.py")])])]),e._v(" "),s("h3",{attrs:{id:"building-the-docs-locally"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-the-docs-locally"}},[e._v("#")]),e._v(" Building the docs locally")]),e._v(" "),s("p",[e._v("The documentation is using "),s("a",{attrs:{href:"https://v1.vuepress.vuejs.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("VuePress"),s("OutboundLink")],1),e._v(" to generate an interactive static website.\nSome pages are generated from code thanks to the Python script "),s("code",[e._v("docs/autodoc.py")]),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"install-the-library-in-developer-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-the-library-in-developer-mode"}},[e._v("#")]),e._v(" Install the library in developer mode.")]),e._v(" "),s("p",[e._v("See "),s("a",{attrs:{href:"#installing-from-source-in-developer-mode"}},[e._v("above")]),e._v(" to install scikit-decide with poetry.")]),e._v(" "),s("h4",{attrs:{id:"install-the-documentation-dependencies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-the-documentation-dependencies"}},[e._v("#")]),e._v(" Install the documentation dependencies")]),e._v(" "),s("p",[e._v("The Python dependencies should have been installed in previous step,\nbut you still need to install the JavaScript ones (including VuePress).")]),e._v(" "),s("p",[e._v("First, get Yarn (package manager) by following "),s("a",{attrs:{href:"https://yarnpkg.com/en/docs/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("these installation steps"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v('Make sure you are in the "scikit-decide" root directory and install documentation dependencies:')]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),s("h4",{attrs:{id:"define-environment-variables-for-binder-links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#define-environment-variables-for-binder-links"}},[e._v("#")]),e._v(" Define environment variables for binder links")]),e._v(" "),s("p",[e._v("In order to define appropriate links for notebooks (github source + launching on binder), we need several environment variables:")]),e._v(" "),s("ul",[s("li",[e._v("AUTODOC_BINDER_ENV_GH_REPO_NAME: name of the github repository hosting the binder environment")]),e._v(" "),s("li",[e._v("AUTODOC_BINDER_ENV_GH_BRANCH: branch hosting the binder environment")]),e._v(" "),s("li",[e._v("AUTODOC_NOTEBOOKS_REPO_URL: url of the content repository for the notebooks")]),e._v(" "),s("li",[e._v("AUTODOC_NOTEBOOKS_BRANCH: branch containing the notebooks")])]),e._v(" "),s("p",[e._v("For instance:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_BINDER_ENV_GH_REPO_NAME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"airbus/scikit-decide"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_BINDER_ENV_GH_BRANCH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"binder"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("current_repo_url_withdotgit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote get-url origin"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_NOTEBOOKS_REPO_URL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${current_repo_url_withdotgit"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(".git"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_NOTEBOOKS_BRANCH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch --show-current"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),s("h4",{attrs:{id:"build-the-docs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-docs"}},[e._v("#")]),e._v(" Build the docs")]),e._v(" "),s("p",[e._v('Make sure you are in the "scikit-decide" root directory and using the virtual environment where you installed scikit-decide.\nIf you used poetry, that means prepending python commands with '),s("code",[e._v("poetry run")]),e._v(".\nThen generate and serve locally the documentation with:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry run "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" docs:dev\n")])])]),s("p",[e._v("NB: The above command will call "),s("code",[e._v("python docs/autodoc.py")]),e._v(" hence the use of "),s("code",[e._v("poetry run")]),e._v(".")]),e._v(" "),s("p",[e._v("Open your web browser to access the documentation (by default on http://localhost:8080/scikit-decide/).")]),e._v(" "),s("h3",{attrs:{id:"running-unit-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-unit-tests"}},[e._v("#")]),e._v(" Running unit tests")]),e._v(" "),s("p",[e._v("The unit tests are gathered in "),s("code",[e._v("tests/")]),e._v(" folder and run with "),s("a",{attrs:{href:"https://docs.pytest.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pytest"),s("OutboundLink")],1),e._v(".\nProviding you installed the library in developer mode as described "),s("a",{attrs:{href:"#installing-from-source-in-developer-mode"}},[e._v("above")]),e._v(",\npytest should have been already installed by poetry.")]),e._v(" "),s("p",[e._v('From the "scikit-decide" root directory, run unit tests with:')]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry run pytest tests\n")])])]),s("h3",{attrs:{id:"running-notebooks-as-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-notebooks-as-tests"}},[e._v("#")]),e._v(" Running notebooks as tests")]),e._v(" "),s("p",[e._v("One can test programmatically that notebooks are not broken thanks to "),s("a",{attrs:{href:"https://github.com/treebeardtech/nbmake",target:"_blank",rel:"noopener noreferrer"}},[e._v("nbmake"),s("OutboundLink")],1),e._v(" extension for pytest.")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("poetry run pytest --nbmake notebooks -v\n")])])]),s("h2",{attrs:{id:"guidelines-to-follow-when-preparing-a-contribution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#guidelines-to-follow-when-preparing-a-contribution"}},[e._v("#")]),e._v(" Guidelines to follow when preparing a contribution")]),e._v(" "),s("h3",{attrs:{id:"coding-style-and-code-linting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#coding-style-and-code-linting"}},[e._v("#")]),e._v(" Coding style and code linting")]),e._v(" "),s("p",[e._v("To help maintaining the same coding style across the project, some code linters are used via "),s("a",{attrs:{href:"https://pre-commit.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pre-commit"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("It is used by CI to run checks at each push, but can also be used locally.")]),e._v(" "),s("p",[e._v("Once installed, you can run it on all files with")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("pre-commit run --all-files\n")])])]),s("p",[e._v("Beware that doing so, you are actually modifying the files.")]),e._v(" "),s("p",[e._v("You can also use it when committing:")]),e._v(" "),s("ul",[s("li",[e._v("stage your changes: "),s("code",[e._v("git add your_files")]),e._v(",")]),e._v(" "),s("li",[e._v("run pre-commit on the staged files: "),s("code",[e._v("pre-commit run")]),e._v(",")]),e._v(" "),s("li",[e._v("check the changes made,")]),e._v(" "),s("li",[e._v("accept them by adding modified files: "),s("code",[e._v("git add -u")]),e._v(",")]),e._v(" "),s("li",[e._v("commit: "),s("code",[e._v("git commit")]),e._v(".")])]),e._v(" "),s("p",[e._v("This can also be done automatically at each commit if you add pre-commit to git hooks with "),s("code",[e._v("pre-commit install")]),e._v(".\nBeware that when doing so,")]),e._v(" "),s("ul",[s("li",[e._v("the changes will be refused if pre-commit actually modifies the files,")]),e._v(" "),s("li",[e._v("you can then accept the modifications with "),s("code",[e._v("git add -u")]),e._v(",")]),e._v(" "),s("li",[e._v("you can still force a commit that violates pre-commit checks with "),s("code",[e._v("git commit -n")]),e._v(" or "),s("code",[e._v("git commit --no-verify")]),e._v(".")])]),e._v(" "),s("p",[e._v("If you prefer run pre-commit manually, you can remove the hooks with "),s("code",[e._v("pre-commit uninstall")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"notebooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notebooks"}},[e._v("#")]),e._v(" Notebooks")]),e._v(" "),s("p",[e._v("We try to give some introductory examples via notebooks available in the corresponding "),s("code",[e._v("notebooks/")]),e._v(" directory.")]),e._v(" "),s("p",[e._v("The list of these notebooks is automatically inserted in the documentation with a title and a description.\nThese are actually extracted from the first cell. To enable that, each notebook should")]),e._v(" "),s("ul",[s("li",[e._v("start with a markdown cell,")]),e._v(" "),s("li",[e._v('its first line being the title starting with one number sign ("# "),')]),e._v(" "),s("li",[e._v("the remaining lines being used as the description.")])]),e._v(" "),s("p",[e._v("For instance:")]),e._v(" "),s("div",{staticClass:"language-markdown extra-class"},[s("pre",{pre:!0,attrs:{class:"language-markdown"}},[s("code",[s("span",{pre:!0,attrs:{class:"token title important"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("#")]),e._v(" Great notebook title")]),e._v("\n\nA quick description of the main features of the notebook.\nCan be on several lines.\n\nCan include a nice thumbnail.\n"),s("span",{pre:!0,attrs:{class:"token url"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("["),s("span",{pre:!0,attrs:{class:"token content"}},[e._v("Notebook_thumbnail")]),e._v("]("),s("span",{pre:!0,attrs:{class:"token url"}},[e._v("https://airbus.github.io/scikit-decide/maze.png")]),e._v(")")]),e._v("\n")])])]),s("h3",{attrs:{id:"adding-unit-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-unit-tests"}},[e._v("#")]),e._v(" Adding unit tests")]),e._v(" "),s("ul",[s("li",[e._v("Whenever adding some code, think to add some tests to the "),s("code",[e._v("tests/")]),e._v(" folder.")]),e._v(" "),s("li",[e._v("Whenever fixing a bug, think to add a test that crashes before fixing the bug and does not afterwards.")])]),e._v(" "),s("p",[e._v("Follow "),s("a",{attrs:{href:"#running-unit-tests"}},[e._v("above instructions")]),e._v(" to run them with pytest.")]),e._v(" "),s("h2",{attrs:{id:"submitting-pull-requests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#submitting-pull-requests"}},[e._v("#")]),e._v(" Submitting pull requests")]),e._v(" "),s("p",[e._v("When you think you are ready to merge your modifications into the main repository, you will have to open a pull request (PR).\nWe can summarize the process as follows:")]),e._v(" "),s("ul",[s("li",[e._v("Fork the repository on github.")]),e._v(" "),s("li",[e._v("Clone your fork on your computer.")]),e._v(" "),s("li",[e._v("Make your changes and push them to your fork.")]),e._v(" "),s("li",[e._v("Do the necessary checks (see "),s("a",{attrs:{href:"#prior-checks"}},[e._v("below")]),e._v(").")]),e._v(" "),s("li",[e._v("Reorganize your commits (see "),s("a",{attrs:{href:"#reorganizing-commits"}},[e._v("below")]),e._v(").")]),e._v(" "),s("li",[e._v("Submit your pull request (see "),s("a",{attrs:{href:"https://help.github.com/articles/creating-a-pull-request-from-a-fork/",target:"_blank",rel:"noopener noreferrer"}},[e._v("github documentation"),s("OutboundLink")],1),e._v(").")]),e._v(" "),s("li",[e._v("See if all CI checks passed on your PR.")]),e._v(" "),s("li",[e._v("Wait for a review.")]),e._v(" "),s("li",[e._v("Take the comments and required changes into account.")])]),e._v(" "),s("p",[e._v("Note that a PR needs at least one review by a core developer to be merged.")]),e._v(" "),s("p",[e._v("You may want to add a reference to the main repository to fetch from it and (re)base your changes on it:")]),e._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" upstream https://github.com/airbus/scikit-decide\n")])])]),s("p",[e._v("This "),s("a",{attrs:{href:"https://medium.com/google-developer-experts/how-to-pull-request-d75ac81449a5",target:"_blank",rel:"noopener noreferrer"}},[e._v("post"),s("OutboundLink")],1),e._v(" points out good practices to follow to submit great pull requests and review them efficiently.")]),e._v(" "),s("h3",{attrs:{id:"prior-checks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prior-checks"}},[e._v("#")]),e._v(" Prior checks")]),e._v(" "),s("p",[e._v("Before submitting your pull request, think to")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#running-unit-tests"}},[e._v("run the unit tests")]),e._v(",")]),e._v(" "),s("li",[s("a",{attrs:{href:"#building-the-docs-locally"}},[e._v("check the documentation locally")]),e._v(" if you modified it,")]),e._v(" "),s("li",[e._v("check you respect the coding styles by "),s("a",{attrs:{href:"#coding-style-and-code-linting"}},[e._v("running linters")]),e._v(".")])]),e._v(" "),s("p",[e._v("If you do not, you will still be able to see the status of your PR as CI will do these checks for you.")]),e._v(" "),s("h3",{attrs:{id:"reorganizing-commits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reorganizing-commits"}},[e._v("#")]),e._v(" Reorganizing commits")]),e._v(" "),s("p",[e._v("On your way to implement your contribution, you will probably have lots of commits,\nsome modifying other ones from the same PR, or only modifying the code style.")]),e._v(" "),s("p",[e._v("At the end of your work, consider reorganizing them by")]),e._v(" "),s("ul",[s("li",[e._v("squashing them into one or only a few logical commits,")]),e._v(" "),s("li",[e._v("having a separate commit to reformat previous existing code if necessary,")]),e._v(" "),s("li",[e._v('rewritting commit messages so that it explains the changes made and why, the "how" part being explained by the code itself\n(see this '),s("a",{attrs:{href:"https://chris.beams.io/posts/git-commit/",target:"_blank",rel:"noopener noreferrer"}},[e._v("post"),s("OutboundLink")],1),e._v(" about what a commit message should and should not contain),")]),e._v(" "),s("li",[e._v("rebasing on upstream repository master branch if it diverged too much by the time you finished.")])]),e._v(" "),s("p",[e._v("You can use "),s("code",[e._v("git rebase -i")]),e._v(" to do that, as explained in "),s("a",{attrs:{href:"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",target:"_blank",rel:"noopener noreferrer"}},[e._v("git documentation"),s("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);