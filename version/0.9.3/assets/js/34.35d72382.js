(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{547:function(t,a,e){"use strict";e.r(a);var s=e(38),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"builders-domain-scheduling-preallocations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#builders-domain-scheduling-preallocations"}},[t._v("#")]),t._v(" builders.domain.scheduling.preallocations")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#withpreallocations"}},[t._v("WithPreallocations")]),e("ul",[e("li",[e("a",{attrs:{href:"#get-preallocations-badge-text-withpreallocations-type-tip"}},[t._v("get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"tip"}})],1)]),e("li",[e("a",{attrs:{href:"#get-preallocations-badge-text-withpreallocations-type-tip"}},[t._v("_get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"tip"}})],1)])])]),e("li",[e("a",{attrs:{href:"#withoutpreallocations"}},[t._v("WithoutPreallocations")]),e("ul",[e("li",[e("a",{attrs:{href:"#get-preallocations-badge-text-withpreallocations-type-warn"}},[t._v("get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1)]),e("li",[e("a",{attrs:{href:"#get-preallocations-badge-text-withpreallocations-type-warn"}},[t._v("_get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1)])])])])]),e("p"),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("skdecide-summary")],1),t._v(" "),e("h2",{attrs:{id:"withpreallocations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#withpreallocations"}},[t._v("#")]),t._v(" WithPreallocations")]),t._v(" "),e("p",[t._v("A domain must inherit this class if there are some pre-allocations to consider.")]),t._v(" "),e("h3",{attrs:{id:"get-preallocations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations"}},[t._v("#")]),t._v(" get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"tip"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),e("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),e("h3",{attrs:{id:"get-preallocations-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-2"}},[t._v("#")]),t._v(" _get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"tip"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),e("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),e("h2",{attrs:{id:"withoutpreallocations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#withoutpreallocations"}},[t._v("#")]),t._v(" WithoutPreallocations")]),t._v(" "),e("p",[t._v("A domain must inherit this class if there are no pre-allocations to consider.")]),t._v(" "),e("h3",{attrs:{id:"get-preallocations-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-3"}},[t._v("#")]),t._v(" get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),e("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")]),t._v(" "),e("h3",{attrs:{id:"get-preallocations-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-preallocations-4"}},[t._v("#")]),t._v(" _get_preallocations "),e("Badge",{attrs:{text:"WithPreallocations",type:"warn"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"_get_preallocations",sig:{params:[{name:"self"}],return:"Dict[int, List[str]]"}}}),t._v(" "),e("p",[t._v("Return a dictionary where the key is the id of a task (int)\nand the value indicates the pre-allocated resources for this task (as a list of str)")])],1)}),[],!1,null,null,null);a.default=i.exports}}]);