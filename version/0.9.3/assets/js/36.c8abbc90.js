(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{549:function(e,t,a){"use strict";a.r(t);var r=a(38),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"builders-domain-scheduling-preemptivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#builders-domain-scheduling-preemptivity"}},[e._v("#")]),e._v(" builders.domain.scheduling.preemptivity")]),e._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#resumetype"}},[e._v("ResumeType")])]),a("li",[a("a",{attrs:{href:"#withpreemptivity"}},[e._v("WithPreemptivity")]),a("ul",[a("li",[a("a",{attrs:{href:"#get-task-paused-non-renewable-resource-returned-badge-text-withpreemptivity-type-tip"}},[e._v("get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-preemptivity-badge-text-withpreemptivity-type-tip"}},[e._v("get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-resuming-type-badge-text-withpreemptivity-type-tip"}},[e._v("get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-paused-non-renewable-resource-returned-badge-text-withpreemptivity-type-tip"}},[e._v("_get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-preemptivity-badge-text-withpreemptivity-type-tip"}},[e._v("_get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-resuming-type-badge-text-withpreemptivity-type-tip"}},[e._v("_get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1)])])]),a("li",[a("a",{attrs:{href:"#withoutpreemptivity"}},[e._v("WithoutPreemptivity")]),a("ul",[a("li",[a("a",{attrs:{href:"#get-task-paused-non-renewable-resource-returned-badge-text-withpreemptivity-type-warn"}},[e._v("get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-preemptivity-badge-text-withpreemptivity-type-warn"}},[e._v("get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-resuming-type-badge-text-withpreemptivity-type-warn"}},[e._v("get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-paused-non-renewable-resource-returned-badge-text-withpreemptivity-type-warn"}},[e._v("_get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-preemptivity-badge-text-withpreemptivity-type-warn"}},[e._v("_get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1)]),a("li",[a("a",{attrs:{href:"#get-task-resuming-type-badge-text-withpreemptivity-type-warn"}},[e._v("_get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1)])])])])]),a("p"),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("skdecide-summary")],1),e._v(" "),a("h2",{attrs:{id:"resumetype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resumetype"}},[e._v("#")]),e._v(" ResumeType")]),e._v(" "),a("p",[e._v("An enumeration.")]),e._v(" "),a("h2",{attrs:{id:"withpreemptivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withpreemptivity"}},[e._v("#")]),e._v(" WithPreemptivity")]),e._v(" "),a("p",[e._v("A domain must inherit this class if there exist at least 1 task that can be paused.")]),e._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned"}},[e._v("#")]),e._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-preemptivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity"}},[e._v("#")]),e._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-resuming-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type"}},[e._v("#")]),e._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-2"}},[e._v("#")]),e._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-2"}},[e._v("#")]),e._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-2"}},[e._v("#")]),e._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),e._v(" "),a("h2",{attrs:{id:"withoutpreemptivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withoutpreemptivity"}},[e._v("#")]),e._v(" WithoutPreemptivity")]),e._v(" "),a("p",[e._v("A domain must inherit this class if none of the task can be paused.")]),e._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-3"}},[e._v("#")]),e._v(" get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-3"}},[e._v("#")]),e._v(" get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-3"}},[e._v("#")]),e._v(" get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-paused-non-renewable-resource-returned-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-paused-non-renewable-resource-returned-4"}},[e._v("#")]),e._v(" _get_task_paused_non_renewable_resource_returned "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_paused_non_renewable_resource_returned",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type bool indicating\nif the non-renewable resources are consumed when the task is paused (False) or made available again (True).\nE.g. {\n2: False  # if paused, non-renewable resource will be consumed\n5: True  # if paused, the non-renewable resource will be available again\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-preemptivity-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-preemptivity-4"}},[e._v("#")]),e._v(" _get_task_preemptivity "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_preemptivity",sig:{params:[{name:"self"}],return:"Dict[int, bool]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value a boolean indicating\nif the task can be paused or stopped.\nE.g. {\n1: False\n2: True\n3: False\n4: False\n5: True\n6: False\n}")]),e._v(" "),a("h3",{attrs:{id:"get-task-resuming-type-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-task-resuming-type-4"}},[e._v("#")]),e._v(" _get_task_resuming_type "),a("Badge",{attrs:{text:"WithPreemptivity",type:"warn"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"_get_task_resuming_type",sig:{params:[{name:"self"}],return:"Dict[int, ResumeType]"}}}),e._v(" "),a("p",[e._v("Return a dictionary where the key is a task id and the value is of type ResumeType indicating\nif the task can be resumed (restarted from where it was paused with no time loss)\nor restarted (restarted from the start).\nE.g. {\n1: ResumeType.NA\n2: ResumeType.Resume\n3: ResumeType.NA\n4: ResumeType.NA\n5: ResumeType.Restart\n6: ResumeType.NA\n}")])],1)}),[],!1,null,null,null);t.default=s.exports}}]);