(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{669:function(a,e,t){"use strict";t.r(e);var s=t(38),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"hub-space-gym-gym"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hub-space-gym-gym"}},[a._v("#")]),a._v(" hub.space.gym.gym")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("Domain specification")]),a._v(" "),t("skdecide-summary")],1),a._v(" "),t("h2",{attrs:{id:"gymspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gymspace"}},[a._v("#")]),a._v(" GymSpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym space (gym.spaces) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"GymSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"GymSpace",sig:{params:[{name:"gym_space",annotation:"gym.Space"}],return:"None"}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-2"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-3"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-4"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-5"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"boxspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boxspace"}},[a._v("#")]),a._v(" BoxSpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym Box space (gym.spaces.Box) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-2"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"BoxSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"BoxSpace",sig:{params:[{name:"low"},{name:"high"},{name:"shape",default:"None"},{name:"dtype",default:"<class 'numpy.float32'>"}]}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-2"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-6"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-6"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-2"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-7"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-7"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-2"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-8"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-2"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-8"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-9"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-2"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-10"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"discretespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#discretespace"}},[a._v("#")]),a._v(" DiscreteSpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym Discrete space (gym.spaces.Discrete) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-3"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"DiscreteSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"DiscreteSpace",sig:{params:[{name:"n"}]}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-9"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-3"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-10"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-11"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-3"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-11"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-12"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-3"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-13"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-3"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-12"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-14"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-3"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-15"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"multidiscretespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multidiscretespace"}},[a._v("#")]),a._v(" MultiDiscreteSpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym MultiDiscrete space (gym.spaces.MultiDiscrete) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-4"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"MultiDiscreteSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"MultiDiscreteSpace",sig:{params:[{name:"nvec"}]}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-13"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-4"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-14"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-16"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-4"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-15"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-17"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-4"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-18"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-18"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-4"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-16"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-19"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-19"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-4"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-20"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-20"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"multibinaryspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multibinaryspace"}},[a._v("#")]),a._v(" MultiBinarySpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym MultiBinary space (gym.spaces.MultiBinary) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-5"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"MultiBinarySpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"MultiBinarySpace",sig:{params:[{name:"n"}]}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-17"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-5"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-18"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-18"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-21"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-21"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-5"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-19"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-19"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-22"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-22"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-5"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-23"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-23"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-5"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-20"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-20"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-24"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-24"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-5"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-25"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"tuplespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuplespace"}},[a._v("#")]),a._v(" TupleSpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym Tuple space (gym.spaces.Tuple) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-6"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"TupleSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"TupleSpace",sig:{params:[{name:"spaces"}]}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-21"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-21"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-6"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-22"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-22"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-26"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-26"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-6"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-23"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-23"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-27"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-27"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-6"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-28"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-28"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-6"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-24"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-24"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-29"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-29"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-6"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-30"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-30"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"dictspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dictspace"}},[a._v("#")]),a._v(" DictSpace")]),a._v(" "),t("p",[a._v("This class wraps an OpenAI Gym Dict space (gym.spaces.Dict) as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-7"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"DictSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"DictSpace",sig:{params:[{name:"spaces",default:"None"},{name:"**spaces_kwargs"}]}}}),a._v(" "),t("p",[a._v("Initialize GymSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-25"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-25"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("gym_space")]),a._v(": The Gym space (gym.spaces) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-7"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-26"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-26"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-31"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-31"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-7"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-27"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-27"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-32"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-32"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-7"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-33"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-33"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-7"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-28"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-28"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-34"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-34"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-7"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym.Space"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym space (gym.spaces) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-35"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-35"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym space.")]),a._v(" "),t("h2",{attrs:{id:"enumspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enumspace"}},[a._v("#")]),a._v(" EnumSpace")]),a._v(" "),t("p",[a._v("This class creates an OpenAI Gym Discrete space (gym.spaces.Discrete) from an enumeration and wraps it as a\nscikit-decide enumerable space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-8"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"EnumSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"EnumSpace",sig:{params:[{name:"enum_class",annotation:"EnumMeta"}],return:"None"}}}),a._v(" "),t("p",[a._v("Initialize EnumSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-29"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-29"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("enum_class")]),a._v(": The enumeration class for creating the Gym Discrete space (gym.spaces.Discrete) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-8"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-30"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-30"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-36"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-36"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-8"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-31"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-31"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-37"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-37"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"get-elements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-elements"}},[a._v("#")]),a._v(" get_elements "),t("Badge",{attrs:{text:"EnumerableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"get_elements",sig:{params:[{name:"self"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Get the elements of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-38"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-38"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The elements of this space.")]),a._v(" "),t("h3",{attrs:{id:"sample-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-8"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-39"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-39"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-8"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-32"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-32"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-40"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-40"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-8"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym_spaces.Discrete"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym Discrete space (gym.spaces.Discrete) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-41"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-41"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym Discrete space created from the enumeration.")]),a._v(" "),t("h2",{attrs:{id:"listspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#listspace"}},[a._v("#")]),a._v(" ListSpace")]),a._v(" "),t("p",[a._v("This class creates an OpenAI Gym Discrete space (gym.spaces.Discrete) from a list of elements and wraps it as a\nscikit-decide enumerable space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-9"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"ListSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"ListSpace",sig:{params:[{name:"elements",annotation:"Iterable[T]"}],return:"None"}}}),a._v(" "),t("p",[a._v("Initialize ListSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-33"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-33"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("elements")]),a._v(": The list of elements for creating the Gym Discrete space (gym.spaces.Discrete) to wrap.")])]),a._v(" "),t("h3",{attrs:{id:"contains-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-9"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-34"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-34"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-42"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-42"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-9"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-35"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-35"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-43"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-43"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"get-elements-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-elements-2"}},[a._v("#")]),a._v(" get_elements "),t("Badge",{attrs:{text:"EnumerableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"get_elements",sig:{params:[{name:"self"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Get the elements of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-44"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-44"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The elements of this space.")]),a._v(" "),t("h3",{attrs:{id:"sample-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-9"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-45"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-45"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-9"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-36"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-36"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-46"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-46"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-9"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym_spaces.Discrete"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym Discrete space (gym.spaces.Discrete) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-47"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-47"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym Discrete space created from the list.")]),a._v(" "),t("h2",{attrs:{id:"dataspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dataspace"}},[a._v("#")]),a._v(" DataSpace")]),a._v(" "),t("p",[a._v("This class creates an OpenAI Gym Dict space (gym.spaces.Dict) from a dataclass and wraps it as a scikit-decide space.")]),a._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),t("p",[a._v("Using this class requires OpenAI Gym to be installed.")])]),a._v(" "),t("h3",{attrs:{id:"constructor-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor-10"}},[a._v("#")]),a._v(" Constructor "),t("Badge",{attrs:{text:"DataSpace",type:"tip"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"DataSpace",sig:{params:[{name:"data_class",annotation:"type"},{name:"spaces",annotation:"Union[Dict[str, gym.Space], List[Tuple[str, gym.Space]]]"}],return:"None"}}}),a._v(" "),t("p",[a._v("Initialize DataSpace.")]),a._v(" "),t("h4",{attrs:{id:"parameters-37"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-37"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("data_class")]),a._v(": The dataclass for creating the Gym Dict space (gym.spaces.Dict) to wrap.")]),a._v(" "),t("li",[t("strong",[a._v("spaces")]),a._v(": The spaces description passed to the created Dict space (see gym.spaces.Dict constructor documentation).")])]),a._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[a._v("#")]),a._v(" Example")]),a._v(" "),t("div",{staticClass:"language-python extra-class"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("from")]),a._v(" skdecide"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("wrappers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("space "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" DataSpace\n\n"),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[a._v("@dataclass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("frozen"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Action")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    position"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),a._v("\n    velocity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("int")]),a._v("\n\nmy_action_space "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" DataSpace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Action"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"position"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" gym"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("spaces"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Discrete"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"velocity"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" gym"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("spaces"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Discrete"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),t("h3",{attrs:{id:"contains-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains-10"}},[a._v("#")]),a._v(" contains "),t("Badge",{attrs:{text:"Space",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),a._v(" "),t("p",[a._v("Check whether x is a valid member of this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-38"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-38"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("x")]),a._v(": The member to consider.")])]),a._v(" "),t("h4",{attrs:{id:"returns-48"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-48"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("True if x is a valid member of this space (False otherwise).")]),a._v(" "),t("h3",{attrs:{id:"from-jsonable-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable-10"}},[a._v("#")]),a._v(" from_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),a._v(" "),t("p",[a._v("Convert a JSONable data type to a batch of samples from this space.")]),a._v(" "),t("h4",{attrs:{id:"parameters-39"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-39"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The JSONable data type to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-49"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-49"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting batch of samples.")]),a._v(" "),t("h3",{attrs:{id:"sample-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sample-10"}},[a._v("#")]),a._v(" sample "),t("Badge",{attrs:{text:"SamplableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),a._v(" "),t("p",[a._v("Uniformly randomly sample a random element of this space.")]),a._v(" "),t("h4",{attrs:{id:"returns-50"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-50"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The sampled element.")]),a._v(" "),t("h3",{attrs:{id:"to-jsonable-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable-10"}},[a._v("#")]),a._v(" to_jsonable "),t("Badge",{attrs:{text:"SerializableSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),a._v(" "),t("p",[a._v("Convert a batch of samples from this space to a JSONable data type.")]),a._v(" "),t("h4",{attrs:{id:"parameters-40"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-40"}},[a._v("#")]),a._v(" Parameters")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("sample_n")]),a._v(": The batch of samples to convert.")])]),a._v(" "),t("h4",{attrs:{id:"returns-51"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-51"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The resulting JSONable data type.")]),a._v(" "),t("h3",{attrs:{id:"unwrapped-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unwrapped-10"}},[a._v("#")]),a._v(" unwrapped "),t("Badge",{attrs:{text:"GymSpace",type:"warn"}})],1),a._v(" "),t("skdecide-signature",{attrs:{name:"unwrapped",sig:{params:[{name:"self"}],return:"gym_spaces.Dict"}}}),a._v(" "),t("p",[a._v("Unwrap the Gym Dict space (gym.spaces.Dict) and return it.")]),a._v(" "),t("h4",{attrs:{id:"returns-52"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-52"}},[a._v("#")]),a._v(" Returns")]),a._v(" "),t("p",[a._v("The original Gym Dict space created from the dataclass.")])],1)}),[],!1,null,null,null);e.default=r.exports}}]);