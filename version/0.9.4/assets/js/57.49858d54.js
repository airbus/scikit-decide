(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{570:function(t,e,a){"use strict";a.r(e);var s=a(38),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"core"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core"}},[t._v("#")]),t._v(" core")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),a("skdecide-summary")],1),t._v(" "),a("h2",{attrs:{id:"space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space"}},[t._v("#")]),t._v(" Space")]),t._v(" "),a("p",[t._v("A space representing a finite or infinite set.")]),t._v(" "),a("p",[t._v("This class (or any of its descendant) is typically used to specify action, observation or goal spaces.")]),t._v(" "),a("h3",{attrs:{id:"contains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains"}},[t._v("#")]),t._v(" contains "),a("Badge",{attrs:{text:"Space",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether x is a valid member of this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x")]),t._v(": The member to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if x is a valid member of this space (False otherwise).")]),t._v(" "),a("h2",{attrs:{id:"implicitspace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implicitspace"}},[t._v("#")]),t._v(" ImplicitSpace")]),t._v(" "),a("p",[t._v("A space formalized implicitly, i.e. by a black-box contains() function.")]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"ImplicitSpace",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"ImplicitSpace",sig:{params:[{name:"contains_function",annotation:"Callable[[T], bool]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Initialize ImplicitSpace.")]),t._v(" "),a("h4",{attrs:{id:"parameters-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("contains_function")]),t._v(": The contains() function to use.")])]),t._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("my_space "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ImplicitSpace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'position'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"contains-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains-2"}},[t._v("#")]),t._v(" contains "),a("Badge",{attrs:{text:"Space",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether x is a valid member of this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x")]),t._v(": The member to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if x is a valid member of this space (False otherwise).")]),t._v(" "),a("h2",{attrs:{id:"enumerablespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enumerablespace"}},[t._v("#")]),t._v(" EnumerableSpace")]),t._v(" "),a("p",[t._v("A space which elements can be enumerated.")]),t._v(" "),a("h3",{attrs:{id:"contains-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains-3"}},[t._v("#")]),t._v(" contains "),a("Badge",{attrs:{text:"Space",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether x is a valid member of this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x")]),t._v(": The member to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if x is a valid member of this space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"get-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-elements"}},[t._v("#")]),t._v(" get_elements "),a("Badge",{attrs:{text:"EnumerableSpace",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_elements",sig:{params:[{name:"self"}],return:"Iterable[T]"}}}),t._v(" "),a("p",[t._v("Get the elements of this space.")]),t._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The elements of this space.")]),t._v(" "),a("h2",{attrs:{id:"emptyspace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emptyspace"}},[t._v("#")]),t._v(" EmptySpace")]),t._v(" "),a("p",[t._v("A space which elements can be enumerated.")]),t._v(" "),a("h3",{attrs:{id:"contains-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains-4"}},[t._v("#")]),t._v(" contains "),a("Badge",{attrs:{text:"Space",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether x is a valid member of this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x")]),t._v(": The member to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if x is a valid member of this space (False otherwise).")]),t._v(" "),a("h2",{attrs:{id:"samplablespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#samplablespace"}},[t._v("#")]),t._v(" SamplableSpace")]),t._v(" "),a("p",[t._v("A space which can be sampled (uniformly randomly).")]),t._v(" "),a("h3",{attrs:{id:"contains-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains-5"}},[t._v("#")]),t._v(" contains "),a("Badge",{attrs:{text:"Space",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether x is a valid member of this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-6"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x")]),t._v(": The member to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if x is a valid member of this space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"sample"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"SamplableSpace",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),t._v(" "),a("p",[t._v("Uniformly randomly sample a random element of this space.")]),t._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled element.")]),t._v(" "),a("h2",{attrs:{id:"serializablespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serializablespace"}},[t._v("#")]),t._v(" SerializableSpace")]),t._v(" "),a("p",[t._v("A space which can be serialized (to/from JSON).")]),t._v(" "),a("h3",{attrs:{id:"contains-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains-6"}},[t._v("#")]),t._v(" contains "),a("Badge",{attrs:{text:"Space",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"contains",sig:{params:[{name:"self"},{name:"x",annotation:"T"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check whether x is a valid member of this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-7"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("x")]),t._v(": The member to consider.")])]),t._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if x is a valid member of this space (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"from-jsonable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-jsonable"}},[t._v("#")]),t._v(" from_jsonable "),a("Badge",{attrs:{text:"SerializableSpace",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"from_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Sequence"}],return:"Iterable[T]"}}}),t._v(" "),a("p",[t._v("Convert a JSONable data type to a batch of samples from this space.")]),t._v(" "),a("h4",{attrs:{id:"parameters-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-8"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("sample_n")]),t._v(": The JSONable data type to convert.")])]),t._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The resulting batch of samples.")]),t._v(" "),a("h3",{attrs:{id:"to-jsonable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-jsonable"}},[t._v("#")]),t._v(" to_jsonable "),a("Badge",{attrs:{text:"SerializableSpace",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"to_jsonable",sig:{params:[{name:"self"},{name:"sample_n",annotation:"Iterable[T]"}],return:"Sequence"}}}),t._v(" "),a("p",[t._v("Convert a batch of samples from this space to a JSONable data type.")]),t._v(" "),a("h4",{attrs:{id:"parameters-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-9"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("sample_n")]),t._v(": The batch of samples to convert.")])]),t._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The resulting JSONable data type.")]),t._v(" "),a("h2",{attrs:{id:"distribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#distribution"}},[t._v("#")]),t._v(" Distribution")]),t._v(" "),a("p",[t._v("A probability distribution.")]),t._v(" "),a("h3",{attrs:{id:"sample-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-2"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Distribution",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),t._v(" "),a("p",[t._v("Sample from this distribution.")]),t._v(" "),a("h4",{attrs:{id:"returns-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-11"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled element.")]),t._v(" "),a("h2",{attrs:{id:"implicitdistribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implicitdistribution"}},[t._v("#")]),t._v(" ImplicitDistribution")]),t._v(" "),a("p",[t._v("A probability distribution formalized implicitly, i.e. by a black-box sample() function.")]),t._v(" "),a("h3",{attrs:{id:"constructor-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-2"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"ImplicitDistribution",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"ImplicitDistribution",sig:{params:[{name:"sample_function",annotation:"Callable[[], T]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Initialize ImplicitDistribution.")]),t._v(" "),a("h4",{attrs:{id:"parameters-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-10"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("sample_function")]),t._v(": The sample() function to use.")])]),t._v(" "),a("h4",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" random\n\ndice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ImplicitDistribution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nroll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"sample-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-3"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Distribution",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),t._v(" "),a("p",[t._v("Sample from this distribution.")]),t._v(" "),a("h4",{attrs:{id:"returns-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-12"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled element.")]),t._v(" "),a("h2",{attrs:{id:"discretedistribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#discretedistribution"}},[t._v("#")]),t._v(" DiscreteDistribution")]),t._v(" "),a("p",[t._v("A discrete probability distribution.")]),t._v(" "),a("h3",{attrs:{id:"constructor-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-3"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"DiscreteDistribution",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"DiscreteDistribution",sig:{params:[{name:"values",annotation:"List[Tuple[T, float]]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Initialize DiscreteDistribution.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If the given probabilities do not sum to 1, they are implicitly normalized as such for sampling.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-11"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("values")]),t._v(": The list of (element, probability) pairs.")])]),t._v(" "),a("h4",{attrs:{id:"example-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-3"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("game_strategy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiscreteDistribution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rock'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'paper'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scissors'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmove "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" game_strategy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"get-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-values"}},[t._v("#")]),t._v(" get_values "),a("Badge",{attrs:{text:"DiscreteDistribution",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_values",sig:{params:[{name:"self"}],return:"List[Tuple[T, float]]"}}}),t._v(" "),a("p",[t._v("Get the list of (element, probability) pairs.")]),t._v(" "),a("h4",{attrs:{id:"returns-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-13"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The (element, probability) pairs.")]),t._v(" "),a("h3",{attrs:{id:"sample-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-4"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Distribution",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),t._v(" "),a("p",[t._v("Sample from this distribution.")]),t._v(" "),a("h4",{attrs:{id:"returns-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-14"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled element.")]),t._v(" "),a("h2",{attrs:{id:"singlevaluedistribution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singlevaluedistribution"}},[t._v("#")]),t._v(" SingleValueDistribution")]),t._v(" "),a("p",[t._v("A single value distribution (i.e. Dirac distribution).")]),t._v(" "),a("h3",{attrs:{id:"constructor-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-4"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"SingleValueDistribution",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"SingleValueDistribution",sig:{params:[{name:"value",annotation:"T"}],return:"None"}}}),t._v(" "),a("p",[t._v("Initialize SingleValueDistribution.")]),t._v(" "),a("h4",{attrs:{id:"parameters-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-12"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("value")]),t._v(": The single value of this distribution.")])]),t._v(" "),a("h3",{attrs:{id:"get-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-value"}},[t._v("#")]),t._v(" get_value "),a("Badge",{attrs:{text:"SingleValueDistribution",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_value",sig:{params:[{name:"self"}],return:"T"}}}),t._v(" "),a("p",[t._v("Get the single value of this distribution.")]),t._v(" "),a("h4",{attrs:{id:"returns-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-15"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The single value of this distribution.")]),t._v(" "),a("h3",{attrs:{id:"get-values-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-values-2"}},[t._v("#")]),t._v(" get_values "),a("Badge",{attrs:{text:"DiscreteDistribution",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_values",sig:{params:[{name:"self"}],return:"List[Tuple[T, float]]"}}}),t._v(" "),a("p",[t._v("Get the list of (element, probability) pairs.")]),t._v(" "),a("h4",{attrs:{id:"returns-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-16"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The (element, probability) pairs.")]),t._v(" "),a("h3",{attrs:{id:"sample-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sample-5"}},[t._v("#")]),t._v(" sample "),a("Badge",{attrs:{text:"Distribution",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"sample",sig:{params:[{name:"self"}],return:"T"}}}),t._v(" "),a("p",[t._v("Sample from this distribution.")]),t._v(" "),a("h4",{attrs:{id:"returns-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-17"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The sampled element.")]),t._v(" "),a("h2",{attrs:{id:"value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[t._v("#")]),t._v(" Value")]),t._v(" "),a("p",[t._v("A value (reward or cost).")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("It is recommended to use either the reward or the cost parameter. If no one is used, a reward/cost of 0 is\nassumed. If both are used, reward will be considered and cost ignored. In any case, both reward and cost\nattributes will be defined after initialization.")])]),t._v(" "),a("h4",{attrs:{id:"parameters-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-13"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("reward")]),t._v(": The optional reward.")]),t._v(" "),a("li",[a("strong",[t._v("cost")]),t._v(": The optional cost.")])]),t._v(" "),a("h4",{attrs:{id:"example-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-4"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# These two lines are equivalent, use the one you prefer")]),t._v("\nvalue_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reward"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvalue_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cost"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" value_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reward "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" value_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reward "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" value_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" value_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n")])])]),a("h2",{attrs:{id:"environmentoutcome"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#environmentoutcome"}},[t._v("#")]),t._v(" EnvironmentOutcome")]),t._v(" "),a("p",[t._v("An environment outcome for an internal transition.")]),t._v(" "),a("h4",{attrs:{id:"parameters-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-14"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("observation")]),t._v(": The agent's observation of the current environment.")]),t._v(" "),a("li",[a("strong",[t._v("value")]),t._v(": The value (reward or cost) returned after previous action.")]),t._v(" "),a("li",[a("strong",[t._v("termination")]),t._v(": Whether the episode has ended, in which case further step() calls will return undefined results.")]),t._v(" "),a("li",[a("strong",[t._v("info")]),t._v(": Optional auxiliary diagnostic information (helpful for debugging, and sometimes learning).")])]),t._v(" "),a("h3",{attrs:{id:"asdict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asdict"}},[t._v("#")]),t._v(" asdict "),a("Badge",{attrs:{text:"ExtendedDataclass",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"asdict",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Return the fields of the instance as a new dictionary mapping field names to field values.")]),t._v(" "),a("h3",{attrs:{id:"astuple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#astuple"}},[t._v("#")]),t._v(" astuple "),a("Badge",{attrs:{text:"ExtendedDataclass",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"astuple",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Return the fields of the instance as a new tuple of field values.")]),t._v(" "),a("h3",{attrs:{id:"replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace "),a("Badge",{attrs:{text:"ExtendedDataclass",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"replace",sig:{params:[{name:"self"},{name:"**changes"}]}}}),t._v(" "),a("p",[t._v("Return a new object replacing specified fields with new values.")]),t._v(" "),a("h2",{attrs:{id:"transitionoutcome"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transitionoutcome"}},[t._v("#")]),t._v(" TransitionOutcome")]),t._v(" "),a("p",[t._v("A transition outcome.")]),t._v(" "),a("h4",{attrs:{id:"parameters-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-15"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("state")]),t._v(": The new state after the transition.")]),t._v(" "),a("li",[a("strong",[t._v("value")]),t._v(": The value (reward or cost) returned after previous action.")]),t._v(" "),a("li",[a("strong",[t._v("termination")]),t._v(": Whether the episode has ended, in which case further step() calls will return undefined results.")]),t._v(" "),a("li",[a("strong",[t._v("info")]),t._v(": Optional auxiliary diagnostic information (helpful for debugging, and sometimes learning).")])]),t._v(" "),a("h3",{attrs:{id:"asdict-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asdict-2"}},[t._v("#")]),t._v(" asdict "),a("Badge",{attrs:{text:"ExtendedDataclass",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"asdict",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Return the fields of the instance as a new dictionary mapping field names to field values.")]),t._v(" "),a("h3",{attrs:{id:"astuple-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#astuple-2"}},[t._v("#")]),t._v(" astuple "),a("Badge",{attrs:{text:"ExtendedDataclass",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"astuple",sig:{params:[{name:"self"}]}}}),t._v(" "),a("p",[t._v("Return the fields of the instance as a new tuple of field values.")]),t._v(" "),a("h3",{attrs:{id:"replace-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace-2"}},[t._v("#")]),t._v(" replace "),a("Badge",{attrs:{text:"ExtendedDataclass",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"replace",sig:{params:[{name:"self"},{name:"**changes"}]}}}),t._v(" "),a("p",[t._v("Return a new object replacing specified fields with new values.")]),t._v(" "),a("h2",{attrs:{id:"strdict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strdict"}},[t._v("#")]),t._v(" StrDict")]),t._v(" "),a("p",[t._v("A dictionary with String keys (e.g. agent names).")]),t._v(" "),a("h2",{attrs:{id:"constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constraint"}},[t._v("#")]),t._v(" Constraint")]),t._v(" "),a("p",[t._v("A constraint.")]),t._v(" "),a("h3",{attrs:{id:"check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check"}},[t._v("#")]),t._v(" check "),a("Badge",{attrs:{text:"Constraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory"},{name:"action",annotation:"D.T_event"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check this constraint.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" to return False. This\ninformation can then be exploited by solvers to avoid computing next state to evaluate the constraint (more\nefficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-16"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-18"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint is checked (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-constraint-dependent-on-next-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-constraint-dependent-on-next-state"}},[t._v("#")]),t._v(" is_constraint_dependent_on_next_state "),a("Badge",{attrs:{text:"Constraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_constraint_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether this constraint requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Constraint.is_constraint_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" the first time and automatically caches its value to\nmake future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-19"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-constraint-dependent-on-next-state-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-constraint-dependent-on-next-state-2"}},[t._v("#")]),t._v(" _is_constraint_dependent_on_next_state_ "),a("Badge",{attrs:{text:"Constraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_constraint_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether this constraint requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Constraint.is_constraint_dependent_on_next_state()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-20"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint computation depends on next_state (False otherwise).")]),t._v(" "),a("h2",{attrs:{id:"implicitconstraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implicitconstraint"}},[t._v("#")]),t._v(" ImplicitConstraint")]),t._v(" "),a("p",[t._v("A constraint formalized implicitly, i.e. by a black-box check() function.")]),t._v(" "),a("h3",{attrs:{id:"constructor-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-5"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"ImplicitConstraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"ImplicitConstraint",sig:{params:[{name:"check_function",annotation:"Callable[[D.T_memory, D.T_event, Optional[D.T_state]], bool]"},{name:"depends_on_next_state",default:"True",annotation:"bool"}],return:"None"}}}),t._v(" "),a("p",[t._v("Initialize ImplicitConstraint.")]),t._v(" "),a("h4",{attrs:{id:"parameters-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-17"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("check_function")]),t._v(": The check() function to use.")]),t._v(" "),a("li",[a("strong",[t._v("depends_on_next_state")]),t._v(": Whether the check() function requires the next_state parameter for its computation.")])]),t._v(" "),a("h4",{attrs:{id:"example-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-5"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("constraint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ImplicitConstraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" next_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"check-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-2"}},[t._v("#")]),t._v(" check "),a("Badge",{attrs:{text:"Constraint",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory"},{name:"action",annotation:"D.T_event"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check this constraint.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" to return False. This\ninformation can then be exploited by solvers to avoid computing next state to evaluate the constraint (more\nefficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-18"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-21"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint is checked (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-constraint-dependent-on-next-state-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-constraint-dependent-on-next-state-3"}},[t._v("#")]),t._v(" is_constraint_dependent_on_next_state "),a("Badge",{attrs:{text:"Constraint",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_constraint_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether this constraint requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Constraint.is_constraint_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" the first time and automatically caches its value to\nmake future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-22"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-constraint-dependent-on-next-state-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-constraint-dependent-on-next-state-4"}},[t._v("#")]),t._v(" _is_constraint_dependent_on_next_state_ "),a("Badge",{attrs:{text:"Constraint",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_constraint_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether this constraint requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Constraint.is_constraint_dependent_on_next_state()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-23"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint computation depends on next_state (False otherwise).")]),t._v(" "),a("h2",{attrs:{id:"boundconstraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boundconstraint"}},[t._v("#")]),t._v(" BoundConstraint")]),t._v(" "),a("p",[t._v("A constraint characterized by an evaluation function, an inequality and a bound.")]),t._v(" "),a("h4",{attrs:{id:"example-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-6"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("p",[t._v("A BoundConstraint with inequality '>=' is checked if (and only if) its "),a("code",[t._v("BoundConstraint.evaluate()")]),t._v(" function returns\na float greater than or equal to its bound.")]),t._v(" "),a("h3",{attrs:{id:"constructor-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor-6"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"BoundConstraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"BoundConstraint",sig:{params:[{name:"evaluate_function",annotation:"Callable[[D.T_memory, D.T_event, Optional[D.T_state]], float]"},{name:"inequality",annotation:"str"},{name:"bound",annotation:"float"},{name:"depends_on_next_state",default:"True",annotation:"bool"}],return:"None"}}}),t._v(" "),a("p",[t._v("Initialize BoundConstraint.")]),t._v(" "),a("h4",{attrs:{id:"parameters-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-19"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("evaluate_function")]),t._v(": The evaluate() function to use.")]),t._v(" "),a("li",[a("strong",[t._v("inequality")]),t._v(": A string ('<', '<=', '>' or '>=') describing the constraint inequality.")]),t._v(" "),a("li",[a("strong",[t._v("bound")]),t._v(": The bound of the constraint.")]),t._v(" "),a("li",[a("strong",[t._v("depends_on_next_state")]),t._v(": Whether the evaluate() function requires the next_state parameter for its computation.")])]),t._v(" "),a("h4",{attrs:{id:"example-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-7"}},[t._v("#")]),t._v(" Example")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("constraint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BoundConstraint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" memory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" next_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"check-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-3"}},[t._v("#")]),t._v(" check "),a("Badge",{attrs:{text:"Constraint",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"check",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory"},{name:"action",annotation:"D.T_event"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Check this constraint.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" to return False. This\ninformation can then be exploited by solvers to avoid computing next state to evaluate the constraint (more\nefficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-20"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-24"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint is checked (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"evaluate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evaluate"}},[t._v("#")]),t._v(" evaluate "),a("Badge",{attrs:{text:"BoundConstraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"evaluate",sig:{params:[{name:"self"},{name:"memory",annotation:"D.T_memory"},{name:"action",annotation:"D.T_event"},{name:"next_state",default:"None",annotation:"Optional[D.T_state]"}],return:"float"}}}),t._v(" "),a("p",[t._v("Evaluate the left side of this BoundConstraint.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("If this function never depends on the next_state parameter for its computation, it is recommended to\nindicate it by overriding "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" to return False. This\ninformation can then be exploited by solvers to avoid computing next state to evaluate the constraint (more\nefficient).")])]),t._v(" "),a("h4",{attrs:{id:"parameters-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters-21"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("memory")]),t._v(": The source memory (state or history) of the transition.")]),t._v(" "),a("li",[a("strong",[t._v("action")]),t._v(": The action taken in the given memory (state or history) triggering the transition.")]),t._v(" "),a("li",[a("strong",[t._v("next_state")]),t._v(": The next state in which the transition ends (if needed for the computation).")])]),t._v(" "),a("h4",{attrs:{id:"returns-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-25"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The float value resulting from the evaluation.")]),t._v(" "),a("h3",{attrs:{id:"get-bound"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-bound"}},[t._v("#")]),t._v(" get_bound "),a("Badge",{attrs:{text:"BoundConstraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_bound",sig:{params:[{name:"self"}],return:"float"}}}),t._v(" "),a("p",[t._v("Get the bound of the constraint.")]),t._v(" "),a("h4",{attrs:{id:"returns-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-26"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The constraint bound.")]),t._v(" "),a("h3",{attrs:{id:"get-inequality"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-inequality"}},[t._v("#")]),t._v(" get_inequality "),a("Badge",{attrs:{text:"BoundConstraint",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"get_inequality",sig:{params:[{name:"self"}],return:"str"}}}),t._v(" "),a("p",[t._v("Get the string ('<', '<=', '>' or '>=') describing the constraint inequality.")]),t._v(" "),a("h4",{attrs:{id:"returns-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-27"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("The string describing the inequality.")]),t._v(" "),a("h3",{attrs:{id:"is-constraint-dependent-on-next-state-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-constraint-dependent-on-next-state-5"}},[t._v("#")]),t._v(" is_constraint_dependent_on_next_state "),a("Badge",{attrs:{text:"Constraint",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"is_constraint_dependent_on_next_state",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether this constraint requires the next_state parameter for its computation (cached).")]),t._v(" "),a("p",[t._v("By default, "),a("code",[t._v("Constraint.is_constraint_dependent_on_next_state()")]),t._v(" internally\ncalls "),a("code",[t._v("Constraint._is_constraint_dependent_on_next_state_()")]),t._v(" the first time and automatically caches its value to\nmake future calls more efficient (since the returned value is assumed to be constant).")]),t._v(" "),a("h4",{attrs:{id:"returns-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-28"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint computation depends on next_state (False otherwise).")]),t._v(" "),a("h3",{attrs:{id:"is-constraint-dependent-on-next-state-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-constraint-dependent-on-next-state-6"}},[t._v("#")]),t._v(" _is_constraint_dependent_on_next_state_ "),a("Badge",{attrs:{text:"Constraint",type:"warn"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"_is_constraint_dependent_on_next_state_",sig:{params:[{name:"self"}],return:"bool"}}}),t._v(" "),a("p",[t._v("Indicate whether this constraint requires the next_state parameter for its computation.")]),t._v(" "),a("p",[t._v("This is a helper function called by default from "),a("code",[t._v("Constraint.is_constraint_dependent_on_next_state()")]),t._v(", the\ndifference being that the result is not cached here.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("The underscore at the end of this function's name is a convention to remind that its result should be\nconstant.")])]),t._v(" "),a("h4",{attrs:{id:"returns-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-29"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),a("p",[t._v("True if the constraint computation depends on next_state (False otherwise).")])],1)}),[],!1,null,null,null);e.default=r.exports}}]);