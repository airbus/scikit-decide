(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{575:function(t,e,n){"use strict";n.r(e);var a=n(38),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"discrete-optimization-generic-tools-ea-alternating-ga"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#discrete-optimization-generic-tools-ea-alternating-ga"}},[t._v("#")]),t._v(" discrete_optimization.generic_tools.ea.alternating_ga")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),n("skdecide-summary")],1),t._v(" "),n("h2",{attrs:{id:"alternatingga"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#alternatingga"}},[t._v("#")]),t._v(" AlternatingGa")]),t._v(" "),n("p",[t._v("Multi-encoding single objective GA")]),t._v(" "),n("p",[t._v("Args:\nproblem:\nthe problem to solve\nencoding:\nname (str) of an encoding registered in the register solution of Problem\nor a dictionary of the form {'type': TypeAttribute, 'n': int} where type refers to a TypeAttribute and n\nto the dimension of the problem in this encoding (e.g. length of the vector)\nby default, the first encoding in the problem register_solution will be used.")]),t._v(" "),n("h3",{attrs:{id:"constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor "),n("Badge",{attrs:{text:"AlternatingGa",type:"tip"}})],1),t._v(" "),n("skdecide-signature",{attrs:{name:"AlternatingGa",sig:{params:[{name:"problem",annotation:"Problem"},{name:"encodings",default:"None",annotation:"Union[List[str], List[Dict[str, Any]]]"},{name:"mutations",default:"None",annotation:"Optional[Union[List[Mutation], List[DeapMutation]]]"},{name:"crossovers",default:"None",annotation:"Optional[List[DeapCrossover]]"},{name:"selections",default:"None",annotation:"Optional[List[DeapSelection]]"},{name:"objective_handling",default:"None",annotation:"Optional[ObjectiveHandling]"},{name:"objectives",default:"None",annotation:"Optional[Union[str, List[str]]]"},{name:"objective_weights",default:"None",annotation:"Optional[List[float]]"},{name:"pop_size",default:"None",annotation:"int"},{name:"max_evals",default:"None",annotation:"int"},{name:"sub_evals",default:"None",annotation:"List[int]"},{name:"mut_rate",default:"None",annotation:"float"},{name:"crossover_rate",default:"None",annotation:"float"},{name:"tournament_size",default:"None",annotation:"float"},{name:"deap_verbose",default:"None",annotation:"bool"}]}}}),t._v(" "),n("p",[t._v("Initialize self.  See help(type(self)) for accurate signature.")])],1)}),[],!1,null,null,null);e.default=o.exports}}]);