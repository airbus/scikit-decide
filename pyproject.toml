[tool.poetry]
name = "scikit-decide"
version = "1.0.3.dev5+90a1f41c" # placeholder for poetry-dynamic-versioning
description = "The AI framework for Reinforcement Learning, Automated Planning and Scheduling"
authors = ["Airbus AI Research <scikit-decide@airbus.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://airbus.github.io/scikit-decide/"
repository = "https://github.com/airbus/scikit-decide"
keywords = ["reinforcement learning", "planning", "scheduling"]
packages = [{ include = "skdecide" }]
include = ["LICENSE", "README.md"]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
]

[tool.poetry.build]
script = "builder.py"
generate-setup-file = true

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
format-jinja = """
    {%- if distance == 0 -%}
        {{ base }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = ["skdecide/__init__.py"]

[tool.poetry.dependencies]
python = "^3.9"
pynng = ">=0.6.2"
pathos = ">=0.2.7"
scipy = { version = ">=1.9.2", optional = true }
gymnasium = { version = ">=0.28.1", optional = true }
numpy = { version = "^1.20.1", optional = true }
matplotlib = { version = ">=3.3.4", optional = true }
joblib = { version = ">=1.0.1", optional = true }
stable-baselines3 = { version = ">=2.0.0", optional = true }
ray = { extras = ["rllib"], version = ">=2.9.0, <2.38", optional = true }
discrete-optimization = { version = ">=0.5.0" }
openap = { version = ">=1.5", python = ">=3.9", optional = true }
pygeodesy = { version = ">=23.6.12", optional = true }
unified-planning = { version = ">=1.1.0", python = ">=3.10", optional = true }
up-tamer = { version = ">=1.1.2", python = ">=3.10, <3.12", markers = "platform_machine == 'x86_64'", optional = true }
up-fast-downward = { version = ">=0.4.1", python = ">=3.10", optional = true }
up-enhsp = { version = ">=0.0.25", python = ">=3.10", optional = true }
up-pyperplan = { version = ">=1.1.0", python = ">=3.10", optional = true }
cartopy = { version = ">=0.22.0", python = ">=3.9", optional = true }
pygrib = [
    { version = "<=2.1.5", platform = "linux", optional = true },
    { version = ">=2.1.5", platform = "darwin", optional = true },
]
pyRDDLGym = [
    { version = ">=2.1", python = "<3.12", optional = true },
    { version = "==2.0, <2.1", python = ">=3.12", optional = true },
]
pyRDDLGym-rl = [
    { version = ">=0.2", python = "<3.12", optional = true },
    { version = ">=0.1, <0.2", python = ">=3.12", optional = true },
]
pyRDDLGym-jax = { version = ">=0.3", optional = true }
pyRDDLGym-gurobi = { version = ">=0.2", optional = true }
rddlrepository = {version = ">=2.0", optional = true }

[tool.poetry.extras]
domains = [
    "gymnasium",
    "numpy",
    "matplotlib",
    "openap",
    "pygeodesy",
    "unified-planning",
    "cartopy",
    "pygrib",
    "scipy",
    "pyRDDLGym",
    "pyRDDLGym-rl",
    "rddlrepository"
]
solvers = [
    "gymnasium",
    "numpy",
    "joblib",
    "ray",
    "stable-baselines3",
    "unified-planning",
    "up-tamer",
    "up-fast-downward",
    "up-enhsp",
    "up-pyperplan",
    "scipy",
    "pyRDDLGym-jax",
    "pyRDDLGym-gurobi"
]
all = [
    "gymnasium",
    "numpy",
    "matplotlib",
    "joblib",
    "ray",
    "stable-baselines3",
    "openap",
    "pygeodesy",
    "unified-planning",
    "up-tamer",
    "up-fast-downward",
    "up-enhsp",
    "up-pyperplan",
    "cartopy",
    "pygrib",
    "scipy",
    "pyRDDLGym",
    "pyRDDLGym-rl",
    "rddlrepository",
    "pyRDDLGym-jax",
    "pyRDDLGym-gurobi"
]

[tool.poetry.plugins."skdecide.domains"]
GymDomain = "skdecide.hub.domain.gym:GymDomain [domains]"
DeterministicGymDomain = "skdecide.hub.domain.gym:DeterministicGymDomain [domains]"
CostDeterministicGymDomain = "skdecide.hub.domain.gym:CostDeterministicGymDomain [domains]"
GymPlanningDomain = "skdecide.hub.domain.gym:GymPlanningDomain [domains]"
GymWidthDomain = "skdecide.hub.domain.gym:GymWidthDomain [domains]"
UPDomain = "skdecide.hub.domain.up:UPDomain [domains]"
MasterMind = "skdecide.hub.domain.mastermind:MasterMind [domains]"
Maze = "skdecide.hub.domain.maze:Maze [domains]"
RockPaperScissors = "skdecide.hub.domain.rock_paper_scissors:RockPaperScissors [domains]"
SimpleGridWorld = "skdecide.hub.domain.simple_grid_world:SimpleGridWorld [domains]"
FlightPlanningDomain = "skdecide.hub.domain.flight_planning:FlightPlanningDomain [domains]"
MRCPSP = "skdecide.hub.domain.rcpsp:MRCPSP [domains]"
MRCPSPCalendar = "skdecide.hub.domain.rcpsp:MRCPSPCalendar [domains]"
RCPSP = "skdecide.hub.domain.rcpsp:RCPSP [domains]"
RCPSPCalendar = "skdecide.hub.domain.rcpsp:RCPSPCalendar [domains]"
Stochastic_RCPSP = "skdecide.hub.domain.rcpsp:Stochastic_RCPSP [domains]"
SMRCPSPCalendar = "skdecide.hub.domain.rcpsp:SMRCPSPCalendar [domains]"
MSRCPSP = "skdecide.hub.domain.rcpsp:MSRCPSP [domains]"
MSRCPSPCalendar = "skdecide.hub.domain.rcpsp:MSRCPSPCalendar [domains]"
RDDLDomain = "skdecide.hub.domain.rddl:RDDLDomain [domains]"
RDDLDomainRL = "skdecide.hub.domain.rddl:RDDLDomainRL [domains]"
RDDLDomainSimplifiedSpaces = "skdecide.hub.domain.rddl:RDDLDomainSimplifiedSpaces [domains]"

[tool.poetry.plugins."skdecide.solvers"]
AOstar = "skdecide.hub.solver.aostar:AOstar [solvers]"
Astar = "skdecide.hub.solver.astar:Astar [solvers]"
LRTAstar = "skdecide.hub.solver.lrtastar:LRTAstar [solvers]"
MCTS = "skdecide.hub.solver.mcts:MCTS [solvers]"
UCT = "skdecide.hub.solver.mcts:UCT [solvers]"
AugmentedRandomSearch = "skdecide.hub.solver.ars:AugmentedRandomSearch [solvers]"
BFWS = "skdecide.hub.solver.bfws:BFWS [solvers]"
CGP = "skdecide.hub.solver.cgp:CGP [solvers]"
IW = "skdecide.hub.solver.iw:IW [solvers]"
RIW = "skdecide.hub.solver.riw:RIW [solvers]"
LRTDP = "skdecide.hub.solver.lrtdp:LRTDP [solvers]"
ILAOstar = "skdecide.hub.solver.ilaostar:ILAOstar [solvers]"
LazyAstar = "skdecide.hub.solver.lazy_astar:LazyAstar [solvers]"
MARTDP = "skdecide.hub.solver.martdp:MARTDP [solvers]"
MAHD = "skdecide.hub.solver.mahd:MAHD [solvers]"
MaxentIRL = "skdecide.hub.solver.maxent_irl:MaxentIRL [solvers]"
POMCP = "skdecide.hub.solver.pomcp:POMCP [solvers]"
RayRLlib = "skdecide.hub.solver.ray_rllib:RayRLlib [solvers]"
SimpleGreedy = "skdecide.hub.solver.simple_greedy:SimpleGreedy [solvers]"
StableBaseline = "skdecide.hub.solver.stable_baselines:StableBaseline [solvers]"
DOSolver = "skdecide.hub.solver.do_solver:DOSolver [solvers]"
GPHH = "skdecide.hub.solver.do_solver:GPHH [solvers]"
PilePolicy = "skdecide.hub.solver.pile_policy_scheduling:PilePolicy [solvers]"
UPSolver = "skdecide.hub.solver.up:UPSolver [solvers]"
RDDLJaxSolver = "skdecide.hub.solver.rddl:RDDLJaxSolver [solvers]"
RDDLGurobiSolver = "skdecide.hub.solver.rddl:RDDLGurobiSolver [solvers]"

[tool.poetry.dev-dependencies]
pytest = "^6.2.2"
pytest-cov = "^2.11.1"
tqdm = "^4.66.3"
nbmake = "^1.0"
docopt = ">=0.6.2"
commonmark = ">=0.9.1"
gymnasium = { version = ">=0.28.1", extras = [
    "classic-control",
], optional = true }

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]

[tool.isort]
profile = "black"

[tool.pycln]
all = true

[build-system]
requires = [
    "poetry-core>=1.5.0",
    "setuptools>=49.2.1",
    "poetry-dynamic-versioning>=0.21.0",
]
build-backend = "poetry_dynamic_versioning.backend"
