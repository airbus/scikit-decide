(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{602:function(t,e,a){"use strict";a.r(e);var n=a(38),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hub-domain-plado-llg-encoder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hub-domain-plado-llg-encoder"}},[t._v("#")]),t._v(" hub.domain.plado.llg_encoder")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),a("skdecide-summary")],1),t._v(" "),a("h2",{attrs:{id:"edgelabel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#edgelabel"}},[t._v("#")]),t._v(" EdgeLabel")]),t._v(" "),a("p",[t._v("An enumeration.")]),t._v(" "),a("h3",{attrs:{id:"effect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#effect"}},[t._v("#")]),t._v(" EFFECT "),a("Badge",{attrs:{text:"EdgeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"gamma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gamma"}},[t._v("#")]),t._v(" GAMMA "),a("Badge",{attrs:{text:"EdgeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"nu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nu"}},[t._v("#")]),t._v(" NU "),a("Badge",{attrs:{text:"EdgeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"pre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre"}},[t._v("#")]),t._v(" PRE "),a("Badge",{attrs:{text:"EdgeLabel",type:"tip"}})],1),t._v(" "),a("h2",{attrs:{id:"nodelabel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodelabel"}},[t._v("#")]),t._v(" NodeLabel")]),t._v(" "),a("p",[t._v("An enumeration.")]),t._v(" "),a("h3",{attrs:{id:"action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" ACTION "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"assign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assign"}},[t._v("#")]),t._v(" ASSIGN "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"divide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#divide"}},[t._v("#")]),t._v(" DIVIDE "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"equal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equal"}},[t._v("#")]),t._v(" EQUAL "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"fluent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fluent"}},[t._v("#")]),t._v(" FLUENT "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"goal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goal"}},[t._v("#")]),t._v(" GOAL "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"greater"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#greater"}},[t._v("#")]),t._v(" GREATER "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"less"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#less"}},[t._v("#")]),t._v(" LESS "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"minus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minus"}},[t._v("#")]),t._v(" MINUS "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"multiply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiply"}},[t._v("#")]),t._v(" MULTIPLY "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"negated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#negated"}},[t._v("#")]),t._v(" NEGATED "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"numeric"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numeric"}},[t._v("#")]),t._v(" NUMERIC "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" OBJECT "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"plus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plus"}},[t._v("#")]),t._v(" PLUS "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"predicate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#predicate"}},[t._v("#")]),t._v(" PREDICATE "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" STATE "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[t._v("#")]),t._v(" STATIC "),a("Badge",{attrs:{text:"NodeLabel",type:"tip"}})],1),t._v(" "),a("h2",{attrs:{id:"indexfunctiontype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexfunctiontype"}},[t._v("#")]),t._v(" IndexFunctionType")]),t._v(" "),a("p",[t._v("An enumeration.")]),t._v(" "),a("h3",{attrs:{id:"onehot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onehot"}},[t._v("#")]),t._v(" ONEHOT "),a("Badge",{attrs:{text:"IndexFunctionType",type:"tip"}})],1),t._v(" "),a("h3",{attrs:{id:"randsphere"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#randsphere"}},[t._v("#")]),t._v(" RANDSPHERE "),a("Badge",{attrs:{text:"IndexFunctionType",type:"tip"}})],1),t._v(" "),a("h2",{attrs:{id:"llgencoder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#llgencoder"}},[t._v("#")]),t._v(" LLGEncoder")]),t._v(" "),a("p",[t._v("Lifted Learning Graph encoder for plado state.")]),t._v(" "),a("p",[t._v("This encodes the current state of a PDDL domain/problem pair into a LLG similar to what is presented in")]),t._v(" "),a("p",[t._v("Chen, D. Z., Thi√©baux, S., & Trevizan, F. (2024).\nLearning Domain-Independent Heuristics for Grounded and Lifted Planning.\nProceedings of the AAAI Conference on Artificial Intelligence, 38(18), 20078-20086.\nhttps://doi.org/10.1609/aaai.v38i18.29986")]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor "),a("Badge",{attrs:{text:"LLGEncoder",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"LLGEncoder",sig:{params:[{name:"task",annotation:"Task"},{name:"index_function_type",default:"IndexFunctionType.ONEHOT",annotation:"IndexFunctionType"},{name:"index_function_default_dim",default:"2",annotation:"int"},{name:"cost_functions",default:"None",annotation:"Optional[set[int]]"},{name:"encode_actions",default:"False",annotation:"bool"},{name:"simplify_encoding",default:"True",annotation:"bool"},{name:"encode_static_facts",default:"True",annotation:"bool"}]}}}),t._v(" "),a("p",[t._v("Args:\ntask:\nindex_function_type:\nindex_function_default_dim:\ncost_functions:\nencode_actions: decide whether to generate the subgraph dedicated to action encoding\nsimplify_encoding: decrease node and edge features dimension by dropping labels never used by the graph\n(e.g.: if no action encoding, drop EdgeLabel.EFFECT and EdgeLabel.PRE, NodeLabel.ACTION, NodeLabel.ASSIGN, ...,\nif no fluents defined, drop NodeLabel.NUMERIC, NodeLabel.GREATER, NodeLabel.PLUS, ...)\nNB: the encoding will be domain dependent.\nencode_static_facts: whether to encode the static facts or not.")]),t._v(" "),a("h3",{attrs:{id:"decode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decode"}},[t._v("#")]),t._v(" decode "),a("Badge",{attrs:{text:"LLGEncoder",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"decode",sig:{params:[{name:"self"},{name:"graph",annotation:"gym.spaces.GraphInstance"}],return:"State"}}}),t._v(" "),a("p",[t._v("Decode an LLG into a plado state.")]),t._v(" "),a("p",[t._v("Here we use the fact that the graph from this LLGEncoder.encode().\nSo")]),t._v(" "),a("ul",[a("li",[t._v("we know that nodes are well ordered:\n"),a("ul",[a("li",[t._v("predicate node before atom arg nodes")]),t._v(" "),a("li",[t._v("first atom arg before second atom arg")])])]),t._v(" "),a("li",[t._v("we now already the correspondance between nodes and predicates/objects")])]),t._v(" "),a("p",[t._v("If these hypotheses are not valid, rather use "),a("code",[t._v("decode_llg()")]),t._v(" which makes less hypotheses,\nbut could be less efficient.")]),t._v(" "),a("h3",{attrs:{id:"encode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encode"}},[t._v("#")]),t._v(" encode "),a("Badge",{attrs:{text:"LLGEncoder",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"encode",sig:{params:[{name:"self"},{name:"state",annotation:"State"}],return:"gym.spaces.GraphInstance"}}}),t._v(" "),a("p",[t._v("Encode plado state into an LLG.")]),t._v(" "),a("h3",{attrs:{id:"index-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-function"}},[t._v("#")]),t._v(" index_function "),a("Badge",{attrs:{text:"LLGEncoder",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"index_function",sig:{params:[{name:"self"},{name:"x",annotation:"Union[int, npt.NDArray[np.int_]]"}],return:"npt.NDArray[Union[np.int_, np.float64]]"}}}),t._v(" "),a("p",[t._v("Maps an index into sphere S^T.")]),t._v(" "),a("h3",{attrs:{id:"index-function-inverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-function-inverse"}},[t._v("#")]),t._v(" index_function_inverse "),a("Badge",{attrs:{text:"LLGEncoder",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"index_function_inverse",sig:{params:[{name:"self"},{name:"y",annotation:"npt.NDArray[Union[np.int_, np.float64]]"}],return:"Union[int, npt.NDArray[np.int_]]"}}}),t._v(" "),a("p",[t._v("Inverse of index function.")]),t._v(" "),a("h3",{attrs:{id:"plot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plot"}},[t._v("#")]),t._v(" plot "),a("Badge",{attrs:{text:"LLGEncoder",type:"tip"}})],1),t._v(" "),a("skdecide-signature",{attrs:{name:"plot",sig:{params:[{name:"self"},{name:"graph",annotation:"gym.spaces.GraphInstance"},{name:"subgraph",default:"None",annotation:"Optional[Any]"},{name:"subgraphs",default:"None",annotation:"Optional[Iterable[Any]]"},{name:"ax",default:"None",annotation:"Optional[Any]"}],return:"None"}}}),t._v(" "),a("p",[t._v("Plot the encoding graph (or a subgraph of it)")]),t._v(" "),a("p",[t._v("Args:\ngraph: encoding llg\nsubgraph: subgraph id (action or predicate)\nax: matplotlib axes in which plot the graph")]),t._v(" "),a("p",[t._v("Returns:")]),t._v(" "),a("h2",{attrs:{id:"decode-llg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decode-llg"}},[t._v("#")]),t._v(" decode_llg")]),t._v(" "),a("skdecide-signature",{attrs:{name:"decode_llg",sig:{params:[{name:"graph",annotation:"gym.spaces.GraphInstance"},{name:"cost_functions",default:"None",annotation:"Optional[set[int]]"}],return:"State"}}}),t._v(" "),a("p",[t._v("Decode a llg graph into a plado state without information about the plado.Task.")]),t._v(" "),a("p",[t._v("This may be less efficient than LLGEncoder.decode() but is self-sufficient.")]),t._v(" "),a("p",[t._v("Works only if LLGEncoder was used with options encode_actions=True and simplify_encoding=False.")])],1)}),[],!1,null,null,null);e.default=s.exports}}]);