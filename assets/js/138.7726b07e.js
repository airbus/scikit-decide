(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{652:function(t,e,r){"use strict";r.r(e);var n=r(38),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"hub-solver-ray-rllib-gnn-utils-torch-utils"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hub-solver-ray-rllib-gnn-utils-torch-utils"}},[t._v("#")]),t._v(" hub.solver.ray_rllib.gnn.utils.torch_utils")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("Domain specification")]),t._v(" "),r("skdecide-summary")],1),t._v(" "),r("h2",{attrs:{id:"convert-to-torch-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#convert-to-torch-tensor"}},[t._v("#")]),t._v(" convert_to_torch_tensor")]),t._v(" "),r("skdecide-signature",{attrs:{name:"convert_to_torch_tensor",sig:{params:[{name:"x",annotation:"typing.Union[<built-in function array>, ForwardRef('jnp.ndarray'), ForwardRef('tf.Tensor'), ForwardRef('torch.Tensor'), dict, tuple, torch_geometric.data.data.Data, gymnasium.spaces.graph.GraphInstance, list[gymnasium.spaces.graph.GraphInstance]]"},{name:"device",default:"None",annotation:"typing.Optional[str]"},{name:"pin_memory",default:"False",annotation:"<class 'bool'>"}],return:"typing.Union[<built-in function array>, ForwardRef('jnp.ndarray'), ForwardRef('tf.Tensor'), ForwardRef('torch.Tensor'), dict, tuple, torch_geometric.data.data.Data]"}}}),t._v(" "),r("p",[t._v("Converts any struct to torch.Tensors.")]),t._v(" "),r("p",[t._v("Args:\nx: Any (possibly nested) struct, the values in which will be\nconverted and returned as a new struct with all leaves converted\nto torch tensors.\ndevice: The device to create the tensor on.\npin_memory: If True, will call the "),r("code",[t._v("pin_memory()")]),t._v(" method on the created tensors.")]),t._v(" "),r("p",[t._v("Returns:\nAny: A new struct with the same structure as "),r("code",[t._v("x")]),t._v(", but with all\nvalues converted to torch Tensor types. This does not convert possibly\nnested elements that are None because torch has no representation for that.")])],1)}),[],!1,null,null,null);e.default=a.exports}}]);