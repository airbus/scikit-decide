(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{577:function(e,t,a){"use strict";a.r(t);var s=a(38),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"hub-domain-flight-planning-aircraft-performance-weather-service-atmosphere-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hub-domain-flight-planning-aircraft-performance-weather-service-atmosphere-service"}},[e._v("#")]),e._v(" hub.domain.flight_planning.aircraft_performance.weather.service.atmosphere_service")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Domain specification")]),e._v(" "),a("skdecide-summary")],1),e._v(" "),a("h2",{attrs:{id:"atmosphereservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#atmosphereservice"}},[e._v("#")]),e._v(" AtmosphereService")]),e._v(" "),a("p",[e._v("Class atmosphere variables computations and constants")]),e._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[e._v("#")]),e._v(" Constructor "),a("Badge",{attrs:{text:"AtmosphereService",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"AtmosphereService",sig:{params:[]}}}),e._v(" "),a("p",[e._v("Initialize self.  See help(type(self)) for accurate signature.")]),e._v(" "),a("h3",{attrs:{id:"get-dynamic-viscosity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-dynamic-viscosity"}},[e._v("#")]),e._v(" get_dynamic_viscosity "),a("Badge",{attrs:{text:"AtmosphereService",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_dynamic_viscosity",sig:{params:[{name:"self"},{name:"static_temperature_k",annotation:"<class 'float'>"}],return:"<class 'float'>"}}}),e._v(" "),a("p",[e._v("FMS formula to compute Mu\n:param static_temperature_k: static air temperature (K)\n:return: Dynamic viscosity value")]),e._v(" "),a("h3",{attrs:{id:"get-volume-mass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-volume-mass"}},[e._v("#")]),e._v(" get_volume_mass "),a("Badge",{attrs:{text:"AtmosphereService",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"get_volume_mass",sig:{params:[{name:"self"},{name:"static_pressure_pa",annotation:"<class 'float'>"},{name:"static_temperature_k",annotation:"<class 'float'>"}]}}}),e._v(" "),a("p",[e._v("Density computation of a perfect gaz\n:param static_pressure_pa:\n:param static_temperature_k:\n:return:")]),e._v(" "),a("h3",{attrs:{id:"retrieve-weather-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retrieve-weather-state"}},[e._v("#")]),e._v(" retrieve_weather_state "),a("Badge",{attrs:{text:"AtmosphereService",type:"tip"}})],1),e._v(" "),a("skdecide-signature",{attrs:{name:"retrieve_weather_state",sig:{params:[{name:"self"},{name:"atmosphere_settings",annotation:"<class 'skdecide.hub.domain.flight_planning.aircraft_performance.weather.settings.atmosphere_settings_interface.AtmosphereSettings'>"},{name:"four_dimensions_state",annotation:"<class 'skdecide.hub.domain.flight_planning.aircraft_performance.bean.four_dimensions_state.FourDimensionsState'>"}],return:"<class 'skdecide.hub.domain.flight_planning.aircraft_performance.bean.weather_state.WeatherState'>"}}}),e._v(" "),a("p",[e._v("From the 4D state location and atmosphere settings, compute the weather state using the appropriate atmosphere service\n:param atmosphere_settings: Settings defining the atmosphere (type, constants...)\n:param four_dimensions_state: 4D state (zp, location, time)\n:return: Weather state (Temperature, pressure...)")])],1)}),[],!1,null,null,null);t.default=r.exports}}]);